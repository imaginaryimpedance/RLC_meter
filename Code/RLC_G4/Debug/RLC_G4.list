
RLC_G4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d1c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000de0  08006efc  08006efc  00016efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007cdc  08007cdc  00020284  2**0
                  CONTENTS
  4 .ARM          00000000  08007cdc  08007cdc  00020284  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007cdc  08007cdc  00020284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007cdc  08007cdc  00017cdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ce0  08007ce0  00017ce0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000284  20000000  08007ce4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006e4  20000284  08007f68  00020284  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000968  08007f68  00020968  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020284  2**0
                  CONTENTS, READONLY
 12 .debug_info   000187b4  00000000  00000000  000202b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000310b  00000000  00000000  00038a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001730  00000000  00000000  0003bb78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015c8  00000000  00000000  0003d2a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021204  00000000  00000000  0003e870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019522  00000000  00000000  0005fa74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db076  00000000  00000000  00078f96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015400c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067f8  00000000  00000000  0015405c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000284 	.word	0x20000284
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006ee4 	.word	0x08006ee4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000288 	.word	0x20000288
 800021c:	08006ee4 	.word	0x08006ee4

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <oled.3>:




  int oled(void)
  {
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b088      	sub	sp, #32
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	f8c7 c004 	str.w	ip, [r7, #4]

	 //defining buffers
	 char R_buffer[10];
	 sprintf(R_buffer,"%d",R);
 80002ca:	4b44      	ldr	r3, [pc, #272]	; (80003dc <oled.3+0x11c>)
 80002cc:	681a      	ldr	r2, [r3, #0]
 80002ce:	f107 0314 	add.w	r3, r7, #20
 80002d2:	4943      	ldr	r1, [pc, #268]	; (80003e0 <oled.3+0x120>)
 80002d4:	4618      	mov	r0, r3
 80002d6:	f006 f975 	bl	80065c4 <siprintf>
	 char X_buffer[10];
	 sprintf(X_buffer,"%d",X);
 80002da:	4b42      	ldr	r3, [pc, #264]	; (80003e4 <oled.3+0x124>)
 80002dc:	681a      	ldr	r2, [r3, #0]
 80002de:	f107 0308 	add.w	r3, r7, #8
 80002e2:	493f      	ldr	r1, [pc, #252]	; (80003e0 <oled.3+0x120>)
 80002e4:	4618      	mov	r0, r3
 80002e6:	f006 f96d 	bl	80065c4 <siprintf>


	 //converting to char and sending to oled
	 SSD1306_Clear ();
 80002ea:	f000 ffdc 	bl	80012a6 <SSD1306_Clear>
	 SSD1306_GotoXY (0,0);
 80002ee:	2100      	movs	r1, #0
 80002f0:	2000      	movs	r0, #0
 80002f2:	f000 ff1d 	bl	8001130 <SSD1306_GotoXY>
	 SSD1306_Puts ("|Z|=", &Font_11x18, 1);
 80002f6:	2201      	movs	r2, #1
 80002f8:	493b      	ldr	r1, [pc, #236]	; (80003e8 <oled.3+0x128>)
 80002fa:	483c      	ldr	r0, [pc, #240]	; (80003ec <oled.3+0x12c>)
 80002fc:	f000 ffae 	bl	800125c <SSD1306_Puts>
	 SSD1306_GotoXY (50,0);
 8000300:	2100      	movs	r1, #0
 8000302:	2032      	movs	r0, #50	; 0x32
 8000304:	f000 ff14 	bl	8001130 <SSD1306_GotoXY>
	 SSD1306_Puts (R_buffer, &Font_11x18, 1);
 8000308:	f107 0314 	add.w	r3, r7, #20
 800030c:	2201      	movs	r2, #1
 800030e:	4936      	ldr	r1, [pc, #216]	; (80003e8 <oled.3+0x128>)
 8000310:	4618      	mov	r0, r3
 8000312:	f000 ffa3 	bl	800125c <SSD1306_Puts>
	 SSD1306_GotoXY (0,20);
 8000316:	2114      	movs	r1, #20
 8000318:	2000      	movs	r0, #0
 800031a:	f000 ff09 	bl	8001130 <SSD1306_GotoXY>
	 SSD1306_Puts ("V1=", &Font_11x18, 1);
 800031e:	2201      	movs	r2, #1
 8000320:	4931      	ldr	r1, [pc, #196]	; (80003e8 <oled.3+0x128>)
 8000322:	4833      	ldr	r0, [pc, #204]	; (80003f0 <oled.3+0x130>)
 8000324:	f000 ff9a 	bl	800125c <SSD1306_Puts>
	 SSD1306_GotoXY (30,20);
 8000328:	2114      	movs	r1, #20
 800032a:	201e      	movs	r0, #30
 800032c:	f000 ff00 	bl	8001130 <SSD1306_GotoXY>
	 SSD1306_Puts (X_buffer, &Font_11x18, 1);
 8000330:	f107 0308 	add.w	r3, r7, #8
 8000334:	2201      	movs	r2, #1
 8000336:	492c      	ldr	r1, [pc, #176]	; (80003e8 <oled.3+0x128>)
 8000338:	4618      	mov	r0, r3
 800033a:	f000 ff8f 	bl	800125c <SSD1306_Puts>

	 //writing shunt resistance and sine frequency

	 //sine wave
	 SSD1306_GotoXY (0,40);
 800033e:	2128      	movs	r1, #40	; 0x28
 8000340:	2000      	movs	r0, #0
 8000342:	f000 fef5 	bl	8001130 <SSD1306_GotoXY>

	 if(fSine == 5000){
 8000346:	4b2b      	ldr	r3, [pc, #172]	; (80003f4 <oled.3+0x134>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	f241 3288 	movw	r2, #5000	; 0x1388
 800034e:	4293      	cmp	r3, r2
 8000350:	d105      	bne.n	800035e <oled.3+0x9e>
	 SSD1306_Puts ("5kHz", &Font_11x18, 1);
 8000352:	2201      	movs	r2, #1
 8000354:	4924      	ldr	r1, [pc, #144]	; (80003e8 <oled.3+0x128>)
 8000356:	4828      	ldr	r0, [pc, #160]	; (80003f8 <oled.3+0x138>)
 8000358:	f000 ff80 	bl	800125c <SSD1306_Puts>
 800035c:	e013      	b.n	8000386 <oled.3+0xc6>
	 }
	 else if(fSine == 1000){
 800035e:	4b25      	ldr	r3, [pc, #148]	; (80003f4 <oled.3+0x134>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000366:	d105      	bne.n	8000374 <oled.3+0xb4>
		 SSD1306_Puts ("1kHz", &Font_11x18, 1);
 8000368:	2201      	movs	r2, #1
 800036a:	491f      	ldr	r1, [pc, #124]	; (80003e8 <oled.3+0x128>)
 800036c:	4823      	ldr	r0, [pc, #140]	; (80003fc <oled.3+0x13c>)
 800036e:	f000 ff75 	bl	800125c <SSD1306_Puts>
 8000372:	e008      	b.n	8000386 <oled.3+0xc6>
	 }
	 else if (fSine == 50){
 8000374:	4b1f      	ldr	r3, [pc, #124]	; (80003f4 <oled.3+0x134>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	2b32      	cmp	r3, #50	; 0x32
 800037a:	d104      	bne.n	8000386 <oled.3+0xc6>
		 SSD1306_Puts ("50Hz", &Font_11x18, 1);
 800037c:	2201      	movs	r2, #1
 800037e:	491a      	ldr	r1, [pc, #104]	; (80003e8 <oled.3+0x128>)
 8000380:	481f      	ldr	r0, [pc, #124]	; (8000400 <oled.3+0x140>)
 8000382:	f000 ff6b 	bl	800125c <SSD1306_Puts>
	 }

	 //shunt resistance
	 SSD1306_GotoXY (50,40);
 8000386:	2128      	movs	r1, #40	; 0x28
 8000388:	2032      	movs	r0, #50	; 0x32
 800038a:	f000 fed1 	bl	8001130 <SSD1306_GotoXY>

	 if(Rn == 10000){
 800038e:	4b1d      	ldr	r3, [pc, #116]	; (8000404 <oled.3+0x144>)
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	f242 7210 	movw	r2, #10000	; 0x2710
 8000396:	4293      	cmp	r3, r2
 8000398:	d105      	bne.n	80003a6 <oled.3+0xe6>
	 SSD1306_Puts ("10kOhm", &Font_11x18, 1);
 800039a:	2201      	movs	r2, #1
 800039c:	4912      	ldr	r1, [pc, #72]	; (80003e8 <oled.3+0x128>)
 800039e:	481a      	ldr	r0, [pc, #104]	; (8000408 <oled.3+0x148>)
 80003a0:	f000 ff5c 	bl	800125c <SSD1306_Puts>
 80003a4:	e013      	b.n	80003ce <oled.3+0x10e>
	 }
	 else if(Rn==1000){
 80003a6:	4b17      	ldr	r3, [pc, #92]	; (8000404 <oled.3+0x144>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80003ae:	d105      	bne.n	80003bc <oled.3+0xfc>
		 SSD1306_Puts ("1kOhm", &Font_11x18, 1);
 80003b0:	2201      	movs	r2, #1
 80003b2:	490d      	ldr	r1, [pc, #52]	; (80003e8 <oled.3+0x128>)
 80003b4:	4815      	ldr	r0, [pc, #84]	; (800040c <oled.3+0x14c>)
 80003b6:	f000 ff51 	bl	800125c <SSD1306_Puts>
 80003ba:	e008      	b.n	80003ce <oled.3+0x10e>
	 }
	 else if(Rn==100){
 80003bc:	4b11      	ldr	r3, [pc, #68]	; (8000404 <oled.3+0x144>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	2b64      	cmp	r3, #100	; 0x64
 80003c2:	d104      	bne.n	80003ce <oled.3+0x10e>
	 		 SSD1306_Puts ("100Ohm", &Font_11x18, 1);
 80003c4:	2201      	movs	r2, #1
 80003c6:	4908      	ldr	r1, [pc, #32]	; (80003e8 <oled.3+0x128>)
 80003c8:	4811      	ldr	r0, [pc, #68]	; (8000410 <oled.3+0x150>)
 80003ca:	f000 ff47 	bl	800125c <SSD1306_Puts>
	 	 }

	 //displaying new data
	 SSD1306_UpdateScreen();
 80003ce:	f000 fe09 	bl	8000fe4 <SSD1306_UpdateScreen>

  }
 80003d2:	bf00      	nop
 80003d4:	4618      	mov	r0, r3
 80003d6:	3720      	adds	r7, #32
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	20000210 	.word	0x20000210
 80003e0:	08006efc 	.word	0x08006efc
 80003e4:	2000051c 	.word	0x2000051c
 80003e8:	20000000 	.word	0x20000000
 80003ec:	08006f00 	.word	0x08006f00
 80003f0:	08006f08 	.word	0x08006f08
 80003f4:	20000208 	.word	0x20000208
 80003f8:	08006f0c 	.word	0x08006f0c
 80003fc:	08006f14 	.word	0x08006f14
 8000400:	08006f1c 	.word	0x08006f1c
 8000404:	2000020c 	.word	0x2000020c
 8000408:	08006f24 	.word	0x08006f24
 800040c:	08006f2c 	.word	0x08006f2c
 8000410:	08006f34 	.word	0x08006f34

08000414 <main>:
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b084      	sub	sp, #16
 8000418:	af02      	add	r7, sp, #8
int main(void)
 800041a:	f107 0310 	add.w	r3, r7, #16
 800041e:	607b      	str	r3, [r7, #4]
  HAL_Init();
 8000420:	f001 fa8b 	bl	800193a <HAL_Init>
  SystemClock_Config();
 8000424:	f000 f9f8 	bl	8000818 <SystemClock_Config>
  MX_GPIO_Init();
 8000428:	f000 fc9e 	bl	8000d68 <MX_GPIO_Init>
  MX_DMA_Init();
 800042c:	f000 fc72 	bl	8000d14 <MX_DMA_Init>
  MX_I2C1_Init();
 8000430:	f000 fb48 	bl	8000ac4 <MX_I2C1_Init>
  MX_DAC1_Init();
 8000434:	f000 fb0c 	bl	8000a50 <MX_DAC1_Init>
  MX_TIM2_Init();
 8000438:	f000 fb84 	bl	8000b44 <MX_TIM2_Init>
  MX_ADC1_Init();
 800043c:	f000 fa2a 	bl	8000894 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000440:	f000 fbcc 	bl	8000bdc <MX_TIM3_Init>
  MX_ADC2_Init();
 8000444:	f000 fa9e 	bl	8000984 <MX_ADC2_Init>
  MX_TIM4_Init();
 8000448:	f000 fc16 	bl	8000c78 <MX_TIM4_Init>
  HAL_TIM_Base_Start(&htim2);
 800044c:	4823      	ldr	r0, [pc, #140]	; (80004dc <main+0xc8>)
 800044e:	f005 fb25 	bl	8005a9c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 8000452:	4823      	ldr	r0, [pc, #140]	; (80004e0 <main+0xcc>)
 8000454:	f005 fb84 	bl	8005b60 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim4);
 8000458:	4822      	ldr	r0, [pc, #136]	; (80004e4 <main+0xd0>)
 800045a:	f005 fb1f 	bl	8005a9c <HAL_TIM_Base_Start>
  HAL_ADC_Start(&hadc1);
 800045e:	4822      	ldr	r0, [pc, #136]	; (80004e8 <main+0xd4>)
 8000460:	f001 febe 	bl	80021e0 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 8000464:	4821      	ldr	r0, [pc, #132]	; (80004ec <main+0xd8>)
 8000466:	f001 febb 	bl	80021e0 <HAL_ADC_Start>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_2, (uint32_t*)Wave_LUT, 128, DAC_ALIGN_12B_R);
 800046a:	2300      	movs	r3, #0
 800046c:	9300      	str	r3, [sp, #0]
 800046e:	2380      	movs	r3, #128	; 0x80
 8000470:	4a1f      	ldr	r2, [pc, #124]	; (80004f0 <main+0xdc>)
 8000472:	2110      	movs	r1, #16
 8000474:	481f      	ldr	r0, [pc, #124]	; (80004f4 <main+0xe0>)
 8000476:	f002 feb9 	bl	80031ec <HAL_DAC_Start_DMA>
  SSD1306_Init();
 800047a:	f000 fcef 	bl	8000e5c <SSD1306_Init>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800047e:	217f      	movs	r1, #127	; 0x7f
 8000480:	4819      	ldr	r0, [pc, #100]	; (80004e8 <main+0xd4>)
 8000482:	f002 fc7b 	bl	8002d7c <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8000486:	217f      	movs	r1, #127	; 0x7f
 8000488:	4818      	ldr	r0, [pc, #96]	; (80004ec <main+0xd8>)
 800048a:	f002 fc77 	bl	8002d7c <HAL_ADCEx_Calibration_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  rangeSelection();
 800048e:	1d3b      	adds	r3, r7, #4
 8000490:	469c      	mov	ip, r3
 8000492:	f000 f839 	bl	8000508 <rangeSelection.0>

	  getDCOffset();
 8000496:	1d3b      	adds	r3, r7, #4
 8000498:	469c      	mov	ip, r3
 800049a:	f000 f8e1 	bl	8000660 <getDCOffset.1>

	  getRMSValue();
 800049e:	1d3b      	adds	r3, r7, #4
 80004a0:	469c      	mov	ip, r3
 80004a2:	f000 f925 	bl	80006f0 <getRMSValue.2>


	  R =V1_rms;
 80004a6:	4b14      	ldr	r3, [pc, #80]	; (80004f8 <main+0xe4>)
 80004a8:	edd3 7a00 	vldr	s15, [r3]
 80004ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80004b0:	ee17 2a90 	vmov	r2, s15
 80004b4:	4b11      	ldr	r3, [pc, #68]	; (80004fc <main+0xe8>)
 80004b6:	601a      	str	r2, [r3, #0]
	  X = V2_rms;
 80004b8:	4b11      	ldr	r3, [pc, #68]	; (8000500 <main+0xec>)
 80004ba:	edd3 7a00 	vldr	s15, [r3]
 80004be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80004c2:	ee17 2a90 	vmov	r2, s15
 80004c6:	4b0f      	ldr	r3, [pc, #60]	; (8000504 <main+0xf0>)
 80004c8:	601a      	str	r2, [r3, #0]

	  oled();
 80004ca:	1d3b      	adds	r3, r7, #4
 80004cc:	469c      	mov	ip, r3
 80004ce:	f7ff fef7 	bl	80002c0 <oled.3>

	 HAL_Delay (2000);
 80004d2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80004d6:	f001 faa1 	bl	8001a1c <HAL_Delay>
	  rangeSelection();
 80004da:	e7d8      	b.n	800048e <main+0x7a>
 80004dc:	20000438 	.word	0x20000438
 80004e0:	20000484 	.word	0x20000484
 80004e4:	200004d0 	.word	0x200004d0
 80004e8:	200002a0 	.word	0x200002a0
 80004ec:	2000030c 	.word	0x2000030c
 80004f0:	20000008 	.word	0x20000008
 80004f4:	20000378 	.word	0x20000378
 80004f8:	20000534 	.word	0x20000534
 80004fc:	20000210 	.word	0x20000210
 8000500:	20000538 	.word	0x20000538
 8000504:	2000051c 	.word	0x2000051c

08000508 <rangeSelection.0>:
  {
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	f8c7 c004 	str.w	ip, [r7, #4]
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11)== GPIO_PIN_SET){
 8000512:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000516:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800051a:	f003 fd79 	bl	8004010 <HAL_GPIO_ReadPin>
 800051e:	4603      	mov	r3, r0
 8000520:	2b01      	cmp	r3, #1
 8000522:	d115      	bne.n	8000550 <rangeSelection.0+0x48>
		  __HAL_TIM_SET_AUTORELOAD(&htim2,1499);	//DAC timers frequency
 8000524:	4b49      	ldr	r3, [pc, #292]	; (800064c <rangeSelection.0+0x144>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	f240 52db 	movw	r2, #1499	; 0x5db
 800052c:	62da      	str	r2, [r3, #44]	; 0x2c
 800052e:	4b47      	ldr	r3, [pc, #284]	; (800064c <rangeSelection.0+0x144>)
 8000530:	f240 52db 	movw	r2, #1499	; 0x5db
 8000534:	60da      	str	r2, [r3, #12]
		  __HAL_TIM_SET_AUTORELOAD(&htim3,47999);	//tim3 frequency for adc conversion = 1kHz
 8000536:	4b46      	ldr	r3, [pc, #280]	; (8000650 <rangeSelection.0+0x148>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 800053e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000540:	4b43      	ldr	r3, [pc, #268]	; (8000650 <rangeSelection.0+0x148>)
 8000542:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8000546:	60da      	str	r2, [r3, #12]
		  fSine = 50;
 8000548:	4b42      	ldr	r3, [pc, #264]	; (8000654 <rangeSelection.0+0x14c>)
 800054a:	2232      	movs	r2, #50	; 0x32
 800054c:	601a      	str	r2, [r3, #0]
 800054e:	e02f      	b.n	80005b0 <rangeSelection.0+0xa8>
	  else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)== GPIO_PIN_SET){
 8000550:	2108      	movs	r1, #8
 8000552:	4841      	ldr	r0, [pc, #260]	; (8000658 <rangeSelection.0+0x150>)
 8000554:	f003 fd5c 	bl	8004010 <HAL_GPIO_ReadPin>
 8000558:	4603      	mov	r3, r0
 800055a:	2b01      	cmp	r3, #1
 800055c:	d114      	bne.n	8000588 <rangeSelection.0+0x80>
		 __HAL_TIM_SET_AUTORELOAD(&htim2, 14); 		//DAC timers frequency
 800055e:	4b3b      	ldr	r3, [pc, #236]	; (800064c <rangeSelection.0+0x144>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	220e      	movs	r2, #14
 8000564:	62da      	str	r2, [r3, #44]	; 0x2c
 8000566:	4b39      	ldr	r3, [pc, #228]	; (800064c <rangeSelection.0+0x144>)
 8000568:	220e      	movs	r2, #14
 800056a:	60da      	str	r2, [r3, #12]
		 __HAL_TIM_SET_AUTORELOAD(&htim3,319); 		//tim3 frequency for adc conversion = 150kHz
 800056c:	4b38      	ldr	r3, [pc, #224]	; (8000650 <rangeSelection.0+0x148>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f240 123f 	movw	r2, #319	; 0x13f
 8000574:	62da      	str	r2, [r3, #44]	; 0x2c
 8000576:	4b36      	ldr	r3, [pc, #216]	; (8000650 <rangeSelection.0+0x148>)
 8000578:	f240 123f 	movw	r2, #319	; 0x13f
 800057c:	60da      	str	r2, [r3, #12]
		  fSine = 5000;
 800057e:	4b35      	ldr	r3, [pc, #212]	; (8000654 <rangeSelection.0+0x14c>)
 8000580:	f241 3288 	movw	r2, #5000	; 0x1388
 8000584:	601a      	str	r2, [r3, #0]
 8000586:	e013      	b.n	80005b0 <rangeSelection.0+0xa8>
		 __HAL_TIM_SET_AUTORELOAD(&htim2,74); 		//DAC timers frequency
 8000588:	4b30      	ldr	r3, [pc, #192]	; (800064c <rangeSelection.0+0x144>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	224a      	movs	r2, #74	; 0x4a
 800058e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000590:	4b2e      	ldr	r3, [pc, #184]	; (800064c <rangeSelection.0+0x144>)
 8000592:	224a      	movs	r2, #74	; 0x4a
 8000594:	60da      	str	r2, [r3, #12]
		 __HAL_TIM_SET_AUTORELOAD(&htim3,2399);		//tim3 frequency for adc conversion = 20kHz
 8000596:	4b2e      	ldr	r3, [pc, #184]	; (8000650 <rangeSelection.0+0x148>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	f640 125f 	movw	r2, #2399	; 0x95f
 800059e:	62da      	str	r2, [r3, #44]	; 0x2c
 80005a0:	4b2b      	ldr	r3, [pc, #172]	; (8000650 <rangeSelection.0+0x148>)
 80005a2:	f640 125f 	movw	r2, #2399	; 0x95f
 80005a6:	60da      	str	r2, [r3, #12]
		  fSine = 1000;
 80005a8:	4b2a      	ldr	r3, [pc, #168]	; (8000654 <rangeSelection.0+0x14c>)
 80005aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005ae:	601a      	str	r2, [r3, #0]
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6)== GPIO_PIN_SET){
 80005b0:	2140      	movs	r1, #64	; 0x40
 80005b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005b6:	f003 fd2b 	bl	8004010 <HAL_GPIO_ReadPin>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b01      	cmp	r3, #1
 80005be:	d112      	bne.n	80005e6 <rangeSelection.0+0xde>
		  Rn = 100;
 80005c0:	4b26      	ldr	r3, [pc, #152]	; (800065c <rangeSelection.0+0x154>)
 80005c2:	2264      	movs	r2, #100	; 0x64
 80005c4:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5 ,GPIO_PIN_RESET);
 80005c6:	2200      	movs	r2, #0
 80005c8:	2120      	movs	r1, #32
 80005ca:	4823      	ldr	r0, [pc, #140]	; (8000658 <rangeSelection.0+0x150>)
 80005cc:	f003 fd38 	bl	8004040 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4 ,GPIO_PIN_RESET);
 80005d0:	2200      	movs	r2, #0
 80005d2:	2110      	movs	r1, #16
 80005d4:	4820      	ldr	r0, [pc, #128]	; (8000658 <rangeSelection.0+0x150>)
 80005d6:	f003 fd33 	bl	8004040 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 ,GPIO_PIN_SET);
 80005da:	2201      	movs	r2, #1
 80005dc:	2140      	movs	r1, #64	; 0x40
 80005de:	481e      	ldr	r0, [pc, #120]	; (8000658 <rangeSelection.0+0x150>)
 80005e0:	f003 fd2e 	bl	8004040 <HAL_GPIO_WritePin>
 80005e4:	e02d      	b.n	8000642 <rangeSelection.0+0x13a>
	  else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0)== GPIO_PIN_SET){
 80005e6:	2101      	movs	r1, #1
 80005e8:	481b      	ldr	r0, [pc, #108]	; (8000658 <rangeSelection.0+0x150>)
 80005ea:	f003 fd11 	bl	8004010 <HAL_GPIO_ReadPin>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b01      	cmp	r3, #1
 80005f2:	d113      	bne.n	800061c <rangeSelection.0+0x114>
		  Rn = 10000;
 80005f4:	4b19      	ldr	r3, [pc, #100]	; (800065c <rangeSelection.0+0x154>)
 80005f6:	f242 7210 	movw	r2, #10000	; 0x2710
 80005fa:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5 ,GPIO_PIN_RESET);
 80005fc:	2200      	movs	r2, #0
 80005fe:	2120      	movs	r1, #32
 8000600:	4815      	ldr	r0, [pc, #84]	; (8000658 <rangeSelection.0+0x150>)
 8000602:	f003 fd1d 	bl	8004040 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 ,GPIO_PIN_RESET);
 8000606:	2200      	movs	r2, #0
 8000608:	2140      	movs	r1, #64	; 0x40
 800060a:	4813      	ldr	r0, [pc, #76]	; (8000658 <rangeSelection.0+0x150>)
 800060c:	f003 fd18 	bl	8004040 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4 ,GPIO_PIN_SET);
 8000610:	2201      	movs	r2, #1
 8000612:	2110      	movs	r1, #16
 8000614:	4810      	ldr	r0, [pc, #64]	; (8000658 <rangeSelection.0+0x150>)
 8000616:	f003 fd13 	bl	8004040 <HAL_GPIO_WritePin>
 800061a:	e012      	b.n	8000642 <rangeSelection.0+0x13a>
		  Rn = 1000;
 800061c:	4b0f      	ldr	r3, [pc, #60]	; (800065c <rangeSelection.0+0x154>)
 800061e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000622:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 ,GPIO_PIN_RESET);
 8000624:	2200      	movs	r2, #0
 8000626:	2140      	movs	r1, #64	; 0x40
 8000628:	480b      	ldr	r0, [pc, #44]	; (8000658 <rangeSelection.0+0x150>)
 800062a:	f003 fd09 	bl	8004040 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4 ,GPIO_PIN_RESET);
 800062e:	2200      	movs	r2, #0
 8000630:	2110      	movs	r1, #16
 8000632:	4809      	ldr	r0, [pc, #36]	; (8000658 <rangeSelection.0+0x150>)
 8000634:	f003 fd04 	bl	8004040 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5 ,GPIO_PIN_SET);
 8000638:	2201      	movs	r2, #1
 800063a:	2120      	movs	r1, #32
 800063c:	4806      	ldr	r0, [pc, #24]	; (8000658 <rangeSelection.0+0x150>)
 800063e:	f003 fcff 	bl	8004040 <HAL_GPIO_WritePin>
  }
 8000642:	bf00      	nop
 8000644:	4618      	mov	r0, r3
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20000438 	.word	0x20000438
 8000650:	20000484 	.word	0x20000484
 8000654:	20000208 	.word	0x20000208
 8000658:	48000400 	.word	0x48000400
 800065c:	2000020c 	.word	0x2000020c

08000660 <getDCOffset.1>:
  int getDCOffset(void){
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	f8c7 c004 	str.w	ip, [r7, #4]
	  while(samples<(1000)){
 800066a:	e01c      	b.n	80006a6 <getDCOffset.1+0x46>
	 	if(flag == 1){  							 //flag =1 -> TIM3 interrupt
 800066c:	4b1a      	ldr	r3, [pc, #104]	; (80006d8 <getDCOffset.1+0x78>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	2b01      	cmp	r3, #1
 8000672:	d118      	bne.n	80006a6 <getDCOffset.1+0x46>
	 		V1 = HAL_ADC_GetValue(&hadc1); 			 //ADC1 Read
 8000674:	4819      	ldr	r0, [pc, #100]	; (80006dc <getDCOffset.1+0x7c>)
 8000676:	f001 fe6f 	bl	8002358 <HAL_ADC_GetValue>
 800067a:	4603      	mov	r3, r0
 800067c:	461a      	mov	r2, r3
 800067e:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <getDCOffset.1+0x80>)
 8000680:	601a      	str	r2, [r3, #0]
	 		V1_sum = V1_sum+V1;
 8000682:	4b18      	ldr	r3, [pc, #96]	; (80006e4 <getDCOffset.1+0x84>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4a16      	ldr	r2, [pc, #88]	; (80006e0 <getDCOffset.1+0x80>)
 8000688:	6812      	ldr	r2, [r2, #0]
 800068a:	4413      	add	r3, r2
 800068c:	4a15      	ldr	r2, [pc, #84]	; (80006e4 <getDCOffset.1+0x84>)
 800068e:	6013      	str	r3, [r2, #0]
	 		samples = samples+1;
 8000690:	4b15      	ldr	r3, [pc, #84]	; (80006e8 <getDCOffset.1+0x88>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	3301      	adds	r3, #1
 8000696:	4a14      	ldr	r2, [pc, #80]	; (80006e8 <getDCOffset.1+0x88>)
 8000698:	6013      	str	r3, [r2, #0]
	 		HAL_ADC_Start(&hadc1);					//starting another adc conversion
 800069a:	4810      	ldr	r0, [pc, #64]	; (80006dc <getDCOffset.1+0x7c>)
 800069c:	f001 fda0 	bl	80021e0 <HAL_ADC_Start>
	 		flag = 0;								//reseting flag
 80006a0:	4b0d      	ldr	r3, [pc, #52]	; (80006d8 <getDCOffset.1+0x78>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
	  while(samples<(1000)){
 80006a6:	4b10      	ldr	r3, [pc, #64]	; (80006e8 <getDCOffset.1+0x88>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80006ae:	d3dd      	bcc.n	800066c <getDCOffset.1+0xc>
	 	  V1_avg = V1_sum/samples;					//Calculating DC Offset based on V1
 80006b0:	4b0c      	ldr	r3, [pc, #48]	; (80006e4 <getDCOffset.1+0x84>)
 80006b2:	681a      	ldr	r2, [r3, #0]
 80006b4:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <getDCOffset.1+0x88>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80006bc:	4a0b      	ldr	r2, [pc, #44]	; (80006ec <getDCOffset.1+0x8c>)
 80006be:	6013      	str	r3, [r2, #0]
	 	  samples = 0;
 80006c0:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <getDCOffset.1+0x88>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
	 	  V1_sum = 0;
 80006c6:	4b07      	ldr	r3, [pc, #28]	; (80006e4 <getDCOffset.1+0x84>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
  }
 80006cc:	bf00      	nop
 80006ce:	4618      	mov	r0, r3
 80006d0:	3708      	adds	r7, #8
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20000540 	.word	0x20000540
 80006dc:	200002a0 	.word	0x200002a0
 80006e0:	20000520 	.word	0x20000520
 80006e4:	2000052c 	.word	0x2000052c
 80006e8:	2000053c 	.word	0x2000053c
 80006ec:	20000528 	.word	0x20000528

080006f0 <getRMSValue.2>:
  int getRMSValue(void){
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	f8c7 c004 	str.w	ip, [r7, #4]
	  while(samples<(1000)){
 80006fa:	e03d      	b.n	8000778 <getRMSValue.2+0x88>
		  if(flag == 1){ 							//flag =1 -> TIM3 interrupt
 80006fc:	4b3b      	ldr	r3, [pc, #236]	; (80007ec <getRMSValue.2+0xfc>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	2b01      	cmp	r3, #1
 8000702:	d139      	bne.n	8000778 <getRMSValue.2+0x88>
		  	V2 = HAL_ADC_GetValue(&hadc2)-V1_avg;	//ADC2 Read
 8000704:	483a      	ldr	r0, [pc, #232]	; (80007f0 <getRMSValue.2+0x100>)
 8000706:	f001 fe27 	bl	8002358 <HAL_ADC_GetValue>
 800070a:	4602      	mov	r2, r0
 800070c:	4b39      	ldr	r3, [pc, #228]	; (80007f4 <getRMSValue.2+0x104>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	1ad3      	subs	r3, r2, r3
 8000712:	461a      	mov	r2, r3
 8000714:	4b38      	ldr	r3, [pc, #224]	; (80007f8 <getRMSValue.2+0x108>)
 8000716:	601a      	str	r2, [r3, #0]
		  	V1 = HAL_ADC_GetValue(&hadc1)-V1_avg;	//ADC1 Read
 8000718:	4838      	ldr	r0, [pc, #224]	; (80007fc <getRMSValue.2+0x10c>)
 800071a:	f001 fe1d 	bl	8002358 <HAL_ADC_GetValue>
 800071e:	4602      	mov	r2, r0
 8000720:	4b34      	ldr	r3, [pc, #208]	; (80007f4 <getRMSValue.2+0x104>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	1ad3      	subs	r3, r2, r3
 8000726:	461a      	mov	r2, r3
 8000728:	4b35      	ldr	r3, [pc, #212]	; (8000800 <getRMSValue.2+0x110>)
 800072a:	601a      	str	r2, [r3, #0]
		  	V1_sum = V1_sum+V1*V1; 					//summing squares
 800072c:	4b34      	ldr	r3, [pc, #208]	; (8000800 <getRMSValue.2+0x110>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a33      	ldr	r2, [pc, #204]	; (8000800 <getRMSValue.2+0x110>)
 8000732:	6812      	ldr	r2, [r2, #0]
 8000734:	fb02 f303 	mul.w	r3, r2, r3
 8000738:	461a      	mov	r2, r3
 800073a:	4b32      	ldr	r3, [pc, #200]	; (8000804 <getRMSValue.2+0x114>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4413      	add	r3, r2
 8000740:	4a30      	ldr	r2, [pc, #192]	; (8000804 <getRMSValue.2+0x114>)
 8000742:	6013      	str	r3, [r2, #0]
		  	V2_sum = V2_sum+V2*V2;
 8000744:	4b2c      	ldr	r3, [pc, #176]	; (80007f8 <getRMSValue.2+0x108>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a2b      	ldr	r2, [pc, #172]	; (80007f8 <getRMSValue.2+0x108>)
 800074a:	6812      	ldr	r2, [r2, #0]
 800074c:	fb02 f303 	mul.w	r3, r2, r3
 8000750:	461a      	mov	r2, r3
 8000752:	4b2d      	ldr	r3, [pc, #180]	; (8000808 <getRMSValue.2+0x118>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	4413      	add	r3, r2
 8000758:	4a2b      	ldr	r2, [pc, #172]	; (8000808 <getRMSValue.2+0x118>)
 800075a:	6013      	str	r3, [r2, #0]
		  	samples = samples+1;
 800075c:	4b2b      	ldr	r3, [pc, #172]	; (800080c <getRMSValue.2+0x11c>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	3301      	adds	r3, #1
 8000762:	4a2a      	ldr	r2, [pc, #168]	; (800080c <getRMSValue.2+0x11c>)
 8000764:	6013      	str	r3, [r2, #0]
		  	HAL_ADC_Start(&hadc2);					//starting another adc conversion
 8000766:	4822      	ldr	r0, [pc, #136]	; (80007f0 <getRMSValue.2+0x100>)
 8000768:	f001 fd3a 	bl	80021e0 <HAL_ADC_Start>
		  	HAL_ADC_Start(&hadc1);
 800076c:	4823      	ldr	r0, [pc, #140]	; (80007fc <getRMSValue.2+0x10c>)
 800076e:	f001 fd37 	bl	80021e0 <HAL_ADC_Start>
		  	flag =0;								//reseting flag
 8000772:	4b1e      	ldr	r3, [pc, #120]	; (80007ec <getRMSValue.2+0xfc>)
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
	  while(samples<(1000)){
 8000778:	4b24      	ldr	r3, [pc, #144]	; (800080c <getRMSValue.2+0x11c>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000780:	d3bc      	bcc.n	80006fc <getRMSValue.2+0xc>
		  V1_rms = sqrtf(V1_sum/samples);			//calculating rms values
 8000782:	4b20      	ldr	r3, [pc, #128]	; (8000804 <getRMSValue.2+0x114>)
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	4b21      	ldr	r3, [pc, #132]	; (800080c <getRMSValue.2+0x11c>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	fbb2 f3f3 	udiv	r3, r2, r3
 800078e:	ee07 3a90 	vmov	s15, r3
 8000792:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000796:	eeb0 0a67 	vmov.f32	s0, s15
 800079a:	f006 fb81 	bl	8006ea0 <sqrtf>
 800079e:	eef0 7a40 	vmov.f32	s15, s0
 80007a2:	4b1b      	ldr	r3, [pc, #108]	; (8000810 <getRMSValue.2+0x120>)
 80007a4:	edc3 7a00 	vstr	s15, [r3]
		  V2_rms = sqrtf(V2_sum/samples);
 80007a8:	4b17      	ldr	r3, [pc, #92]	; (8000808 <getRMSValue.2+0x118>)
 80007aa:	681a      	ldr	r2, [r3, #0]
 80007ac:	4b17      	ldr	r3, [pc, #92]	; (800080c <getRMSValue.2+0x11c>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80007b4:	ee07 3a90 	vmov	s15, r3
 80007b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80007bc:	eeb0 0a67 	vmov.f32	s0, s15
 80007c0:	f006 fb6e 	bl	8006ea0 <sqrtf>
 80007c4:	eef0 7a40 	vmov.f32	s15, s0
 80007c8:	4b12      	ldr	r3, [pc, #72]	; (8000814 <getRMSValue.2+0x124>)
 80007ca:	edc3 7a00 	vstr	s15, [r3]
		  V1_sum = 0;
 80007ce:	4b0d      	ldr	r3, [pc, #52]	; (8000804 <getRMSValue.2+0x114>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
		  V2_sum = 0;
 80007d4:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <getRMSValue.2+0x118>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
		  samples = 0;
 80007da:	4b0c      	ldr	r3, [pc, #48]	; (800080c <getRMSValue.2+0x11c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
  }
 80007e0:	bf00      	nop
 80007e2:	4618      	mov	r0, r3
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	20000540 	.word	0x20000540
 80007f0:	2000030c 	.word	0x2000030c
 80007f4:	20000528 	.word	0x20000528
 80007f8:	20000524 	.word	0x20000524
 80007fc:	200002a0 	.word	0x200002a0
 8000800:	20000520 	.word	0x20000520
 8000804:	2000052c 	.word	0x2000052c
 8000808:	20000530 	.word	0x20000530
 800080c:	2000053c 	.word	0x2000053c
 8000810:	20000534 	.word	0x20000534
 8000814:	20000538 	.word	0x20000538

08000818 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b094      	sub	sp, #80	; 0x50
 800081c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800081e:	f107 0318 	add.w	r3, r7, #24
 8000822:	2238      	movs	r2, #56	; 0x38
 8000824:	2100      	movs	r1, #0
 8000826:	4618      	mov	r0, r3
 8000828:	f005 fec4 	bl	80065b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800082c:	1d3b      	adds	r3, r7, #4
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	605a      	str	r2, [r3, #4]
 8000834:	609a      	str	r2, [r3, #8]
 8000836:	60da      	str	r2, [r3, #12]
 8000838:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800083a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800083e:	f004 f939 	bl	8004ab4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000842:	2301      	movs	r3, #1
 8000844:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000846:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800084a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800084c:	2300      	movs	r3, #0
 800084e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000850:	f107 0318 	add.w	r3, r7, #24
 8000854:	4618      	mov	r0, r3
 8000856:	f004 f9d1 	bl	8004bfc <HAL_RCC_OscConfig>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <SystemClock_Config+0x4c>
  {
    Error_Handler();
 8000860:	f000 faf6 	bl	8000e50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000864:	230f      	movs	r3, #15
 8000866:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000868:	2302      	movs	r3, #2
 800086a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800086c:	2300      	movs	r3, #0
 800086e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000870:	2300      	movs	r3, #0
 8000872:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000874:	2300      	movs	r3, #0
 8000876:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000878:	1d3b      	adds	r3, r7, #4
 800087a:	2101      	movs	r1, #1
 800087c:	4618      	mov	r0, r3
 800087e:	f004 fcd5 	bl	800522c <HAL_RCC_ClockConfig>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000888:	f000 fae2 	bl	8000e50 <Error_Handler>
  }
}
 800088c:	bf00      	nop
 800088e:	3750      	adds	r7, #80	; 0x50
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}

08000894 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b08c      	sub	sp, #48	; 0x30
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800089a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	605a      	str	r2, [r3, #4]
 80008a4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80008a6:	1d3b      	adds	r3, r7, #4
 80008a8:	2220      	movs	r2, #32
 80008aa:	2100      	movs	r1, #0
 80008ac:	4618      	mov	r0, r3
 80008ae:	f005 fe81 	bl	80065b4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80008b2:	4b32      	ldr	r3, [pc, #200]	; (800097c <MX_ADC1_Init+0xe8>)
 80008b4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80008b8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008ba:	4b30      	ldr	r3, [pc, #192]	; (800097c <MX_ADC1_Init+0xe8>)
 80008bc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80008c0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008c2:	4b2e      	ldr	r3, [pc, #184]	; (800097c <MX_ADC1_Init+0xe8>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008c8:	4b2c      	ldr	r3, [pc, #176]	; (800097c <MX_ADC1_Init+0xe8>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80008ce:	4b2b      	ldr	r3, [pc, #172]	; (800097c <MX_ADC1_Init+0xe8>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008d4:	4b29      	ldr	r3, [pc, #164]	; (800097c <MX_ADC1_Init+0xe8>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008da:	4b28      	ldr	r3, [pc, #160]	; (800097c <MX_ADC1_Init+0xe8>)
 80008dc:	2204      	movs	r2, #4
 80008de:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80008e0:	4b26      	ldr	r3, [pc, #152]	; (800097c <MX_ADC1_Init+0xe8>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008e6:	4b25      	ldr	r3, [pc, #148]	; (800097c <MX_ADC1_Init+0xe8>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80008ec:	4b23      	ldr	r3, [pc, #140]	; (800097c <MX_ADC1_Init+0xe8>)
 80008ee:	2201      	movs	r2, #1
 80008f0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008f2:	4b22      	ldr	r3, [pc, #136]	; (800097c <MX_ADC1_Init+0xe8>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008fa:	4b20      	ldr	r3, [pc, #128]	; (800097c <MX_ADC1_Init+0xe8>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000900:	4b1e      	ldr	r3, [pc, #120]	; (800097c <MX_ADC1_Init+0xe8>)
 8000902:	2200      	movs	r2, #0
 8000904:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000906:	4b1d      	ldr	r3, [pc, #116]	; (800097c <MX_ADC1_Init+0xe8>)
 8000908:	2200      	movs	r2, #0
 800090a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800090e:	4b1b      	ldr	r3, [pc, #108]	; (800097c <MX_ADC1_Init+0xe8>)
 8000910:	2200      	movs	r2, #0
 8000912:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000914:	4b19      	ldr	r3, [pc, #100]	; (800097c <MX_ADC1_Init+0xe8>)
 8000916:	2200      	movs	r2, #0
 8000918:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800091c:	4817      	ldr	r0, [pc, #92]	; (800097c <MX_ADC1_Init+0xe8>)
 800091e:	f001 fad5 	bl	8001ecc <HAL_ADC_Init>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000928:	f000 fa92 	bl	8000e50 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800092c:	2300      	movs	r3, #0
 800092e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000930:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000934:	4619      	mov	r1, r3
 8000936:	4811      	ldr	r0, [pc, #68]	; (800097c <MX_ADC1_Init+0xe8>)
 8000938:	f002 fa82 	bl	8002e40 <HAL_ADCEx_MultiModeConfigChannel>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000942:	f000 fa85 	bl	8000e50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000946:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <MX_ADC1_Init+0xec>)
 8000948:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800094a:	2306      	movs	r3, #6
 800094c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 800094e:	2301      	movs	r3, #1
 8000950:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000952:	237f      	movs	r3, #127	; 0x7f
 8000954:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000956:	2304      	movs	r3, #4
 8000958:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800095a:	2300      	movs	r3, #0
 800095c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	4619      	mov	r1, r3
 8000962:	4806      	ldr	r0, [pc, #24]	; (800097c <MX_ADC1_Init+0xe8>)
 8000964:	f001 fd06 	bl	8002374 <HAL_ADC_ConfigChannel>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800096e:	f000 fa6f 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000972:	bf00      	nop
 8000974:	3730      	adds	r7, #48	; 0x30
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	200002a0 	.word	0x200002a0
 8000980:	04300002 	.word	0x04300002

08000984 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b088      	sub	sp, #32
 8000988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800098a:	463b      	mov	r3, r7
 800098c:	2220      	movs	r2, #32
 800098e:	2100      	movs	r1, #0
 8000990:	4618      	mov	r0, r3
 8000992:	f005 fe0f 	bl	80065b4 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000996:	4b2b      	ldr	r3, [pc, #172]	; (8000a44 <MX_ADC2_Init+0xc0>)
 8000998:	4a2b      	ldr	r2, [pc, #172]	; (8000a48 <MX_ADC2_Init+0xc4>)
 800099a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800099c:	4b29      	ldr	r3, [pc, #164]	; (8000a44 <MX_ADC2_Init+0xc0>)
 800099e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80009a2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80009a4:	4b27      	ldr	r3, [pc, #156]	; (8000a44 <MX_ADC2_Init+0xc0>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009aa:	4b26      	ldr	r3, [pc, #152]	; (8000a44 <MX_ADC2_Init+0xc0>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80009b0:	4b24      	ldr	r3, [pc, #144]	; (8000a44 <MX_ADC2_Init+0xc0>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009b6:	4b23      	ldr	r3, [pc, #140]	; (8000a44 <MX_ADC2_Init+0xc0>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009bc:	4b21      	ldr	r3, [pc, #132]	; (8000a44 <MX_ADC2_Init+0xc0>)
 80009be:	2204      	movs	r2, #4
 80009c0:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80009c2:	4b20      	ldr	r3, [pc, #128]	; (8000a44 <MX_ADC2_Init+0xc0>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80009c8:	4b1e      	ldr	r3, [pc, #120]	; (8000a44 <MX_ADC2_Init+0xc0>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80009ce:	4b1d      	ldr	r3, [pc, #116]	; (8000a44 <MX_ADC2_Init+0xc0>)
 80009d0:	2201      	movs	r2, #1
 80009d2:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80009d4:	4b1b      	ldr	r3, [pc, #108]	; (8000a44 <MX_ADC2_Init+0xc0>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009dc:	4b19      	ldr	r3, [pc, #100]	; (8000a44 <MX_ADC2_Init+0xc0>)
 80009de:	2200      	movs	r2, #0
 80009e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009e2:	4b18      	ldr	r3, [pc, #96]	; (8000a44 <MX_ADC2_Init+0xc0>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80009e8:	4b16      	ldr	r3, [pc, #88]	; (8000a44 <MX_ADC2_Init+0xc0>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009f0:	4b14      	ldr	r3, [pc, #80]	; (8000a44 <MX_ADC2_Init+0xc0>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80009f6:	4b13      	ldr	r3, [pc, #76]	; (8000a44 <MX_ADC2_Init+0xc0>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80009fe:	4811      	ldr	r0, [pc, #68]	; (8000a44 <MX_ADC2_Init+0xc0>)
 8000a00:	f001 fa64 	bl	8001ecc <HAL_ADC_Init>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000a0a:	f000 fa21 	bl	8000e50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000a0e:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <MX_ADC2_Init+0xc8>)
 8000a10:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a12:	2306      	movs	r3, #6
 8000a14:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8000a16:	2301      	movs	r3, #1
 8000a18:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a1a:	237f      	movs	r3, #127	; 0x7f
 8000a1c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a1e:	2304      	movs	r3, #4
 8000a20:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000a22:	2300      	movs	r3, #0
 8000a24:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000a26:	463b      	mov	r3, r7
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4806      	ldr	r0, [pc, #24]	; (8000a44 <MX_ADC2_Init+0xc0>)
 8000a2c:	f001 fca2 	bl	8002374 <HAL_ADC_ConfigChannel>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000a36:	f000 fa0b 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000a3a:	bf00      	nop
 8000a3c:	3720      	adds	r7, #32
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	2000030c 	.word	0x2000030c
 8000a48:	50000100 	.word	0x50000100
 8000a4c:	08600004 	.word	0x08600004

08000a50 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08c      	sub	sp, #48	; 0x30
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000a56:	463b      	mov	r3, r7
 8000a58:	2230      	movs	r2, #48	; 0x30
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f005 fda9 	bl	80065b4 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000a62:	4b16      	ldr	r3, [pc, #88]	; (8000abc <MX_DAC1_Init+0x6c>)
 8000a64:	4a16      	ldr	r2, [pc, #88]	; (8000ac0 <MX_DAC1_Init+0x70>)
 8000a66:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000a68:	4814      	ldr	r0, [pc, #80]	; (8000abc <MX_DAC1_Init+0x6c>)
 8000a6a:	f002 fb9c 	bl	80031a6 <HAL_DAC_Init>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000a74:	f000 f9ec 	bl	8000e50 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000a80:	2300      	movs	r3, #0
 8000a82:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000a84:	2300      	movs	r3, #0
 8000a86:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000a88:	2312      	movs	r3, #18
 8000a8a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000a90:	2300      	movs	r3, #0
 8000a92:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000a94:	2301      	movs	r3, #1
 8000a96:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000a9c:	463b      	mov	r3, r7
 8000a9e:	2210      	movs	r2, #16
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4806      	ldr	r0, [pc, #24]	; (8000abc <MX_DAC1_Init+0x6c>)
 8000aa4:	f002 fc8e 	bl	80033c4 <HAL_DAC_ConfigChannel>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8000aae:	f000 f9cf 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000ab2:	bf00      	nop
 8000ab4:	3730      	adds	r7, #48	; 0x30
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	20000378 	.word	0x20000378
 8000ac0:	50000800 	.word	0x50000800

08000ac4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ac8:	4b1b      	ldr	r3, [pc, #108]	; (8000b38 <MX_I2C1_Init+0x74>)
 8000aca:	4a1c      	ldr	r2, [pc, #112]	; (8000b3c <MX_I2C1_Init+0x78>)
 8000acc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2010091A;
 8000ace:	4b1a      	ldr	r3, [pc, #104]	; (8000b38 <MX_I2C1_Init+0x74>)
 8000ad0:	4a1b      	ldr	r2, [pc, #108]	; (8000b40 <MX_I2C1_Init+0x7c>)
 8000ad2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ad4:	4b18      	ldr	r3, [pc, #96]	; (8000b38 <MX_I2C1_Init+0x74>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ada:	4b17      	ldr	r3, [pc, #92]	; (8000b38 <MX_I2C1_Init+0x74>)
 8000adc:	2201      	movs	r2, #1
 8000ade:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ae0:	4b15      	ldr	r3, [pc, #84]	; (8000b38 <MX_I2C1_Init+0x74>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ae6:	4b14      	ldr	r3, [pc, #80]	; (8000b38 <MX_I2C1_Init+0x74>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000aec:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <MX_I2C1_Init+0x74>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000af2:	4b11      	ldr	r3, [pc, #68]	; (8000b38 <MX_I2C1_Init+0x74>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000af8:	4b0f      	ldr	r3, [pc, #60]	; (8000b38 <MX_I2C1_Init+0x74>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000afe:	480e      	ldr	r0, [pc, #56]	; (8000b38 <MX_I2C1_Init+0x74>)
 8000b00:	f003 fab6 	bl	8004070 <HAL_I2C_Init>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b0a:	f000 f9a1 	bl	8000e50 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b0e:	2100      	movs	r1, #0
 8000b10:	4809      	ldr	r0, [pc, #36]	; (8000b38 <MX_I2C1_Init+0x74>)
 8000b12:	f003 ff37 	bl	8004984 <HAL_I2CEx_ConfigAnalogFilter>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b1c:	f000 f998 	bl	8000e50 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b20:	2100      	movs	r1, #0
 8000b22:	4805      	ldr	r0, [pc, #20]	; (8000b38 <MX_I2C1_Init+0x74>)
 8000b24:	f003 ff79 	bl	8004a1a <HAL_I2CEx_ConfigDigitalFilter>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b2e:	f000 f98f 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	200003ec 	.word	0x200003ec
 8000b3c:	40005400 	.word	0x40005400
 8000b40:	2010091a 	.word	0x2010091a

08000b44 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b088      	sub	sp, #32
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b4a:	f107 0310 	add.w	r3, r7, #16
 8000b4e:	2200      	movs	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]
 8000b52:	605a      	str	r2, [r3, #4]
 8000b54:	609a      	str	r2, [r3, #8]
 8000b56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b58:	1d3b      	adds	r3, r7, #4
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	605a      	str	r2, [r3, #4]
 8000b60:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b62:	4b1d      	ldr	r3, [pc, #116]	; (8000bd8 <MX_TIM2_Init+0x94>)
 8000b64:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b68:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4;
 8000b6a:	4b1b      	ldr	r3, [pc, #108]	; (8000bd8 <MX_TIM2_Init+0x94>)
 8000b6c:	2204      	movs	r2, #4
 8000b6e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b70:	4b19      	ldr	r3, [pc, #100]	; (8000bd8 <MX_TIM2_Init+0x94>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 24;
 8000b76:	4b18      	ldr	r3, [pc, #96]	; (8000bd8 <MX_TIM2_Init+0x94>)
 8000b78:	2218      	movs	r2, #24
 8000b7a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b7c:	4b16      	ldr	r3, [pc, #88]	; (8000bd8 <MX_TIM2_Init+0x94>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b82:	4b15      	ldr	r3, [pc, #84]	; (8000bd8 <MX_TIM2_Init+0x94>)
 8000b84:	2280      	movs	r2, #128	; 0x80
 8000b86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b88:	4813      	ldr	r0, [pc, #76]	; (8000bd8 <MX_TIM2_Init+0x94>)
 8000b8a:	f004 ff2f 	bl	80059ec <HAL_TIM_Base_Init>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000b94:	f000 f95c 	bl	8000e50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b9c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b9e:	f107 0310 	add.w	r3, r7, #16
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	480c      	ldr	r0, [pc, #48]	; (8000bd8 <MX_TIM2_Init+0x94>)
 8000ba6:	f005 f9c5 	bl	8005f34 <HAL_TIM_ConfigClockSource>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000bb0:	f000 f94e 	bl	8000e50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000bb4:	2320      	movs	r3, #32
 8000bb6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4805      	ldr	r0, [pc, #20]	; (8000bd8 <MX_TIM2_Init+0x94>)
 8000bc2:	f005 fc05 	bl	80063d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000bcc:	f000 f940 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000bd0:	bf00      	nop
 8000bd2:	3720      	adds	r7, #32
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	20000438 	.word	0x20000438

08000bdc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b088      	sub	sp, #32
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000be2:	f107 0310 	add.w	r3, r7, #16
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	605a      	str	r2, [r3, #4]
 8000bec:	609a      	str	r2, [r3, #8]
 8000bee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bf0:	1d3b      	adds	r3, r7, #4
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	605a      	str	r2, [r3, #4]
 8000bf8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000bfa:	4b1d      	ldr	r3, [pc, #116]	; (8000c70 <MX_TIM3_Init+0x94>)
 8000bfc:	4a1d      	ldr	r2, [pc, #116]	; (8000c74 <MX_TIM3_Init+0x98>)
 8000bfe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000c00:	4b1b      	ldr	r3, [pc, #108]	; (8000c70 <MX_TIM3_Init+0x94>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c06:	4b1a      	ldr	r3, [pc, #104]	; (8000c70 <MX_TIM3_Init+0x94>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 479;
 8000c0c:	4b18      	ldr	r3, [pc, #96]	; (8000c70 <MX_TIM3_Init+0x94>)
 8000c0e:	f240 12df 	movw	r2, #479	; 0x1df
 8000c12:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c14:	4b16      	ldr	r3, [pc, #88]	; (8000c70 <MX_TIM3_Init+0x94>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c1a:	4b15      	ldr	r3, [pc, #84]	; (8000c70 <MX_TIM3_Init+0x94>)
 8000c1c:	2280      	movs	r2, #128	; 0x80
 8000c1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c20:	4813      	ldr	r0, [pc, #76]	; (8000c70 <MX_TIM3_Init+0x94>)
 8000c22:	f004 fee3 	bl	80059ec <HAL_TIM_Base_Init>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000c2c:	f000 f910 	bl	8000e50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c34:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c36:	f107 0310 	add.w	r3, r7, #16
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	480c      	ldr	r0, [pc, #48]	; (8000c70 <MX_TIM3_Init+0x94>)
 8000c3e:	f005 f979 	bl	8005f34 <HAL_TIM_ConfigClockSource>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000c48:	f000 f902 	bl	8000e50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000c4c:	2320      	movs	r3, #32
 8000c4e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c50:	2300      	movs	r3, #0
 8000c52:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c54:	1d3b      	adds	r3, r7, #4
 8000c56:	4619      	mov	r1, r3
 8000c58:	4805      	ldr	r0, [pc, #20]	; (8000c70 <MX_TIM3_Init+0x94>)
 8000c5a:	f005 fbb9 	bl	80063d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000c64:	f000 f8f4 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c68:	bf00      	nop
 8000c6a:	3720      	adds	r7, #32
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	20000484 	.word	0x20000484
 8000c74:	40000400 	.word	0x40000400

08000c78 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b088      	sub	sp, #32
 8000c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c7e:	f107 0310 	add.w	r3, r7, #16
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	605a      	str	r2, [r3, #4]
 8000c88:	609a      	str	r2, [r3, #8]
 8000c8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c8c:	1d3b      	adds	r3, r7, #4
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	605a      	str	r2, [r3, #4]
 8000c94:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c96:	4b1d      	ldr	r3, [pc, #116]	; (8000d0c <MX_TIM4_Init+0x94>)
 8000c98:	4a1d      	ldr	r2, [pc, #116]	; (8000d10 <MX_TIM4_Init+0x98>)
 8000c9a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000c9c:	4b1b      	ldr	r3, [pc, #108]	; (8000d0c <MX_TIM4_Init+0x94>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca2:	4b1a      	ldr	r3, [pc, #104]	; (8000d0c <MX_TIM4_Init+0x94>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000ca8:	4b18      	ldr	r3, [pc, #96]	; (8000d0c <MX_TIM4_Init+0x94>)
 8000caa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cae:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cb0:	4b16      	ldr	r3, [pc, #88]	; (8000d0c <MX_TIM4_Init+0x94>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cb6:	4b15      	ldr	r3, [pc, #84]	; (8000d0c <MX_TIM4_Init+0x94>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000cbc:	4813      	ldr	r0, [pc, #76]	; (8000d0c <MX_TIM4_Init+0x94>)
 8000cbe:	f004 fe95 	bl	80059ec <HAL_TIM_Base_Init>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000cc8:	f000 f8c2 	bl	8000e50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ccc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cd0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000cd2:	f107 0310 	add.w	r3, r7, #16
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	480c      	ldr	r0, [pc, #48]	; (8000d0c <MX_TIM4_Init+0x94>)
 8000cda:	f005 f92b 	bl	8005f34 <HAL_TIM_ConfigClockSource>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000ce4:	f000 f8b4 	bl	8000e50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cec:	2300      	movs	r3, #0
 8000cee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000cf0:	1d3b      	adds	r3, r7, #4
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4805      	ldr	r0, [pc, #20]	; (8000d0c <MX_TIM4_Init+0x94>)
 8000cf6:	f005 fb6b 	bl	80063d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000d00:	f000 f8a6 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000d04:	bf00      	nop
 8000d06:	3720      	adds	r7, #32
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	200004d0 	.word	0x200004d0
 8000d10:	40000800 	.word	0x40000800

08000d14 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000d1a:	4b12      	ldr	r3, [pc, #72]	; (8000d64 <MX_DMA_Init+0x50>)
 8000d1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d1e:	4a11      	ldr	r2, [pc, #68]	; (8000d64 <MX_DMA_Init+0x50>)
 8000d20:	f043 0304 	orr.w	r3, r3, #4
 8000d24:	6493      	str	r3, [r2, #72]	; 0x48
 8000d26:	4b0f      	ldr	r3, [pc, #60]	; (8000d64 <MX_DMA_Init+0x50>)
 8000d28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d2a:	f003 0304 	and.w	r3, r3, #4
 8000d2e:	607b      	str	r3, [r7, #4]
 8000d30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d32:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <MX_DMA_Init+0x50>)
 8000d34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d36:	4a0b      	ldr	r2, [pc, #44]	; (8000d64 <MX_DMA_Init+0x50>)
 8000d38:	f043 0301 	orr.w	r3, r3, #1
 8000d3c:	6493      	str	r3, [r2, #72]	; 0x48
 8000d3e:	4b09      	ldr	r3, [pc, #36]	; (8000d64 <MX_DMA_Init+0x50>)
 8000d40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d42:	f003 0301 	and.w	r3, r3, #1
 8000d46:	603b      	str	r3, [r7, #0]
 8000d48:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	200c      	movs	r0, #12
 8000d50:	f002 f9f5 	bl	800313e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000d54:	200c      	movs	r0, #12
 8000d56:	f002 fa0c 	bl	8003172 <HAL_NVIC_EnableIRQ>

}
 8000d5a:	bf00      	nop
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40021000 	.word	0x40021000

08000d68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b088      	sub	sp, #32
 8000d6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6e:	f107 030c 	add.w	r3, r7, #12
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	605a      	str	r2, [r3, #4]
 8000d78:	609a      	str	r2, [r3, #8]
 8000d7a:	60da      	str	r2, [r3, #12]
 8000d7c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d7e:	4b2a      	ldr	r3, [pc, #168]	; (8000e28 <MX_GPIO_Init+0xc0>)
 8000d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d82:	4a29      	ldr	r2, [pc, #164]	; (8000e28 <MX_GPIO_Init+0xc0>)
 8000d84:	f043 0320 	orr.w	r3, r3, #32
 8000d88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d8a:	4b27      	ldr	r3, [pc, #156]	; (8000e28 <MX_GPIO_Init+0xc0>)
 8000d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d8e:	f003 0320 	and.w	r3, r3, #32
 8000d92:	60bb      	str	r3, [r7, #8]
 8000d94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d96:	4b24      	ldr	r3, [pc, #144]	; (8000e28 <MX_GPIO_Init+0xc0>)
 8000d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9a:	4a23      	ldr	r2, [pc, #140]	; (8000e28 <MX_GPIO_Init+0xc0>)
 8000d9c:	f043 0301 	orr.w	r3, r3, #1
 8000da0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000da2:	4b21      	ldr	r3, [pc, #132]	; (8000e28 <MX_GPIO_Init+0xc0>)
 8000da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da6:	f003 0301 	and.w	r3, r3, #1
 8000daa:	607b      	str	r3, [r7, #4]
 8000dac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dae:	4b1e      	ldr	r3, [pc, #120]	; (8000e28 <MX_GPIO_Init+0xc0>)
 8000db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db2:	4a1d      	ldr	r2, [pc, #116]	; (8000e28 <MX_GPIO_Init+0xc0>)
 8000db4:	f043 0302 	orr.w	r3, r3, #2
 8000db8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dba:	4b1b      	ldr	r3, [pc, #108]	; (8000e28 <MX_GPIO_Init+0xc0>)
 8000dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dbe:	f003 0302 	and.w	r3, r3, #2
 8000dc2:	603b      	str	r3, [r7, #0]
 8000dc4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	2170      	movs	r1, #112	; 0x70
 8000dca:	4818      	ldr	r0, [pc, #96]	; (8000e2c <MX_GPIO_Init+0xc4>)
 8000dcc:	f003 f938 	bl	8004040 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA6 PA7 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11|GPIO_PIN_12;
 8000dd0:	f44f 53c6 	mov.w	r3, #6336	; 0x18c0
 8000dd4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dde:	f107 030c 	add.w	r3, r7, #12
 8000de2:	4619      	mov	r1, r3
 8000de4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000de8:	f002 ff90 	bl	8003d0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000dec:	2309      	movs	r3, #9
 8000dee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000df0:	2300      	movs	r3, #0
 8000df2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000df4:	2302      	movs	r3, #2
 8000df6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df8:	f107 030c 	add.w	r3, r7, #12
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	480b      	ldr	r0, [pc, #44]	; (8000e2c <MX_GPIO_Init+0xc4>)
 8000e00:	f002 ff84 	bl	8003d0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000e04:	2370      	movs	r3, #112	; 0x70
 8000e06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e10:	2300      	movs	r3, #0
 8000e12:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e14:	f107 030c 	add.w	r3, r7, #12
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4804      	ldr	r0, [pc, #16]	; (8000e2c <MX_GPIO_Init+0xc4>)
 8000e1c:	f002 ff76 	bl	8003d0c <HAL_GPIO_Init>

}
 8000e20:	bf00      	nop
 8000e22:	3720      	adds	r7, #32
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	40021000 	.word	0x40021000
 8000e2c:	48000400 	.word	0x48000400

08000e30 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
	flag =1;
 8000e38:	4b04      	ldr	r3, [pc, #16]	; (8000e4c <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	601a      	str	r2, [r3, #0]

}
 8000e3e:	bf00      	nop
 8000e40:	370c      	adds	r7, #12
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	20000540 	.word	0x20000540

08000e50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e54:	b672      	cpsid	i
}
 8000e56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e58:	e7fe      	b.n	8000e58 <Error_Handler+0x8>
	...

08000e5c <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000e62:	f000 fa29 	bl	80012b8 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000e66:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	2178      	movs	r1, #120	; 0x78
 8000e6e:	485b      	ldr	r0, [pc, #364]	; (8000fdc <SSD1306_Init+0x180>)
 8000e70:	f003 fa82 	bl	8004378 <HAL_I2C_IsDeviceReady>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	e0a9      	b.n	8000fd2 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8000e7e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000e82:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000e84:	e002      	b.n	8000e8c <SSD1306_Init+0x30>
		p--;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	3b01      	subs	r3, #1
 8000e8a:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d1f9      	bne.n	8000e86 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000e92:	22ae      	movs	r2, #174	; 0xae
 8000e94:	2100      	movs	r1, #0
 8000e96:	2078      	movs	r0, #120	; 0x78
 8000e98:	f000 fa8a 	bl	80013b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000e9c:	2220      	movs	r2, #32
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	2078      	movs	r0, #120	; 0x78
 8000ea2:	f000 fa85 	bl	80013b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000ea6:	2210      	movs	r2, #16
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	2078      	movs	r0, #120	; 0x78
 8000eac:	f000 fa80 	bl	80013b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000eb0:	22b0      	movs	r2, #176	; 0xb0
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	2078      	movs	r0, #120	; 0x78
 8000eb6:	f000 fa7b 	bl	80013b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000eba:	22c8      	movs	r2, #200	; 0xc8
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	2078      	movs	r0, #120	; 0x78
 8000ec0:	f000 fa76 	bl	80013b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	2078      	movs	r0, #120	; 0x78
 8000eca:	f000 fa71 	bl	80013b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000ece:	2210      	movs	r2, #16
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	2078      	movs	r0, #120	; 0x78
 8000ed4:	f000 fa6c 	bl	80013b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000ed8:	2240      	movs	r2, #64	; 0x40
 8000eda:	2100      	movs	r1, #0
 8000edc:	2078      	movs	r0, #120	; 0x78
 8000ede:	f000 fa67 	bl	80013b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000ee2:	2281      	movs	r2, #129	; 0x81
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	2078      	movs	r0, #120	; 0x78
 8000ee8:	f000 fa62 	bl	80013b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000eec:	22ff      	movs	r2, #255	; 0xff
 8000eee:	2100      	movs	r1, #0
 8000ef0:	2078      	movs	r0, #120	; 0x78
 8000ef2:	f000 fa5d 	bl	80013b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000ef6:	22a1      	movs	r2, #161	; 0xa1
 8000ef8:	2100      	movs	r1, #0
 8000efa:	2078      	movs	r0, #120	; 0x78
 8000efc:	f000 fa58 	bl	80013b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000f00:	22a6      	movs	r2, #166	; 0xa6
 8000f02:	2100      	movs	r1, #0
 8000f04:	2078      	movs	r0, #120	; 0x78
 8000f06:	f000 fa53 	bl	80013b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000f0a:	22a8      	movs	r2, #168	; 0xa8
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	2078      	movs	r0, #120	; 0x78
 8000f10:	f000 fa4e 	bl	80013b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000f14:	223f      	movs	r2, #63	; 0x3f
 8000f16:	2100      	movs	r1, #0
 8000f18:	2078      	movs	r0, #120	; 0x78
 8000f1a:	f000 fa49 	bl	80013b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000f1e:	22a4      	movs	r2, #164	; 0xa4
 8000f20:	2100      	movs	r1, #0
 8000f22:	2078      	movs	r0, #120	; 0x78
 8000f24:	f000 fa44 	bl	80013b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000f28:	22d3      	movs	r2, #211	; 0xd3
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	2078      	movs	r0, #120	; 0x78
 8000f2e:	f000 fa3f 	bl	80013b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000f32:	2200      	movs	r2, #0
 8000f34:	2100      	movs	r1, #0
 8000f36:	2078      	movs	r0, #120	; 0x78
 8000f38:	f000 fa3a 	bl	80013b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000f3c:	22d5      	movs	r2, #213	; 0xd5
 8000f3e:	2100      	movs	r1, #0
 8000f40:	2078      	movs	r0, #120	; 0x78
 8000f42:	f000 fa35 	bl	80013b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000f46:	22f0      	movs	r2, #240	; 0xf0
 8000f48:	2100      	movs	r1, #0
 8000f4a:	2078      	movs	r0, #120	; 0x78
 8000f4c:	f000 fa30 	bl	80013b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000f50:	22d9      	movs	r2, #217	; 0xd9
 8000f52:	2100      	movs	r1, #0
 8000f54:	2078      	movs	r0, #120	; 0x78
 8000f56:	f000 fa2b 	bl	80013b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000f5a:	2222      	movs	r2, #34	; 0x22
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	2078      	movs	r0, #120	; 0x78
 8000f60:	f000 fa26 	bl	80013b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000f64:	22da      	movs	r2, #218	; 0xda
 8000f66:	2100      	movs	r1, #0
 8000f68:	2078      	movs	r0, #120	; 0x78
 8000f6a:	f000 fa21 	bl	80013b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000f6e:	2212      	movs	r2, #18
 8000f70:	2100      	movs	r1, #0
 8000f72:	2078      	movs	r0, #120	; 0x78
 8000f74:	f000 fa1c 	bl	80013b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000f78:	22db      	movs	r2, #219	; 0xdb
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	2078      	movs	r0, #120	; 0x78
 8000f7e:	f000 fa17 	bl	80013b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000f82:	2220      	movs	r2, #32
 8000f84:	2100      	movs	r1, #0
 8000f86:	2078      	movs	r0, #120	; 0x78
 8000f88:	f000 fa12 	bl	80013b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000f8c:	228d      	movs	r2, #141	; 0x8d
 8000f8e:	2100      	movs	r1, #0
 8000f90:	2078      	movs	r0, #120	; 0x78
 8000f92:	f000 fa0d 	bl	80013b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000f96:	2214      	movs	r2, #20
 8000f98:	2100      	movs	r1, #0
 8000f9a:	2078      	movs	r0, #120	; 0x78
 8000f9c:	f000 fa08 	bl	80013b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000fa0:	22af      	movs	r2, #175	; 0xaf
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	2078      	movs	r0, #120	; 0x78
 8000fa6:	f000 fa03 	bl	80013b0 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000faa:	222e      	movs	r2, #46	; 0x2e
 8000fac:	2100      	movs	r1, #0
 8000fae:	2078      	movs	r0, #120	; 0x78
 8000fb0:	f000 f9fe 	bl	80013b0 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000fb4:	2000      	movs	r0, #0
 8000fb6:	f000 f843 	bl	8001040 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8000fba:	f000 f813 	bl	8000fe4 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000fbe:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <SSD1306_Init+0x184>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000fc4:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <SSD1306_Init+0x184>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000fca:	4b05      	ldr	r3, [pc, #20]	; (8000fe0 <SSD1306_Init+0x184>)
 8000fcc:	2201      	movs	r2, #1
 8000fce:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000fd0:	2301      	movs	r3, #1
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	200003ec 	.word	0x200003ec
 8000fe0:	20000944 	.word	0x20000944

08000fe4 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8000fea:	2300      	movs	r3, #0
 8000fec:	71fb      	strb	r3, [r7, #7]
 8000fee:	e01d      	b.n	800102c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000ff0:	79fb      	ldrb	r3, [r7, #7]
 8000ff2:	3b50      	subs	r3, #80	; 0x50
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	2078      	movs	r0, #120	; 0x78
 8000ffc:	f000 f9d8 	bl	80013b0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001000:	2200      	movs	r2, #0
 8001002:	2100      	movs	r1, #0
 8001004:	2078      	movs	r0, #120	; 0x78
 8001006:	f000 f9d3 	bl	80013b0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800100a:	2210      	movs	r2, #16
 800100c:	2100      	movs	r1, #0
 800100e:	2078      	movs	r0, #120	; 0x78
 8001010:	f000 f9ce 	bl	80013b0 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	01db      	lsls	r3, r3, #7
 8001018:	4a08      	ldr	r2, [pc, #32]	; (800103c <SSD1306_UpdateScreen+0x58>)
 800101a:	441a      	add	r2, r3
 800101c:	2380      	movs	r3, #128	; 0x80
 800101e:	2140      	movs	r1, #64	; 0x40
 8001020:	2078      	movs	r0, #120	; 0x78
 8001022:	f000 f95f 	bl	80012e4 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001026:	79fb      	ldrb	r3, [r7, #7]
 8001028:	3301      	adds	r3, #1
 800102a:	71fb      	strb	r3, [r7, #7]
 800102c:	79fb      	ldrb	r3, [r7, #7]
 800102e:	2b07      	cmp	r3, #7
 8001030:	d9de      	bls.n	8000ff0 <SSD1306_UpdateScreen+0xc>
	}
}
 8001032:	bf00      	nop
 8001034:	bf00      	nop
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20000544 	.word	0x20000544

08001040 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d101      	bne.n	8001054 <SSD1306_Fill+0x14>
 8001050:	2300      	movs	r3, #0
 8001052:	e000      	b.n	8001056 <SSD1306_Fill+0x16>
 8001054:	23ff      	movs	r3, #255	; 0xff
 8001056:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800105a:	4619      	mov	r1, r3
 800105c:	4803      	ldr	r0, [pc, #12]	; (800106c <SSD1306_Fill+0x2c>)
 800105e:	f005 faa9 	bl	80065b4 <memset>
}
 8001062:	bf00      	nop
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	20000544 	.word	0x20000544

08001070 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	80fb      	strh	r3, [r7, #6]
 800107a:	460b      	mov	r3, r1
 800107c:	80bb      	strh	r3, [r7, #4]
 800107e:	4613      	mov	r3, r2
 8001080:	70fb      	strb	r3, [r7, #3]
	if (
 8001082:	88fb      	ldrh	r3, [r7, #6]
 8001084:	2b7f      	cmp	r3, #127	; 0x7f
 8001086:	d848      	bhi.n	800111a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001088:	88bb      	ldrh	r3, [r7, #4]
 800108a:	2b3f      	cmp	r3, #63	; 0x3f
 800108c:	d845      	bhi.n	800111a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800108e:	4b26      	ldr	r3, [pc, #152]	; (8001128 <SSD1306_DrawPixel+0xb8>)
 8001090:	791b      	ldrb	r3, [r3, #4]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d006      	beq.n	80010a4 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001096:	78fb      	ldrb	r3, [r7, #3]
 8001098:	2b00      	cmp	r3, #0
 800109a:	bf0c      	ite	eq
 800109c:	2301      	moveq	r3, #1
 800109e:	2300      	movne	r3, #0
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80010a4:	78fb      	ldrb	r3, [r7, #3]
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d11a      	bne.n	80010e0 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80010aa:	88fa      	ldrh	r2, [r7, #6]
 80010ac:	88bb      	ldrh	r3, [r7, #4]
 80010ae:	08db      	lsrs	r3, r3, #3
 80010b0:	b298      	uxth	r0, r3
 80010b2:	4603      	mov	r3, r0
 80010b4:	01db      	lsls	r3, r3, #7
 80010b6:	4413      	add	r3, r2
 80010b8:	4a1c      	ldr	r2, [pc, #112]	; (800112c <SSD1306_DrawPixel+0xbc>)
 80010ba:	5cd3      	ldrb	r3, [r2, r3]
 80010bc:	b25a      	sxtb	r2, r3
 80010be:	88bb      	ldrh	r3, [r7, #4]
 80010c0:	f003 0307 	and.w	r3, r3, #7
 80010c4:	2101      	movs	r1, #1
 80010c6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ca:	b25b      	sxtb	r3, r3
 80010cc:	4313      	orrs	r3, r2
 80010ce:	b259      	sxtb	r1, r3
 80010d0:	88fa      	ldrh	r2, [r7, #6]
 80010d2:	4603      	mov	r3, r0
 80010d4:	01db      	lsls	r3, r3, #7
 80010d6:	4413      	add	r3, r2
 80010d8:	b2c9      	uxtb	r1, r1
 80010da:	4a14      	ldr	r2, [pc, #80]	; (800112c <SSD1306_DrawPixel+0xbc>)
 80010dc:	54d1      	strb	r1, [r2, r3]
 80010de:	e01d      	b.n	800111c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80010e0:	88fa      	ldrh	r2, [r7, #6]
 80010e2:	88bb      	ldrh	r3, [r7, #4]
 80010e4:	08db      	lsrs	r3, r3, #3
 80010e6:	b298      	uxth	r0, r3
 80010e8:	4603      	mov	r3, r0
 80010ea:	01db      	lsls	r3, r3, #7
 80010ec:	4413      	add	r3, r2
 80010ee:	4a0f      	ldr	r2, [pc, #60]	; (800112c <SSD1306_DrawPixel+0xbc>)
 80010f0:	5cd3      	ldrb	r3, [r2, r3]
 80010f2:	b25a      	sxtb	r2, r3
 80010f4:	88bb      	ldrh	r3, [r7, #4]
 80010f6:	f003 0307 	and.w	r3, r3, #7
 80010fa:	2101      	movs	r1, #1
 80010fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001100:	b25b      	sxtb	r3, r3
 8001102:	43db      	mvns	r3, r3
 8001104:	b25b      	sxtb	r3, r3
 8001106:	4013      	ands	r3, r2
 8001108:	b259      	sxtb	r1, r3
 800110a:	88fa      	ldrh	r2, [r7, #6]
 800110c:	4603      	mov	r3, r0
 800110e:	01db      	lsls	r3, r3, #7
 8001110:	4413      	add	r3, r2
 8001112:	b2c9      	uxtb	r1, r1
 8001114:	4a05      	ldr	r2, [pc, #20]	; (800112c <SSD1306_DrawPixel+0xbc>)
 8001116:	54d1      	strb	r1, [r2, r3]
 8001118:	e000      	b.n	800111c <SSD1306_DrawPixel+0xac>
		return;
 800111a:	bf00      	nop
	}
}
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	20000944 	.word	0x20000944
 800112c:	20000544 	.word	0x20000544

08001130 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	460a      	mov	r2, r1
 800113a:	80fb      	strh	r3, [r7, #6]
 800113c:	4613      	mov	r3, r2
 800113e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001140:	4a05      	ldr	r2, [pc, #20]	; (8001158 <SSD1306_GotoXY+0x28>)
 8001142:	88fb      	ldrh	r3, [r7, #6]
 8001144:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001146:	4a04      	ldr	r2, [pc, #16]	; (8001158 <SSD1306_GotoXY+0x28>)
 8001148:	88bb      	ldrh	r3, [r7, #4]
 800114a:	8053      	strh	r3, [r2, #2]
}
 800114c:	bf00      	nop
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	20000944 	.word	0x20000944

0800115c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	6039      	str	r1, [r7, #0]
 8001166:	71fb      	strb	r3, [r7, #7]
 8001168:	4613      	mov	r3, r2
 800116a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800116c:	4b3a      	ldr	r3, [pc, #232]	; (8001258 <SSD1306_Putc+0xfc>)
 800116e:	881b      	ldrh	r3, [r3, #0]
 8001170:	461a      	mov	r2, r3
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	4413      	add	r3, r2
	if (
 8001178:	2b7f      	cmp	r3, #127	; 0x7f
 800117a:	dc07      	bgt.n	800118c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 800117c:	4b36      	ldr	r3, [pc, #216]	; (8001258 <SSD1306_Putc+0xfc>)
 800117e:	885b      	ldrh	r3, [r3, #2]
 8001180:	461a      	mov	r2, r3
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	785b      	ldrb	r3, [r3, #1]
 8001186:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001188:	2b3f      	cmp	r3, #63	; 0x3f
 800118a:	dd01      	ble.n	8001190 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 800118c:	2300      	movs	r3, #0
 800118e:	e05e      	b.n	800124e <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]
 8001194:	e04b      	b.n	800122e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685a      	ldr	r2, [r3, #4]
 800119a:	79fb      	ldrb	r3, [r7, #7]
 800119c:	3b20      	subs	r3, #32
 800119e:	6839      	ldr	r1, [r7, #0]
 80011a0:	7849      	ldrb	r1, [r1, #1]
 80011a2:	fb01 f303 	mul.w	r3, r1, r3
 80011a6:	4619      	mov	r1, r3
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	440b      	add	r3, r1
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	4413      	add	r3, r2
 80011b0:	881b      	ldrh	r3, [r3, #0]
 80011b2:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80011b4:	2300      	movs	r3, #0
 80011b6:	613b      	str	r3, [r7, #16]
 80011b8:	e030      	b.n	800121c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80011ba:	68fa      	ldr	r2, [r7, #12]
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d010      	beq.n	80011ec <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80011ca:	4b23      	ldr	r3, [pc, #140]	; (8001258 <SSD1306_Putc+0xfc>)
 80011cc:	881a      	ldrh	r2, [r3, #0]
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	b29b      	uxth	r3, r3
 80011d2:	4413      	add	r3, r2
 80011d4:	b298      	uxth	r0, r3
 80011d6:	4b20      	ldr	r3, [pc, #128]	; (8001258 <SSD1306_Putc+0xfc>)
 80011d8:	885a      	ldrh	r2, [r3, #2]
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	b29b      	uxth	r3, r3
 80011de:	4413      	add	r3, r2
 80011e0:	b29b      	uxth	r3, r3
 80011e2:	79ba      	ldrb	r2, [r7, #6]
 80011e4:	4619      	mov	r1, r3
 80011e6:	f7ff ff43 	bl	8001070 <SSD1306_DrawPixel>
 80011ea:	e014      	b.n	8001216 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80011ec:	4b1a      	ldr	r3, [pc, #104]	; (8001258 <SSD1306_Putc+0xfc>)
 80011ee:	881a      	ldrh	r2, [r3, #0]
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	4413      	add	r3, r2
 80011f6:	b298      	uxth	r0, r3
 80011f8:	4b17      	ldr	r3, [pc, #92]	; (8001258 <SSD1306_Putc+0xfc>)
 80011fa:	885a      	ldrh	r2, [r3, #2]
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	b29b      	uxth	r3, r3
 8001200:	4413      	add	r3, r2
 8001202:	b299      	uxth	r1, r3
 8001204:	79bb      	ldrb	r3, [r7, #6]
 8001206:	2b00      	cmp	r3, #0
 8001208:	bf0c      	ite	eq
 800120a:	2301      	moveq	r3, #1
 800120c:	2300      	movne	r3, #0
 800120e:	b2db      	uxtb	r3, r3
 8001210:	461a      	mov	r2, r3
 8001212:	f7ff ff2d 	bl	8001070 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	3301      	adds	r3, #1
 800121a:	613b      	str	r3, [r7, #16]
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	461a      	mov	r2, r3
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	4293      	cmp	r3, r2
 8001226:	d3c8      	bcc.n	80011ba <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	3301      	adds	r3, #1
 800122c:	617b      	str	r3, [r7, #20]
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	785b      	ldrb	r3, [r3, #1]
 8001232:	461a      	mov	r2, r3
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	4293      	cmp	r3, r2
 8001238:	d3ad      	bcc.n	8001196 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800123a:	4b07      	ldr	r3, [pc, #28]	; (8001258 <SSD1306_Putc+0xfc>)
 800123c:	881a      	ldrh	r2, [r3, #0]
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	b29b      	uxth	r3, r3
 8001244:	4413      	add	r3, r2
 8001246:	b29a      	uxth	r2, r3
 8001248:	4b03      	ldr	r3, [pc, #12]	; (8001258 <SSD1306_Putc+0xfc>)
 800124a:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 800124c:	79fb      	ldrb	r3, [r7, #7]
}
 800124e:	4618      	mov	r0, r3
 8001250:	3718      	adds	r7, #24
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20000944 	.word	0x20000944

0800125c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	60b9      	str	r1, [r7, #8]
 8001266:	4613      	mov	r3, r2
 8001268:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800126a:	e012      	b.n	8001292 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	79fa      	ldrb	r2, [r7, #7]
 8001272:	68b9      	ldr	r1, [r7, #8]
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff ff71 	bl	800115c <SSD1306_Putc>
 800127a:	4603      	mov	r3, r0
 800127c:	461a      	mov	r2, r3
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	429a      	cmp	r2, r3
 8001284:	d002      	beq.n	800128c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	e008      	b.n	800129e <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	3301      	adds	r3, #1
 8001290:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d1e8      	bne.n	800126c <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	781b      	ldrb	r3, [r3, #0]
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3710      	adds	r7, #16
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80012aa:	2000      	movs	r0, #0
 80012ac:	f7ff fec8 	bl	8001040 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80012b0:	f7ff fe98 	bl	8000fe4 <SSD1306_UpdateScreen>
}
 80012b4:	bf00      	nop
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80012be:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <ssd1306_I2C_Init+0x28>)
 80012c0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80012c2:	e002      	b.n	80012ca <ssd1306_I2C_Init+0x12>
		p--;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	3b01      	subs	r3, #1
 80012c8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d1f9      	bne.n	80012c4 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80012d0:	bf00      	nop
 80012d2:	bf00      	nop
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	0003d090 	.word	0x0003d090

080012e4 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80012e4:	b590      	push	{r4, r7, lr}
 80012e6:	b0c7      	sub	sp, #284	; 0x11c
 80012e8:	af02      	add	r7, sp, #8
 80012ea:	4604      	mov	r4, r0
 80012ec:	4608      	mov	r0, r1
 80012ee:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80012f2:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 80012f6:	600a      	str	r2, [r1, #0]
 80012f8:	4619      	mov	r1, r3
 80012fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80012fe:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001302:	4622      	mov	r2, r4
 8001304:	701a      	strb	r2, [r3, #0]
 8001306:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800130a:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 800130e:	4602      	mov	r2, r0
 8001310:	701a      	strb	r2, [r3, #0]
 8001312:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001316:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800131a:	460a      	mov	r2, r1
 800131c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800131e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001322:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001326:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800132a:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 800132e:	7812      	ldrb	r2, [r2, #0]
 8001330:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001332:	2300      	movs	r3, #0
 8001334:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001338:	e015      	b.n	8001366 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800133a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800133e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001342:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001346:	6812      	ldr	r2, [r2, #0]
 8001348:	441a      	add	r2, r3
 800134a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800134e:	3301      	adds	r3, #1
 8001350:	7811      	ldrb	r1, [r2, #0]
 8001352:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001356:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800135a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 800135c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001360:	3301      	adds	r3, #1
 8001362:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001366:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800136a:	b29b      	uxth	r3, r3
 800136c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001370:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001374:	8812      	ldrh	r2, [r2, #0]
 8001376:	429a      	cmp	r2, r3
 8001378:	d8df      	bhi.n	800133a <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 800137a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800137e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	b299      	uxth	r1, r3
 8001386:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800138a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800138e:	881b      	ldrh	r3, [r3, #0]
 8001390:	3301      	adds	r3, #1
 8001392:	b29b      	uxth	r3, r3
 8001394:	f107 020c 	add.w	r2, r7, #12
 8001398:	200a      	movs	r0, #10
 800139a:	9000      	str	r0, [sp, #0]
 800139c:	4803      	ldr	r0, [pc, #12]	; (80013ac <ssd1306_I2C_WriteMulti+0xc8>)
 800139e:	f002 fef7 	bl	8004190 <HAL_I2C_Master_Transmit>
}
 80013a2:	bf00      	nop
 80013a4:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd90      	pop	{r4, r7, pc}
 80013ac:	200003ec 	.word	0x200003ec

080013b0 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af02      	add	r7, sp, #8
 80013b6:	4603      	mov	r3, r0
 80013b8:	71fb      	strb	r3, [r7, #7]
 80013ba:	460b      	mov	r3, r1
 80013bc:	71bb      	strb	r3, [r7, #6]
 80013be:	4613      	mov	r3, r2
 80013c0:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80013c2:	79bb      	ldrb	r3, [r7, #6]
 80013c4:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80013c6:	797b      	ldrb	r3, [r7, #5]
 80013c8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80013ca:	79fb      	ldrb	r3, [r7, #7]
 80013cc:	b299      	uxth	r1, r3
 80013ce:	f107 020c 	add.w	r2, r7, #12
 80013d2:	230a      	movs	r3, #10
 80013d4:	9300      	str	r3, [sp, #0]
 80013d6:	2302      	movs	r3, #2
 80013d8:	4803      	ldr	r0, [pc, #12]	; (80013e8 <ssd1306_I2C_Write+0x38>)
 80013da:	f002 fed9 	bl	8004190 <HAL_I2C_Master_Transmit>
}
 80013de:	bf00      	nop
 80013e0:	3710      	adds	r7, #16
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	200003ec 	.word	0x200003ec

080013ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f2:	4b0f      	ldr	r3, [pc, #60]	; (8001430 <HAL_MspInit+0x44>)
 80013f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013f6:	4a0e      	ldr	r2, [pc, #56]	; (8001430 <HAL_MspInit+0x44>)
 80013f8:	f043 0301 	orr.w	r3, r3, #1
 80013fc:	6613      	str	r3, [r2, #96]	; 0x60
 80013fe:	4b0c      	ldr	r3, [pc, #48]	; (8001430 <HAL_MspInit+0x44>)
 8001400:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	607b      	str	r3, [r7, #4]
 8001408:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800140a:	4b09      	ldr	r3, [pc, #36]	; (8001430 <HAL_MspInit+0x44>)
 800140c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800140e:	4a08      	ldr	r2, [pc, #32]	; (8001430 <HAL_MspInit+0x44>)
 8001410:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001414:	6593      	str	r3, [r2, #88]	; 0x58
 8001416:	4b06      	ldr	r3, [pc, #24]	; (8001430 <HAL_MspInit+0x44>)
 8001418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800141a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800141e:	603b      	str	r3, [r7, #0]
 8001420:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001422:	bf00      	nop
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	40021000 	.word	0x40021000

08001434 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b09c      	sub	sp, #112	; 0x70
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]
 800144a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800144c:	f107 0318 	add.w	r3, r7, #24
 8001450:	2244      	movs	r2, #68	; 0x44
 8001452:	2100      	movs	r1, #0
 8001454:	4618      	mov	r0, r3
 8001456:	f005 f8ad 	bl	80065b4 <memset>
  if(hadc->Instance==ADC1)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001462:	d13e      	bne.n	80014e2 <HAL_ADC_MspInit+0xae>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001464:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001468:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800146a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800146e:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001470:	f107 0318 	add.w	r3, r7, #24
 8001474:	4618      	mov	r0, r3
 8001476:	f004 f8c9 	bl	800560c <HAL_RCCEx_PeriphCLKConfig>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001480:	f7ff fce6 	bl	8000e50 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001484:	4b3a      	ldr	r3, [pc, #232]	; (8001570 <HAL_ADC_MspInit+0x13c>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	3301      	adds	r3, #1
 800148a:	4a39      	ldr	r2, [pc, #228]	; (8001570 <HAL_ADC_MspInit+0x13c>)
 800148c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800148e:	4b38      	ldr	r3, [pc, #224]	; (8001570 <HAL_ADC_MspInit+0x13c>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	2b01      	cmp	r3, #1
 8001494:	d10b      	bne.n	80014ae <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001496:	4b37      	ldr	r3, [pc, #220]	; (8001574 <HAL_ADC_MspInit+0x140>)
 8001498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149a:	4a36      	ldr	r2, [pc, #216]	; (8001574 <HAL_ADC_MspInit+0x140>)
 800149c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80014a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014a2:	4b34      	ldr	r3, [pc, #208]	; (8001574 <HAL_ADC_MspInit+0x140>)
 80014a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014aa:	617b      	str	r3, [r7, #20]
 80014ac:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ae:	4b31      	ldr	r3, [pc, #196]	; (8001574 <HAL_ADC_MspInit+0x140>)
 80014b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b2:	4a30      	ldr	r2, [pc, #192]	; (8001574 <HAL_ADC_MspInit+0x140>)
 80014b4:	f043 0301 	orr.w	r3, r3, #1
 80014b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ba:	4b2e      	ldr	r3, [pc, #184]	; (8001574 <HAL_ADC_MspInit+0x140>)
 80014bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	613b      	str	r3, [r7, #16]
 80014c4:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014c6:	2301      	movs	r3, #1
 80014c8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014ca:	2303      	movs	r3, #3
 80014cc:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ce:	2300      	movs	r3, #0
 80014d0:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80014d6:	4619      	mov	r1, r3
 80014d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014dc:	f002 fc16 	bl	8003d0c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80014e0:	e042      	b.n	8001568 <HAL_ADC_MspInit+0x134>
  else if(hadc->Instance==ADC2)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a24      	ldr	r2, [pc, #144]	; (8001578 <HAL_ADC_MspInit+0x144>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d13d      	bne.n	8001568 <HAL_ADC_MspInit+0x134>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80014ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014f0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80014f2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80014f6:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014f8:	f107 0318 	add.w	r3, r7, #24
 80014fc:	4618      	mov	r0, r3
 80014fe:	f004 f885 	bl	800560c <HAL_RCCEx_PeriphCLKConfig>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <HAL_ADC_MspInit+0xd8>
      Error_Handler();
 8001508:	f7ff fca2 	bl	8000e50 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800150c:	4b18      	ldr	r3, [pc, #96]	; (8001570 <HAL_ADC_MspInit+0x13c>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	3301      	adds	r3, #1
 8001512:	4a17      	ldr	r2, [pc, #92]	; (8001570 <HAL_ADC_MspInit+0x13c>)
 8001514:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001516:	4b16      	ldr	r3, [pc, #88]	; (8001570 <HAL_ADC_MspInit+0x13c>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d10b      	bne.n	8001536 <HAL_ADC_MspInit+0x102>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800151e:	4b15      	ldr	r3, [pc, #84]	; (8001574 <HAL_ADC_MspInit+0x140>)
 8001520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001522:	4a14      	ldr	r2, [pc, #80]	; (8001574 <HAL_ADC_MspInit+0x140>)
 8001524:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001528:	64d3      	str	r3, [r2, #76]	; 0x4c
 800152a:	4b12      	ldr	r3, [pc, #72]	; (8001574 <HAL_ADC_MspInit+0x140>)
 800152c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001536:	4b0f      	ldr	r3, [pc, #60]	; (8001574 <HAL_ADC_MspInit+0x140>)
 8001538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800153a:	4a0e      	ldr	r2, [pc, #56]	; (8001574 <HAL_ADC_MspInit+0x140>)
 800153c:	f043 0301 	orr.w	r3, r3, #1
 8001540:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001542:	4b0c      	ldr	r3, [pc, #48]	; (8001574 <HAL_ADC_MspInit+0x140>)
 8001544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	60bb      	str	r3, [r7, #8]
 800154c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800154e:	2302      	movs	r3, #2
 8001550:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001552:	2303      	movs	r3, #3
 8001554:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001556:	2300      	movs	r3, #0
 8001558:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800155a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800155e:	4619      	mov	r1, r3
 8001560:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001564:	f002 fbd2 	bl	8003d0c <HAL_GPIO_Init>
}
 8001568:	bf00      	nop
 800156a:	3770      	adds	r7, #112	; 0x70
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	2000094c 	.word	0x2000094c
 8001574:	40021000 	.word	0x40021000
 8001578:	50000100 	.word	0x50000100

0800157c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b08a      	sub	sp, #40	; 0x28
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001584:	f107 0314 	add.w	r3, r7, #20
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	609a      	str	r2, [r3, #8]
 8001590:	60da      	str	r2, [r3, #12]
 8001592:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a2b      	ldr	r2, [pc, #172]	; (8001648 <HAL_DAC_MspInit+0xcc>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d150      	bne.n	8001640 <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800159e:	4b2b      	ldr	r3, [pc, #172]	; (800164c <HAL_DAC_MspInit+0xd0>)
 80015a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a2:	4a2a      	ldr	r2, [pc, #168]	; (800164c <HAL_DAC_MspInit+0xd0>)
 80015a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015aa:	4b28      	ldr	r3, [pc, #160]	; (800164c <HAL_DAC_MspInit+0xd0>)
 80015ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015b2:	613b      	str	r3, [r7, #16]
 80015b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b6:	4b25      	ldr	r3, [pc, #148]	; (800164c <HAL_DAC_MspInit+0xd0>)
 80015b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ba:	4a24      	ldr	r2, [pc, #144]	; (800164c <HAL_DAC_MspInit+0xd0>)
 80015bc:	f043 0301 	orr.w	r3, r3, #1
 80015c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015c2:	4b22      	ldr	r3, [pc, #136]	; (800164c <HAL_DAC_MspInit+0xd0>)
 80015c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	60fb      	str	r3, [r7, #12]
 80015cc:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80015ce:	2320      	movs	r3, #32
 80015d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015d2:	2303      	movs	r3, #3
 80015d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015da:	f107 0314 	add.w	r3, r7, #20
 80015de:	4619      	mov	r1, r3
 80015e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015e4:	f002 fb92 	bl	8003d0c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH2 Init */
    hdma_dac1_ch2.Instance = DMA1_Channel2;
 80015e8:	4b19      	ldr	r3, [pc, #100]	; (8001650 <HAL_DAC_MspInit+0xd4>)
 80015ea:	4a1a      	ldr	r2, [pc, #104]	; (8001654 <HAL_DAC_MspInit+0xd8>)
 80015ec:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch2.Init.Request = DMA_REQUEST_DAC1_CHANNEL2;
 80015ee:	4b18      	ldr	r3, [pc, #96]	; (8001650 <HAL_DAC_MspInit+0xd4>)
 80015f0:	2207      	movs	r2, #7
 80015f2:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015f4:	4b16      	ldr	r3, [pc, #88]	; (8001650 <HAL_DAC_MspInit+0xd4>)
 80015f6:	2210      	movs	r2, #16
 80015f8:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80015fa:	4b15      	ldr	r3, [pc, #84]	; (8001650 <HAL_DAC_MspInit+0xd4>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001600:	4b13      	ldr	r3, [pc, #76]	; (8001650 <HAL_DAC_MspInit+0xd4>)
 8001602:	2280      	movs	r2, #128	; 0x80
 8001604:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001606:	4b12      	ldr	r3, [pc, #72]	; (8001650 <HAL_DAC_MspInit+0xd4>)
 8001608:	f44f 7200 	mov.w	r2, #512	; 0x200
 800160c:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800160e:	4b10      	ldr	r3, [pc, #64]	; (8001650 <HAL_DAC_MspInit+0xd4>)
 8001610:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001614:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 8001616:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <HAL_DAC_MspInit+0xd4>)
 8001618:	2220      	movs	r2, #32
 800161a:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 800161c:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <HAL_DAC_MspInit+0xd4>)
 800161e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001622:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 8001624:	480a      	ldr	r0, [pc, #40]	; (8001650 <HAL_DAC_MspInit+0xd4>)
 8001626:	f002 f8ff 	bl	8003828 <HAL_DMA_Init>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <HAL_DAC_MspInit+0xb8>
    {
      Error_Handler();
 8001630:	f7ff fc0e 	bl	8000e50 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac1_ch2);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	4a06      	ldr	r2, [pc, #24]	; (8001650 <HAL_DAC_MspInit+0xd4>)
 8001638:	60da      	str	r2, [r3, #12]
 800163a:	4a05      	ldr	r2, [pc, #20]	; (8001650 <HAL_DAC_MspInit+0xd4>)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001640:	bf00      	nop
 8001642:	3728      	adds	r7, #40	; 0x28
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	50000800 	.word	0x50000800
 800164c:	40021000 	.word	0x40021000
 8001650:	2000038c 	.word	0x2000038c
 8001654:	4002001c 	.word	0x4002001c

08001658 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b09c      	sub	sp, #112	; 0x70
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001660:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	605a      	str	r2, [r3, #4]
 800166a:	609a      	str	r2, [r3, #8]
 800166c:	60da      	str	r2, [r3, #12]
 800166e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001670:	f107 0318 	add.w	r3, r7, #24
 8001674:	2244      	movs	r2, #68	; 0x44
 8001676:	2100      	movs	r1, #0
 8001678:	4618      	mov	r0, r3
 800167a:	f004 ff9b 	bl	80065b4 <memset>
  if(hi2c->Instance==I2C1)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a2d      	ldr	r2, [pc, #180]	; (8001738 <HAL_I2C_MspInit+0xe0>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d153      	bne.n	8001730 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001688:	2340      	movs	r3, #64	; 0x40
 800168a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800168c:	2300      	movs	r3, #0
 800168e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001690:	f107 0318 	add.w	r3, r7, #24
 8001694:	4618      	mov	r0, r3
 8001696:	f003 ffb9 	bl	800560c <HAL_RCCEx_PeriphCLKConfig>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80016a0:	f7ff fbd6 	bl	8000e50 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a4:	4b25      	ldr	r3, [pc, #148]	; (800173c <HAL_I2C_MspInit+0xe4>)
 80016a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a8:	4a24      	ldr	r2, [pc, #144]	; (800173c <HAL_I2C_MspInit+0xe4>)
 80016aa:	f043 0301 	orr.w	r3, r3, #1
 80016ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016b0:	4b22      	ldr	r3, [pc, #136]	; (800173c <HAL_I2C_MspInit+0xe4>)
 80016b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b4:	f003 0301 	and.w	r3, r3, #1
 80016b8:	617b      	str	r3, [r7, #20]
 80016ba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016bc:	4b1f      	ldr	r3, [pc, #124]	; (800173c <HAL_I2C_MspInit+0xe4>)
 80016be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c0:	4a1e      	ldr	r2, [pc, #120]	; (800173c <HAL_I2C_MspInit+0xe4>)
 80016c2:	f043 0302 	orr.w	r3, r3, #2
 80016c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016c8:	4b1c      	ldr	r3, [pc, #112]	; (800173c <HAL_I2C_MspInit+0xe4>)
 80016ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016cc:	f003 0302 	and.w	r3, r3, #2
 80016d0:	613b      	str	r3, [r7, #16]
 80016d2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80016d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80016d8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016da:	2312      	movs	r3, #18
 80016dc:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	2300      	movs	r3, #0
 80016e0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e2:	2300      	movs	r3, #0
 80016e4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016e6:	2304      	movs	r3, #4
 80016e8:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ea:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80016ee:	4619      	mov	r1, r3
 80016f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016f4:	f002 fb0a 	bl	8003d0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80016f8:	2380      	movs	r3, #128	; 0x80
 80016fa:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016fc:	2312      	movs	r3, #18
 80016fe:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	2300      	movs	r3, #0
 8001702:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001704:	2300      	movs	r3, #0
 8001706:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001708:	2304      	movs	r3, #4
 800170a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800170c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001710:	4619      	mov	r1, r3
 8001712:	480b      	ldr	r0, [pc, #44]	; (8001740 <HAL_I2C_MspInit+0xe8>)
 8001714:	f002 fafa 	bl	8003d0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001718:	4b08      	ldr	r3, [pc, #32]	; (800173c <HAL_I2C_MspInit+0xe4>)
 800171a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800171c:	4a07      	ldr	r2, [pc, #28]	; (800173c <HAL_I2C_MspInit+0xe4>)
 800171e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001722:	6593      	str	r3, [r2, #88]	; 0x58
 8001724:	4b05      	ldr	r3, [pc, #20]	; (800173c <HAL_I2C_MspInit+0xe4>)
 8001726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001728:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800172c:	60fb      	str	r3, [r7, #12]
 800172e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001730:	bf00      	nop
 8001732:	3770      	adds	r7, #112	; 0x70
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	40005400 	.word	0x40005400
 800173c:	40021000 	.word	0x40021000
 8001740:	48000400 	.word	0x48000400

08001744 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b086      	sub	sp, #24
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001754:	d10c      	bne.n	8001770 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001756:	4b1e      	ldr	r3, [pc, #120]	; (80017d0 <HAL_TIM_Base_MspInit+0x8c>)
 8001758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800175a:	4a1d      	ldr	r2, [pc, #116]	; (80017d0 <HAL_TIM_Base_MspInit+0x8c>)
 800175c:	f043 0301 	orr.w	r3, r3, #1
 8001760:	6593      	str	r3, [r2, #88]	; 0x58
 8001762:	4b1b      	ldr	r3, [pc, #108]	; (80017d0 <HAL_TIM_Base_MspInit+0x8c>)
 8001764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	617b      	str	r3, [r7, #20]
 800176c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800176e:	e02a      	b.n	80017c6 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM3)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a17      	ldr	r2, [pc, #92]	; (80017d4 <HAL_TIM_Base_MspInit+0x90>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d114      	bne.n	80017a4 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800177a:	4b15      	ldr	r3, [pc, #84]	; (80017d0 <HAL_TIM_Base_MspInit+0x8c>)
 800177c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800177e:	4a14      	ldr	r2, [pc, #80]	; (80017d0 <HAL_TIM_Base_MspInit+0x8c>)
 8001780:	f043 0302 	orr.w	r3, r3, #2
 8001784:	6593      	str	r3, [r2, #88]	; 0x58
 8001786:	4b12      	ldr	r3, [pc, #72]	; (80017d0 <HAL_TIM_Base_MspInit+0x8c>)
 8001788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	613b      	str	r3, [r7, #16]
 8001790:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001792:	2200      	movs	r2, #0
 8001794:	2100      	movs	r1, #0
 8001796:	201d      	movs	r0, #29
 8001798:	f001 fcd1 	bl	800313e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800179c:	201d      	movs	r0, #29
 800179e:	f001 fce8 	bl	8003172 <HAL_NVIC_EnableIRQ>
}
 80017a2:	e010      	b.n	80017c6 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM4)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a0b      	ldr	r2, [pc, #44]	; (80017d8 <HAL_TIM_Base_MspInit+0x94>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d10b      	bne.n	80017c6 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80017ae:	4b08      	ldr	r3, [pc, #32]	; (80017d0 <HAL_TIM_Base_MspInit+0x8c>)
 80017b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017b2:	4a07      	ldr	r2, [pc, #28]	; (80017d0 <HAL_TIM_Base_MspInit+0x8c>)
 80017b4:	f043 0304 	orr.w	r3, r3, #4
 80017b8:	6593      	str	r3, [r2, #88]	; 0x58
 80017ba:	4b05      	ldr	r3, [pc, #20]	; (80017d0 <HAL_TIM_Base_MspInit+0x8c>)
 80017bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017be:	f003 0304 	and.w	r3, r3, #4
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	68fb      	ldr	r3, [r7, #12]
}
 80017c6:	bf00      	nop
 80017c8:	3718      	adds	r7, #24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40021000 	.word	0x40021000
 80017d4:	40000400 	.word	0x40000400
 80017d8:	40000800 	.word	0x40000800

080017dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017e0:	e7fe      	b.n	80017e0 <NMI_Handler+0x4>

080017e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017e2:	b480      	push	{r7}
 80017e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017e6:	e7fe      	b.n	80017e6 <HardFault_Handler+0x4>

080017e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017ec:	e7fe      	b.n	80017ec <MemManage_Handler+0x4>

080017ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ee:	b480      	push	{r7}
 80017f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017f2:	e7fe      	b.n	80017f2 <BusFault_Handler+0x4>

080017f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017f8:	e7fe      	b.n	80017f8 <UsageFault_Handler+0x4>

080017fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017fa:	b480      	push	{r7}
 80017fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017fe:	bf00      	nop
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800180c:	bf00      	nop
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr

08001816 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001816:	b480      	push	{r7}
 8001818:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001828:	f000 f8da 	bl	80019e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800182c:	bf00      	nop
 800182e:	bd80      	pop	{r7, pc}

08001830 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch2);
 8001834:	4802      	ldr	r0, [pc, #8]	; (8001840 <DMA1_Channel2_IRQHandler+0x10>)
 8001836:	f002 f91a 	bl	8003a6e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	2000038c 	.word	0x2000038c

08001844 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001848:	4802      	ldr	r0, [pc, #8]	; (8001854 <TIM3_IRQHandler+0x10>)
 800184a:	f004 f9f3 	bl	8005c34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	20000484 	.word	0x20000484

08001858 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b086      	sub	sp, #24
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001860:	4a14      	ldr	r2, [pc, #80]	; (80018b4 <_sbrk+0x5c>)
 8001862:	4b15      	ldr	r3, [pc, #84]	; (80018b8 <_sbrk+0x60>)
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800186c:	4b13      	ldr	r3, [pc, #76]	; (80018bc <_sbrk+0x64>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d102      	bne.n	800187a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001874:	4b11      	ldr	r3, [pc, #68]	; (80018bc <_sbrk+0x64>)
 8001876:	4a12      	ldr	r2, [pc, #72]	; (80018c0 <_sbrk+0x68>)
 8001878:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800187a:	4b10      	ldr	r3, [pc, #64]	; (80018bc <_sbrk+0x64>)
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4413      	add	r3, r2
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	429a      	cmp	r2, r3
 8001886:	d207      	bcs.n	8001898 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001888:	f004 fe6a 	bl	8006560 <__errno>
 800188c:	4603      	mov	r3, r0
 800188e:	220c      	movs	r2, #12
 8001890:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001892:	f04f 33ff 	mov.w	r3, #4294967295
 8001896:	e009      	b.n	80018ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001898:	4b08      	ldr	r3, [pc, #32]	; (80018bc <_sbrk+0x64>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800189e:	4b07      	ldr	r3, [pc, #28]	; (80018bc <_sbrk+0x64>)
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4413      	add	r3, r2
 80018a6:	4a05      	ldr	r2, [pc, #20]	; (80018bc <_sbrk+0x64>)
 80018a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018aa:	68fb      	ldr	r3, [r7, #12]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3718      	adds	r7, #24
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	20008000 	.word	0x20008000
 80018b8:	00000400 	.word	0x00000400
 80018bc:	20000950 	.word	0x20000950
 80018c0:	20000968 	.word	0x20000968

080018c4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80018c8:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <SystemInit+0x20>)
 80018ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018ce:	4a05      	ldr	r2, [pc, #20]	; (80018e4 <SystemInit+0x20>)
 80018d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018d8:	bf00      	nop
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	e000ed00 	.word	0xe000ed00

080018e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80018e8:	480d      	ldr	r0, [pc, #52]	; (8001920 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80018ea:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018ec:	480d      	ldr	r0, [pc, #52]	; (8001924 <LoopForever+0x6>)
  ldr r1, =_edata
 80018ee:	490e      	ldr	r1, [pc, #56]	; (8001928 <LoopForever+0xa>)
  ldr r2, =_sidata
 80018f0:	4a0e      	ldr	r2, [pc, #56]	; (800192c <LoopForever+0xe>)
  movs r3, #0
 80018f2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80018f4:	e002      	b.n	80018fc <LoopCopyDataInit>

080018f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018fa:	3304      	adds	r3, #4

080018fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001900:	d3f9      	bcc.n	80018f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001902:	4a0b      	ldr	r2, [pc, #44]	; (8001930 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001904:	4c0b      	ldr	r4, [pc, #44]	; (8001934 <LoopForever+0x16>)
  movs r3, #0
 8001906:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001908:	e001      	b.n	800190e <LoopFillZerobss>

0800190a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800190a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800190c:	3204      	adds	r2, #4

0800190e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800190e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001910:	d3fb      	bcc.n	800190a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001912:	f7ff ffd7 	bl	80018c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001916:	f004 fe29 	bl	800656c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800191a:	f7fe fd7b 	bl	8000414 <main>

0800191e <LoopForever>:

LoopForever:
    b LoopForever
 800191e:	e7fe      	b.n	800191e <LoopForever>
  ldr   r0, =_estack
 8001920:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001924:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001928:	20000284 	.word	0x20000284
  ldr r2, =_sidata
 800192c:	08007ce4 	.word	0x08007ce4
  ldr r2, =_sbss
 8001930:	20000284 	.word	0x20000284
  ldr r4, =_ebss
 8001934:	20000968 	.word	0x20000968

08001938 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001938:	e7fe      	b.n	8001938 <ADC1_2_IRQHandler>

0800193a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800193a:	b580      	push	{r7, lr}
 800193c:	b082      	sub	sp, #8
 800193e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001940:	2300      	movs	r3, #0
 8001942:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001944:	2003      	movs	r0, #3
 8001946:	f001 fbef 	bl	8003128 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800194a:	200f      	movs	r0, #15
 800194c:	f000 f80e 	bl	800196c <HAL_InitTick>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d002      	beq.n	800195c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	71fb      	strb	r3, [r7, #7]
 800195a:	e001      	b.n	8001960 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800195c:	f7ff fd46 	bl	80013ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001960:	79fb      	ldrb	r3, [r7, #7]

}
 8001962:	4618      	mov	r0, r3
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
	...

0800196c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001974:	2300      	movs	r3, #0
 8001976:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001978:	4b16      	ldr	r3, [pc, #88]	; (80019d4 <HAL_InitTick+0x68>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d022      	beq.n	80019c6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001980:	4b15      	ldr	r3, [pc, #84]	; (80019d8 <HAL_InitTick+0x6c>)
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	4b13      	ldr	r3, [pc, #76]	; (80019d4 <HAL_InitTick+0x68>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800198c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001990:	fbb2 f3f3 	udiv	r3, r2, r3
 8001994:	4618      	mov	r0, r3
 8001996:	f001 fbfa 	bl	800318e <HAL_SYSTICK_Config>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d10f      	bne.n	80019c0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2b0f      	cmp	r3, #15
 80019a4:	d809      	bhi.n	80019ba <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019a6:	2200      	movs	r2, #0
 80019a8:	6879      	ldr	r1, [r7, #4]
 80019aa:	f04f 30ff 	mov.w	r0, #4294967295
 80019ae:	f001 fbc6 	bl	800313e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019b2:	4a0a      	ldr	r2, [pc, #40]	; (80019dc <HAL_InitTick+0x70>)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6013      	str	r3, [r2, #0]
 80019b8:	e007      	b.n	80019ca <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	73fb      	strb	r3, [r7, #15]
 80019be:	e004      	b.n	80019ca <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	73fb      	strb	r3, [r7, #15]
 80019c4:	e001      	b.n	80019ca <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80019ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3710      	adds	r7, #16
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	2000021c 	.word	0x2000021c
 80019d8:	20000214 	.word	0x20000214
 80019dc:	20000218 	.word	0x20000218

080019e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019e4:	4b05      	ldr	r3, [pc, #20]	; (80019fc <HAL_IncTick+0x1c>)
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	4b05      	ldr	r3, [pc, #20]	; (8001a00 <HAL_IncTick+0x20>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4413      	add	r3, r2
 80019ee:	4a03      	ldr	r2, [pc, #12]	; (80019fc <HAL_IncTick+0x1c>)
 80019f0:	6013      	str	r3, [r2, #0]
}
 80019f2:	bf00      	nop
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr
 80019fc:	20000954 	.word	0x20000954
 8001a00:	2000021c 	.word	0x2000021c

08001a04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  return uwTick;
 8001a08:	4b03      	ldr	r3, [pc, #12]	; (8001a18 <HAL_GetTick+0x14>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	20000954 	.word	0x20000954

08001a1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a24:	f7ff ffee 	bl	8001a04 <HAL_GetTick>
 8001a28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a34:	d004      	beq.n	8001a40 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a36:	4b09      	ldr	r3, [pc, #36]	; (8001a5c <HAL_Delay+0x40>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	68fa      	ldr	r2, [r7, #12]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a40:	bf00      	nop
 8001a42:	f7ff ffdf 	bl	8001a04 <HAL_GetTick>
 8001a46:	4602      	mov	r2, r0
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	68fa      	ldr	r2, [r7, #12]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d8f7      	bhi.n	8001a42 <HAL_Delay+0x26>
  {
  }
}
 8001a52:	bf00      	nop
 8001a54:	bf00      	nop
 8001a56:	3710      	adds	r7, #16
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	2000021c 	.word	0x2000021c

08001a60 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	431a      	orrs	r2, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	609a      	str	r2, [r3, #8]
}
 8001a7a:	bf00      	nop
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr

08001a86 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001a86:	b480      	push	{r7}
 8001a88:	b083      	sub	sp, #12
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
 8001a8e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	431a      	orrs	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	609a      	str	r2, [r3, #8]
}
 8001aa0:	bf00      	nop
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b087      	sub	sp, #28
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
 8001ad4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	3360      	adds	r3, #96	; 0x60
 8001ada:	461a      	mov	r2, r3
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	4413      	add	r3, r2
 8001ae2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	4b08      	ldr	r3, [pc, #32]	; (8001b0c <LL_ADC_SetOffset+0x44>)
 8001aea:	4013      	ands	r3, r2
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001af2:	683a      	ldr	r2, [r7, #0]
 8001af4:	430a      	orrs	r2, r1
 8001af6:	4313      	orrs	r3, r2
 8001af8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001b00:	bf00      	nop
 8001b02:	371c      	adds	r7, #28
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	03fff000 	.word	0x03fff000

08001b10 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	3360      	adds	r3, #96	; 0x60
 8001b1e:	461a      	mov	r2, r3
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	4413      	add	r3, r2
 8001b26:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3714      	adds	r7, #20
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b087      	sub	sp, #28
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	3360      	adds	r3, #96	; 0x60
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	4413      	add	r3, r2
 8001b54:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	431a      	orrs	r2, r3
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001b66:	bf00      	nop
 8001b68:	371c      	adds	r7, #28
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr

08001b72 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001b72:	b480      	push	{r7}
 8001b74:	b087      	sub	sp, #28
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	60f8      	str	r0, [r7, #12]
 8001b7a:	60b9      	str	r1, [r7, #8]
 8001b7c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	3360      	adds	r3, #96	; 0x60
 8001b82:	461a      	mov	r2, r3
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	4413      	add	r3, r2
 8001b8a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	431a      	orrs	r2, r3
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001b9c:	bf00      	nop
 8001b9e:	371c      	adds	r7, #28
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b087      	sub	sp, #28
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	3360      	adds	r3, #96	; 0x60
 8001bb8:	461a      	mov	r2, r3
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	4413      	add	r3, r2
 8001bc0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	431a      	orrs	r2, r3
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001bd2:	bf00      	nop
 8001bd4:	371c      	adds	r7, #28
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr

08001bde <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001bde:	b480      	push	{r7}
 8001be0:	b083      	sub	sp, #12
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
 8001be6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	695b      	ldr	r3, [r3, #20]
 8001bec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	431a      	orrs	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	615a      	str	r2, [r3, #20]
}
 8001bf8:	bf00      	nop
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b087      	sub	sp, #28
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	3330      	adds	r3, #48	; 0x30
 8001c14:	461a      	mov	r2, r3
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	0a1b      	lsrs	r3, r3, #8
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	f003 030c 	and.w	r3, r3, #12
 8001c20:	4413      	add	r3, r2
 8001c22:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	f003 031f 	and.w	r3, r3, #31
 8001c2e:	211f      	movs	r1, #31
 8001c30:	fa01 f303 	lsl.w	r3, r1, r3
 8001c34:	43db      	mvns	r3, r3
 8001c36:	401a      	ands	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	0e9b      	lsrs	r3, r3, #26
 8001c3c:	f003 011f 	and.w	r1, r3, #31
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	f003 031f 	and.w	r3, r3, #31
 8001c46:	fa01 f303 	lsl.w	r3, r1, r3
 8001c4a:	431a      	orrs	r2, r3
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001c50:	bf00      	nop
 8001c52:	371c      	adds	r7, #28
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b087      	sub	sp, #28
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	60b9      	str	r1, [r7, #8]
 8001c66:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	3314      	adds	r3, #20
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	0e5b      	lsrs	r3, r3, #25
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	f003 0304 	and.w	r3, r3, #4
 8001c78:	4413      	add	r3, r2
 8001c7a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	0d1b      	lsrs	r3, r3, #20
 8001c84:	f003 031f 	and.w	r3, r3, #31
 8001c88:	2107      	movs	r1, #7
 8001c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c8e:	43db      	mvns	r3, r3
 8001c90:	401a      	ands	r2, r3
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	0d1b      	lsrs	r3, r3, #20
 8001c96:	f003 031f 	and.w	r3, r3, #31
 8001c9a:	6879      	ldr	r1, [r7, #4]
 8001c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca0:	431a      	orrs	r2, r3
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001ca6:	bf00      	nop
 8001ca8:	371c      	adds	r7, #28
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
	...

08001cb4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b085      	sub	sp, #20
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	60b9      	str	r1, [r7, #8]
 8001cbe:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	4a0f      	ldr	r2, [pc, #60]	; (8001d00 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d10a      	bne.n	8001cde <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cd4:	431a      	orrs	r2, r3
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8001cdc:	e00a      	b.n	8001cf4 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cea:	43db      	mvns	r3, r3
 8001cec:	401a      	ands	r2, r3
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8001cf4:	bf00      	nop
 8001cf6:	3714      	adds	r7, #20
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr
 8001d00:	407f0000 	.word	0x407f0000

08001d04 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f003 031f 	and.w	r3, r3, #31
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001d30:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	6093      	str	r3, [r2, #8]
}
 8001d38:	bf00      	nop
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d58:	d101      	bne.n	8001d5e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e000      	b.n	8001d60 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001d5e:	2300      	movs	r3, #0
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001d7c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d80:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001da8:	d101      	bne.n	8001dae <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001daa:	2301      	movs	r3, #1
 8001dac:	e000      	b.n	8001db0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001dae:	2300      	movs	r3, #0
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001dcc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001dd0:	f043 0201 	orr.w	r2, r3, #1
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001dd8:	bf00      	nop
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001df4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001df8:	f043 0202 	orr.w	r2, r3, #2
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001e00:	bf00      	nop
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f003 0301 	and.w	r3, r3, #1
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d101      	bne.n	8001e24 <LL_ADC_IsEnabled+0x18>
 8001e20:	2301      	movs	r3, #1
 8001e22:	e000      	b.n	8001e26 <LL_ADC_IsEnabled+0x1a>
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr

08001e32 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001e32:	b480      	push	{r7}
 8001e34:	b083      	sub	sp, #12
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d101      	bne.n	8001e4a <LL_ADC_IsDisableOngoing+0x18>
 8001e46:	2301      	movs	r3, #1
 8001e48:	e000      	b.n	8001e4c <LL_ADC_IsDisableOngoing+0x1a>
 8001e4a:	2300      	movs	r3, #0
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e68:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e6c:	f043 0204 	orr.w	r2, r3, #4
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	f003 0304 	and.w	r3, r3, #4
 8001e90:	2b04      	cmp	r3, #4
 8001e92:	d101      	bne.n	8001e98 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001e94:	2301      	movs	r3, #1
 8001e96:	e000      	b.n	8001e9a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr

08001ea6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	b083      	sub	sp, #12
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f003 0308 	and.w	r3, r3, #8
 8001eb6:	2b08      	cmp	r3, #8
 8001eb8:	d101      	bne.n	8001ebe <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e000      	b.n	8001ec0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001ebe:	2300      	movs	r3, #0
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ecc:	b590      	push	{r4, r7, lr}
 8001ece:	b089      	sub	sp, #36	; 0x24
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d101      	bne.n	8001ee6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e177      	b.n	80021d6 <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	695b      	ldr	r3, [r3, #20]
 8001eea:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d109      	bne.n	8001f08 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f7ff fa9d 	bl	8001434 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2200      	movs	r2, #0
 8001f04:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff ff19 	bl	8001d44 <LL_ADC_IsDeepPowerDownEnabled>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d004      	beq.n	8001f22 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff feff 	bl	8001d20 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7ff ff34 	bl	8001d94 <LL_ADC_IsInternalRegulatorEnabled>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d115      	bne.n	8001f5e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7ff ff18 	bl	8001d6c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f3c:	4b9c      	ldr	r3, [pc, #624]	; (80021b0 <HAL_ADC_Init+0x2e4>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	099b      	lsrs	r3, r3, #6
 8001f42:	4a9c      	ldr	r2, [pc, #624]	; (80021b4 <HAL_ADC_Init+0x2e8>)
 8001f44:	fba2 2303 	umull	r2, r3, r2, r3
 8001f48:	099b      	lsrs	r3, r3, #6
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001f50:	e002      	b.n	8001f58 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	3b01      	subs	r3, #1
 8001f56:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d1f9      	bne.n	8001f52 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7ff ff16 	bl	8001d94 <LL_ADC_IsInternalRegulatorEnabled>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d10d      	bne.n	8001f8a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f72:	f043 0210 	orr.w	r2, r3, #16
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f7e:	f043 0201 	orr.w	r2, r3, #1
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7ff ff76 	bl	8001e80 <LL_ADC_REG_IsConversionOngoing>
 8001f94:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f9a:	f003 0310 	and.w	r3, r3, #16
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f040 8110 	bne.w	80021c4 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	f040 810c 	bne.w	80021c4 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001fb4:	f043 0202 	orr.w	r2, r3, #2
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7ff ff23 	bl	8001e0c <LL_ADC_IsEnabled>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d111      	bne.n	8001ff0 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001fcc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001fd0:	f7ff ff1c 	bl	8001e0c <LL_ADC_IsEnabled>
 8001fd4:	4604      	mov	r4, r0
 8001fd6:	4878      	ldr	r0, [pc, #480]	; (80021b8 <HAL_ADC_Init+0x2ec>)
 8001fd8:	f7ff ff18 	bl	8001e0c <LL_ADC_IsEnabled>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	4323      	orrs	r3, r4
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d105      	bne.n	8001ff0 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	4619      	mov	r1, r3
 8001fea:	4874      	ldr	r0, [pc, #464]	; (80021bc <HAL_ADC_Init+0x2f0>)
 8001fec:	f7ff fd38 	bl	8001a60 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	7f5b      	ldrb	r3, [r3, #29]
 8001ff4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ffa:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002000:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002006:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800200e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002010:	4313      	orrs	r3, r2
 8002012:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800201a:	2b01      	cmp	r3, #1
 800201c:	d106      	bne.n	800202c <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002022:	3b01      	subs	r3, #1
 8002024:	045b      	lsls	r3, r3, #17
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	4313      	orrs	r3, r2
 800202a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002030:	2b00      	cmp	r3, #0
 8002032:	d009      	beq.n	8002048 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002038:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002040:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	4313      	orrs	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	68da      	ldr	r2, [r3, #12]
 800204e:	4b5c      	ldr	r3, [pc, #368]	; (80021c0 <HAL_ADC_Init+0x2f4>)
 8002050:	4013      	ands	r3, r2
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	6812      	ldr	r2, [r2, #0]
 8002056:	69b9      	ldr	r1, [r7, #24]
 8002058:	430b      	orrs	r3, r1
 800205a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	430a      	orrs	r2, r1
 8002070:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4618      	mov	r0, r3
 8002078:	f7ff ff02 	bl	8001e80 <LL_ADC_REG_IsConversionOngoing>
 800207c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4618      	mov	r0, r3
 8002084:	f7ff ff0f 	bl	8001ea6 <LL_ADC_INJ_IsConversionOngoing>
 8002088:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d16d      	bne.n	800216c <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d16a      	bne.n	800216c <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800209a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80020a2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80020a4:	4313      	orrs	r3, r2
 80020a6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80020b2:	f023 0302 	bic.w	r3, r3, #2
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	6812      	ldr	r2, [r2, #0]
 80020ba:	69b9      	ldr	r1, [r7, #24]
 80020bc:	430b      	orrs	r3, r1
 80020be:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d017      	beq.n	80020f8 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	691a      	ldr	r2, [r3, #16]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80020d6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80020e0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80020e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	6911      	ldr	r1, [r2, #16]
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	6812      	ldr	r2, [r2, #0]
 80020f0:	430b      	orrs	r3, r1
 80020f2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80020f6:	e013      	b.n	8002120 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	691a      	ldr	r2, [r3, #16]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002106:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	6812      	ldr	r2, [r2, #0]
 8002114:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002118:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800211c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002126:	2b01      	cmp	r3, #1
 8002128:	d118      	bne.n	800215c <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	691b      	ldr	r3, [r3, #16]
 8002130:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002134:	f023 0304 	bic.w	r3, r3, #4
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002140:	4311      	orrs	r1, r2
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002146:	4311      	orrs	r1, r2
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800214c:	430a      	orrs	r2, r1
 800214e:	431a      	orrs	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f042 0201 	orr.w	r2, r2, #1
 8002158:	611a      	str	r2, [r3, #16]
 800215a:	e007      	b.n	800216c <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	691a      	ldr	r2, [r3, #16]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f022 0201 	bic.w	r2, r2, #1
 800216a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	695b      	ldr	r3, [r3, #20]
 8002170:	2b01      	cmp	r3, #1
 8002172:	d10c      	bne.n	800218e <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217a:	f023 010f 	bic.w	r1, r3, #15
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a1b      	ldr	r3, [r3, #32]
 8002182:	1e5a      	subs	r2, r3, #1
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	430a      	orrs	r2, r1
 800218a:	631a      	str	r2, [r3, #48]	; 0x30
 800218c:	e007      	b.n	800219e <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f022 020f 	bic.w	r2, r2, #15
 800219c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021a2:	f023 0303 	bic.w	r3, r3, #3
 80021a6:	f043 0201 	orr.w	r2, r3, #1
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	65da      	str	r2, [r3, #92]	; 0x5c
 80021ae:	e011      	b.n	80021d4 <HAL_ADC_Init+0x308>
 80021b0:	20000214 	.word	0x20000214
 80021b4:	053e2d63 	.word	0x053e2d63
 80021b8:	50000100 	.word	0x50000100
 80021bc:	50000300 	.word	0x50000300
 80021c0:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021c8:	f043 0210 	orr.w	r2, r3, #16
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80021d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3724      	adds	r7, #36	; 0x24
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd90      	pop	{r4, r7, pc}
 80021de:	bf00      	nop

080021e0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b086      	sub	sp, #24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80021e8:	4859      	ldr	r0, [pc, #356]	; (8002350 <HAL_ADC_Start+0x170>)
 80021ea:	f7ff fd8b 	bl	8001d04 <LL_ADC_GetMultimode>
 80021ee:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff fe43 	bl	8001e80 <LL_ADC_REG_IsConversionOngoing>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	f040 809f 	bne.w	8002340 <HAL_ADC_Start+0x160>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002208:	2b01      	cmp	r3, #1
 800220a:	d101      	bne.n	8002210 <HAL_ADC_Start+0x30>
 800220c:	2302      	movs	r3, #2
 800220e:	e09a      	b.n	8002346 <HAL_ADC_Start+0x166>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f000 fc9b 	bl	8002b54 <ADC_Enable>
 800221e:	4603      	mov	r3, r0
 8002220:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002222:	7dfb      	ldrb	r3, [r7, #23]
 8002224:	2b00      	cmp	r3, #0
 8002226:	f040 8086 	bne.w	8002336 <HAL_ADC_Start+0x156>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800222e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002232:	f023 0301 	bic.w	r3, r3, #1
 8002236:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a44      	ldr	r2, [pc, #272]	; (8002354 <HAL_ADC_Start+0x174>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d002      	beq.n	800224e <HAL_ADC_Start+0x6e>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	e001      	b.n	8002252 <HAL_ADC_Start+0x72>
 800224e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	6812      	ldr	r2, [r2, #0]
 8002256:	4293      	cmp	r3, r2
 8002258:	d002      	beq.n	8002260 <HAL_ADC_Start+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d105      	bne.n	800226c <HAL_ADC_Start+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002264:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002270:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002274:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002278:	d106      	bne.n	8002288 <HAL_ADC_Start+0xa8>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800227e:	f023 0206 	bic.w	r2, r3, #6
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	661a      	str	r2, [r3, #96]	; 0x60
 8002286:	e002      	b.n	800228e <HAL_ADC_Start+0xae>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	221c      	movs	r2, #28
 8002294:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a2c      	ldr	r2, [pc, #176]	; (8002354 <HAL_ADC_Start+0x174>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d002      	beq.n	80022ae <HAL_ADC_Start+0xce>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	e001      	b.n	80022b2 <HAL_ADC_Start+0xd2>
 80022ae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	6812      	ldr	r2, [r2, #0]
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d008      	beq.n	80022cc <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d005      	beq.n	80022cc <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	2b05      	cmp	r3, #5
 80022c4:	d002      	beq.n	80022cc <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	2b09      	cmp	r3, #9
 80022ca:	d114      	bne.n	80022f6 <HAL_ADC_Start+0x116>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d007      	beq.n	80022ea <HAL_ADC_Start+0x10a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022de:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80022e2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7ff fdb2 	bl	8001e58 <LL_ADC_REG_StartConversion>
 80022f4:	e026      	b.n	8002344 <HAL_ADC_Start+0x164>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022fa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a13      	ldr	r2, [pc, #76]	; (8002354 <HAL_ADC_Start+0x174>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d002      	beq.n	8002312 <HAL_ADC_Start+0x132>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	e001      	b.n	8002316 <HAL_ADC_Start+0x136>
 8002312:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002316:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00f      	beq.n	8002344 <HAL_ADC_Start+0x164>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002328:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800232c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	65da      	str	r2, [r3, #92]	; 0x5c
 8002334:	e006      	b.n	8002344 <HAL_ADC_Start+0x164>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800233e:	e001      	b.n	8002344 <HAL_ADC_Start+0x164>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002340:	2302      	movs	r3, #2
 8002342:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002344:	7dfb      	ldrb	r3, [r7, #23]
}
 8002346:	4618      	mov	r0, r3
 8002348:	3718      	adds	r7, #24
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	50000300 	.word	0x50000300
 8002354:	50000100 	.word	0x50000100

08002358 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002366:	4618      	mov	r0, r3
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
	...

08002374 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b0b6      	sub	sp, #216	; 0xd8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800237e:	2300      	movs	r3, #0
 8002380:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002384:	2300      	movs	r3, #0
 8002386:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800238e:	2b01      	cmp	r3, #1
 8002390:	d101      	bne.n	8002396 <HAL_ADC_ConfigChannel+0x22>
 8002392:	2302      	movs	r3, #2
 8002394:	e3c8      	b.n	8002b28 <HAL_ADC_ConfigChannel+0x7b4>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2201      	movs	r2, #1
 800239a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7ff fd6c 	bl	8001e80 <LL_ADC_REG_IsConversionOngoing>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	f040 83ad 	bne.w	8002b0a <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6818      	ldr	r0, [r3, #0]
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	6859      	ldr	r1, [r3, #4]
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	461a      	mov	r2, r3
 80023be:	f7ff fc21 	bl	8001c04 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7ff fd5a 	bl	8001e80 <LL_ADC_REG_IsConversionOngoing>
 80023cc:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7ff fd66 	bl	8001ea6 <LL_ADC_INJ_IsConversionOngoing>
 80023da:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80023de:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	f040 81d9 	bne.w	800279a <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80023e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	f040 81d4 	bne.w	800279a <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80023fa:	d10f      	bne.n	800241c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6818      	ldr	r0, [r3, #0]
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2200      	movs	r2, #0
 8002406:	4619      	mov	r1, r3
 8002408:	f7ff fc28 	bl	8001c5c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff fbe2 	bl	8001bde <LL_ADC_SetSamplingTimeCommonConfig>
 800241a:	e00e      	b.n	800243a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6818      	ldr	r0, [r3, #0]
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	6819      	ldr	r1, [r3, #0]
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	461a      	mov	r2, r3
 800242a:	f7ff fc17 	bl	8001c5c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2100      	movs	r1, #0
 8002434:	4618      	mov	r0, r3
 8002436:	f7ff fbd2 	bl	8001bde <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	695a      	ldr	r2, [r3, #20]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	08db      	lsrs	r3, r3, #3
 8002446:	f003 0303 	and.w	r3, r3, #3
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	691b      	ldr	r3, [r3, #16]
 8002458:	2b04      	cmp	r3, #4
 800245a:	d022      	beq.n	80024a2 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6818      	ldr	r0, [r3, #0]
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	6919      	ldr	r1, [r3, #16]
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800246c:	f7ff fb2c 	bl	8001ac8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6818      	ldr	r0, [r3, #0]
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	6919      	ldr	r1, [r3, #16]
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	699b      	ldr	r3, [r3, #24]
 800247c:	461a      	mov	r2, r3
 800247e:	f7ff fb78 	bl	8001b72 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6818      	ldr	r0, [r3, #0]
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	6919      	ldr	r1, [r3, #16]
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	7f1b      	ldrb	r3, [r3, #28]
 800248e:	2b01      	cmp	r3, #1
 8002490:	d102      	bne.n	8002498 <HAL_ADC_ConfigChannel+0x124>
 8002492:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002496:	e000      	b.n	800249a <HAL_ADC_ConfigChannel+0x126>
 8002498:	2300      	movs	r3, #0
 800249a:	461a      	mov	r2, r3
 800249c:	f7ff fb84 	bl	8001ba8 <LL_ADC_SetOffsetSaturation>
 80024a0:	e17b      	b.n	800279a <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2100      	movs	r1, #0
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7ff fb31 	bl	8001b10 <LL_ADC_GetOffsetChannel>
 80024ae:	4603      	mov	r3, r0
 80024b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d10a      	bne.n	80024ce <HAL_ADC_ConfigChannel+0x15a>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2100      	movs	r1, #0
 80024be:	4618      	mov	r0, r3
 80024c0:	f7ff fb26 	bl	8001b10 <LL_ADC_GetOffsetChannel>
 80024c4:	4603      	mov	r3, r0
 80024c6:	0e9b      	lsrs	r3, r3, #26
 80024c8:	f003 021f 	and.w	r2, r3, #31
 80024cc:	e01e      	b.n	800250c <HAL_ADC_ConfigChannel+0x198>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2100      	movs	r1, #0
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7ff fb1b 	bl	8001b10 <LL_ADC_GetOffsetChannel>
 80024da:	4603      	mov	r3, r0
 80024dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80024e4:	fa93 f3a3 	rbit	r3, r3
 80024e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80024ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80024f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80024f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d101      	bne.n	8002500 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80024fc:	2320      	movs	r3, #32
 80024fe:	e004      	b.n	800250a <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002500:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002504:	fab3 f383 	clz	r3, r3
 8002508:	b2db      	uxtb	r3, r3
 800250a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002514:	2b00      	cmp	r3, #0
 8002516:	d105      	bne.n	8002524 <HAL_ADC_ConfigChannel+0x1b0>
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	0e9b      	lsrs	r3, r3, #26
 800251e:	f003 031f 	and.w	r3, r3, #31
 8002522:	e018      	b.n	8002556 <HAL_ADC_ConfigChannel+0x1e2>
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002530:	fa93 f3a3 	rbit	r3, r3
 8002534:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002538:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800253c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002540:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002544:	2b00      	cmp	r3, #0
 8002546:	d101      	bne.n	800254c <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002548:	2320      	movs	r3, #32
 800254a:	e004      	b.n	8002556 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 800254c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002550:	fab3 f383 	clz	r3, r3
 8002554:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002556:	429a      	cmp	r2, r3
 8002558:	d106      	bne.n	8002568 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2200      	movs	r2, #0
 8002560:	2100      	movs	r1, #0
 8002562:	4618      	mov	r0, r3
 8002564:	f7ff faea 	bl	8001b3c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2101      	movs	r1, #1
 800256e:	4618      	mov	r0, r3
 8002570:	f7ff face 	bl	8001b10 <LL_ADC_GetOffsetChannel>
 8002574:	4603      	mov	r3, r0
 8002576:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800257a:	2b00      	cmp	r3, #0
 800257c:	d10a      	bne.n	8002594 <HAL_ADC_ConfigChannel+0x220>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2101      	movs	r1, #1
 8002584:	4618      	mov	r0, r3
 8002586:	f7ff fac3 	bl	8001b10 <LL_ADC_GetOffsetChannel>
 800258a:	4603      	mov	r3, r0
 800258c:	0e9b      	lsrs	r3, r3, #26
 800258e:	f003 021f 	and.w	r2, r3, #31
 8002592:	e01e      	b.n	80025d2 <HAL_ADC_ConfigChannel+0x25e>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2101      	movs	r1, #1
 800259a:	4618      	mov	r0, r3
 800259c:	f7ff fab8 	bl	8001b10 <LL_ADC_GetOffsetChannel>
 80025a0:	4603      	mov	r3, r0
 80025a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80025aa:	fa93 f3a3 	rbit	r3, r3
 80025ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80025b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80025b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80025ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d101      	bne.n	80025c6 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80025c2:	2320      	movs	r3, #32
 80025c4:	e004      	b.n	80025d0 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80025c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80025ca:	fab3 f383 	clz	r3, r3
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d105      	bne.n	80025ea <HAL_ADC_ConfigChannel+0x276>
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	0e9b      	lsrs	r3, r3, #26
 80025e4:	f003 031f 	and.w	r3, r3, #31
 80025e8:	e018      	b.n	800261c <HAL_ADC_ConfigChannel+0x2a8>
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80025f6:	fa93 f3a3 	rbit	r3, r3
 80025fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80025fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002602:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002606:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800260a:	2b00      	cmp	r3, #0
 800260c:	d101      	bne.n	8002612 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800260e:	2320      	movs	r3, #32
 8002610:	e004      	b.n	800261c <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8002612:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002616:	fab3 f383 	clz	r3, r3
 800261a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800261c:	429a      	cmp	r2, r3
 800261e:	d106      	bne.n	800262e <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2200      	movs	r2, #0
 8002626:	2101      	movs	r1, #1
 8002628:	4618      	mov	r0, r3
 800262a:	f7ff fa87 	bl	8001b3c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2102      	movs	r1, #2
 8002634:	4618      	mov	r0, r3
 8002636:	f7ff fa6b 	bl	8001b10 <LL_ADC_GetOffsetChannel>
 800263a:	4603      	mov	r3, r0
 800263c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002640:	2b00      	cmp	r3, #0
 8002642:	d10a      	bne.n	800265a <HAL_ADC_ConfigChannel+0x2e6>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2102      	movs	r1, #2
 800264a:	4618      	mov	r0, r3
 800264c:	f7ff fa60 	bl	8001b10 <LL_ADC_GetOffsetChannel>
 8002650:	4603      	mov	r3, r0
 8002652:	0e9b      	lsrs	r3, r3, #26
 8002654:	f003 021f 	and.w	r2, r3, #31
 8002658:	e01e      	b.n	8002698 <HAL_ADC_ConfigChannel+0x324>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2102      	movs	r1, #2
 8002660:	4618      	mov	r0, r3
 8002662:	f7ff fa55 	bl	8001b10 <LL_ADC_GetOffsetChannel>
 8002666:	4603      	mov	r3, r0
 8002668:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002670:	fa93 f3a3 	rbit	r3, r3
 8002674:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002678:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800267c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002680:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002684:	2b00      	cmp	r3, #0
 8002686:	d101      	bne.n	800268c <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002688:	2320      	movs	r3, #32
 800268a:	e004      	b.n	8002696 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 800268c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002690:	fab3 f383 	clz	r3, r3
 8002694:	b2db      	uxtb	r3, r3
 8002696:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d105      	bne.n	80026b0 <HAL_ADC_ConfigChannel+0x33c>
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	0e9b      	lsrs	r3, r3, #26
 80026aa:	f003 031f 	and.w	r3, r3, #31
 80026ae:	e016      	b.n	80026de <HAL_ADC_ConfigChannel+0x36a>
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80026bc:	fa93 f3a3 	rbit	r3, r3
 80026c0:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80026c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80026c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80026c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d101      	bne.n	80026d4 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80026d0:	2320      	movs	r3, #32
 80026d2:	e004      	b.n	80026de <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80026d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80026d8:	fab3 f383 	clz	r3, r3
 80026dc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80026de:	429a      	cmp	r2, r3
 80026e0:	d106      	bne.n	80026f0 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2200      	movs	r2, #0
 80026e8:	2102      	movs	r1, #2
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7ff fa26 	bl	8001b3c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2103      	movs	r1, #3
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7ff fa0a 	bl	8001b10 <LL_ADC_GetOffsetChannel>
 80026fc:	4603      	mov	r3, r0
 80026fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002702:	2b00      	cmp	r3, #0
 8002704:	d10a      	bne.n	800271c <HAL_ADC_ConfigChannel+0x3a8>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2103      	movs	r1, #3
 800270c:	4618      	mov	r0, r3
 800270e:	f7ff f9ff 	bl	8001b10 <LL_ADC_GetOffsetChannel>
 8002712:	4603      	mov	r3, r0
 8002714:	0e9b      	lsrs	r3, r3, #26
 8002716:	f003 021f 	and.w	r2, r3, #31
 800271a:	e017      	b.n	800274c <HAL_ADC_ConfigChannel+0x3d8>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2103      	movs	r1, #3
 8002722:	4618      	mov	r0, r3
 8002724:	f7ff f9f4 	bl	8001b10 <LL_ADC_GetOffsetChannel>
 8002728:	4603      	mov	r3, r0
 800272a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800272c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800272e:	fa93 f3a3 	rbit	r3, r3
 8002732:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002734:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002736:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002738:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800273a:	2b00      	cmp	r3, #0
 800273c:	d101      	bne.n	8002742 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800273e:	2320      	movs	r3, #32
 8002740:	e003      	b.n	800274a <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8002742:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002744:	fab3 f383 	clz	r3, r3
 8002748:	b2db      	uxtb	r3, r3
 800274a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002754:	2b00      	cmp	r3, #0
 8002756:	d105      	bne.n	8002764 <HAL_ADC_ConfigChannel+0x3f0>
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	0e9b      	lsrs	r3, r3, #26
 800275e:	f003 031f 	and.w	r3, r3, #31
 8002762:	e011      	b.n	8002788 <HAL_ADC_ConfigChannel+0x414>
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800276a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800276c:	fa93 f3a3 	rbit	r3, r3
 8002770:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002772:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002774:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002776:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002778:	2b00      	cmp	r3, #0
 800277a:	d101      	bne.n	8002780 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 800277c:	2320      	movs	r3, #32
 800277e:	e003      	b.n	8002788 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002780:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002782:	fab3 f383 	clz	r3, r3
 8002786:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002788:	429a      	cmp	r2, r3
 800278a:	d106      	bne.n	800279a <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2200      	movs	r2, #0
 8002792:	2103      	movs	r1, #3
 8002794:	4618      	mov	r0, r3
 8002796:	f7ff f9d1 	bl	8001b3c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4618      	mov	r0, r3
 80027a0:	f7ff fb34 	bl	8001e0c <LL_ADC_IsEnabled>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	f040 8140 	bne.w	8002a2c <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6818      	ldr	r0, [r3, #0]
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	6819      	ldr	r1, [r3, #0]
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	461a      	mov	r2, r3
 80027ba:	f7ff fa7b 	bl	8001cb4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	4a8f      	ldr	r2, [pc, #572]	; (8002a00 <HAL_ADC_ConfigChannel+0x68c>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	f040 8131 	bne.w	8002a2c <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d10b      	bne.n	80027f2 <HAL_ADC_ConfigChannel+0x47e>
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	0e9b      	lsrs	r3, r3, #26
 80027e0:	3301      	adds	r3, #1
 80027e2:	f003 031f 	and.w	r3, r3, #31
 80027e6:	2b09      	cmp	r3, #9
 80027e8:	bf94      	ite	ls
 80027ea:	2301      	movls	r3, #1
 80027ec:	2300      	movhi	r3, #0
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	e019      	b.n	8002826 <HAL_ADC_ConfigChannel+0x4b2>
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027fa:	fa93 f3a3 	rbit	r3, r3
 80027fe:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002800:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002802:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002804:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002806:	2b00      	cmp	r3, #0
 8002808:	d101      	bne.n	800280e <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 800280a:	2320      	movs	r3, #32
 800280c:	e003      	b.n	8002816 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 800280e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002810:	fab3 f383 	clz	r3, r3
 8002814:	b2db      	uxtb	r3, r3
 8002816:	3301      	adds	r3, #1
 8002818:	f003 031f 	and.w	r3, r3, #31
 800281c:	2b09      	cmp	r3, #9
 800281e:	bf94      	ite	ls
 8002820:	2301      	movls	r3, #1
 8002822:	2300      	movhi	r3, #0
 8002824:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002826:	2b00      	cmp	r3, #0
 8002828:	d079      	beq.n	800291e <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002832:	2b00      	cmp	r3, #0
 8002834:	d107      	bne.n	8002846 <HAL_ADC_ConfigChannel+0x4d2>
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	0e9b      	lsrs	r3, r3, #26
 800283c:	3301      	adds	r3, #1
 800283e:	069b      	lsls	r3, r3, #26
 8002840:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002844:	e015      	b.n	8002872 <HAL_ADC_ConfigChannel+0x4fe>
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800284e:	fa93 f3a3 	rbit	r3, r3
 8002852:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002854:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002856:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002858:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800285e:	2320      	movs	r3, #32
 8002860:	e003      	b.n	800286a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002862:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002864:	fab3 f383 	clz	r3, r3
 8002868:	b2db      	uxtb	r3, r3
 800286a:	3301      	adds	r3, #1
 800286c:	069b      	lsls	r3, r3, #26
 800286e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800287a:	2b00      	cmp	r3, #0
 800287c:	d109      	bne.n	8002892 <HAL_ADC_ConfigChannel+0x51e>
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	0e9b      	lsrs	r3, r3, #26
 8002884:	3301      	adds	r3, #1
 8002886:	f003 031f 	and.w	r3, r3, #31
 800288a:	2101      	movs	r1, #1
 800288c:	fa01 f303 	lsl.w	r3, r1, r3
 8002890:	e017      	b.n	80028c2 <HAL_ADC_ConfigChannel+0x54e>
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002898:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800289a:	fa93 f3a3 	rbit	r3, r3
 800289e:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80028a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028a2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80028a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d101      	bne.n	80028ae <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80028aa:	2320      	movs	r3, #32
 80028ac:	e003      	b.n	80028b6 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80028ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028b0:	fab3 f383 	clz	r3, r3
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	3301      	adds	r3, #1
 80028b8:	f003 031f 	and.w	r3, r3, #31
 80028bc:	2101      	movs	r1, #1
 80028be:	fa01 f303 	lsl.w	r3, r1, r3
 80028c2:	ea42 0103 	orr.w	r1, r2, r3
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d10a      	bne.n	80028e8 <HAL_ADC_ConfigChannel+0x574>
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	0e9b      	lsrs	r3, r3, #26
 80028d8:	3301      	adds	r3, #1
 80028da:	f003 021f 	and.w	r2, r3, #31
 80028de:	4613      	mov	r3, r2
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	4413      	add	r3, r2
 80028e4:	051b      	lsls	r3, r3, #20
 80028e6:	e018      	b.n	800291a <HAL_ADC_ConfigChannel+0x5a6>
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028f0:	fa93 f3a3 	rbit	r3, r3
 80028f4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80028f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80028fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d101      	bne.n	8002904 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002900:	2320      	movs	r3, #32
 8002902:	e003      	b.n	800290c <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002906:	fab3 f383 	clz	r3, r3
 800290a:	b2db      	uxtb	r3, r3
 800290c:	3301      	adds	r3, #1
 800290e:	f003 021f 	and.w	r2, r3, #31
 8002912:	4613      	mov	r3, r2
 8002914:	005b      	lsls	r3, r3, #1
 8002916:	4413      	add	r3, r2
 8002918:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800291a:	430b      	orrs	r3, r1
 800291c:	e081      	b.n	8002a22 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002926:	2b00      	cmp	r3, #0
 8002928:	d107      	bne.n	800293a <HAL_ADC_ConfigChannel+0x5c6>
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	0e9b      	lsrs	r3, r3, #26
 8002930:	3301      	adds	r3, #1
 8002932:	069b      	lsls	r3, r3, #26
 8002934:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002938:	e015      	b.n	8002966 <HAL_ADC_ConfigChannel+0x5f2>
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002942:	fa93 f3a3 	rbit	r3, r3
 8002946:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800294a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800294c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800294e:	2b00      	cmp	r3, #0
 8002950:	d101      	bne.n	8002956 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8002952:	2320      	movs	r3, #32
 8002954:	e003      	b.n	800295e <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002958:	fab3 f383 	clz	r3, r3
 800295c:	b2db      	uxtb	r3, r3
 800295e:	3301      	adds	r3, #1
 8002960:	069b      	lsls	r3, r3, #26
 8002962:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800296e:	2b00      	cmp	r3, #0
 8002970:	d109      	bne.n	8002986 <HAL_ADC_ConfigChannel+0x612>
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	0e9b      	lsrs	r3, r3, #26
 8002978:	3301      	adds	r3, #1
 800297a:	f003 031f 	and.w	r3, r3, #31
 800297e:	2101      	movs	r1, #1
 8002980:	fa01 f303 	lsl.w	r3, r1, r3
 8002984:	e017      	b.n	80029b6 <HAL_ADC_ConfigChannel+0x642>
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298c:	6a3b      	ldr	r3, [r7, #32]
 800298e:	fa93 f3a3 	rbit	r3, r3
 8002992:	61fb      	str	r3, [r7, #28]
  return result;
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800299e:	2320      	movs	r3, #32
 80029a0:	e003      	b.n	80029aa <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80029a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a4:	fab3 f383 	clz	r3, r3
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	3301      	adds	r3, #1
 80029ac:	f003 031f 	and.w	r3, r3, #31
 80029b0:	2101      	movs	r1, #1
 80029b2:	fa01 f303 	lsl.w	r3, r1, r3
 80029b6:	ea42 0103 	orr.w	r1, r2, r3
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d10d      	bne.n	80029e2 <HAL_ADC_ConfigChannel+0x66e>
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	0e9b      	lsrs	r3, r3, #26
 80029cc:	3301      	adds	r3, #1
 80029ce:	f003 021f 	and.w	r2, r3, #31
 80029d2:	4613      	mov	r3, r2
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	4413      	add	r3, r2
 80029d8:	3b1e      	subs	r3, #30
 80029da:	051b      	lsls	r3, r3, #20
 80029dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80029e0:	e01e      	b.n	8002a20 <HAL_ADC_ConfigChannel+0x6ac>
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	fa93 f3a3 	rbit	r3, r3
 80029ee:	613b      	str	r3, [r7, #16]
  return result;
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d104      	bne.n	8002a04 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80029fa:	2320      	movs	r3, #32
 80029fc:	e006      	b.n	8002a0c <HAL_ADC_ConfigChannel+0x698>
 80029fe:	bf00      	nop
 8002a00:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	fab3 f383 	clz	r3, r3
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	f003 021f 	and.w	r2, r3, #31
 8002a12:	4613      	mov	r3, r2
 8002a14:	005b      	lsls	r3, r3, #1
 8002a16:	4413      	add	r3, r2
 8002a18:	3b1e      	subs	r3, #30
 8002a1a:	051b      	lsls	r3, r3, #20
 8002a1c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a20:	430b      	orrs	r3, r1
 8002a22:	683a      	ldr	r2, [r7, #0]
 8002a24:	6892      	ldr	r2, [r2, #8]
 8002a26:	4619      	mov	r1, r3
 8002a28:	f7ff f918 	bl	8001c5c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	4b3f      	ldr	r3, [pc, #252]	; (8002b30 <HAL_ADC_ConfigChannel+0x7bc>)
 8002a32:	4013      	ands	r3, r2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d071      	beq.n	8002b1c <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a38:	483e      	ldr	r0, [pc, #248]	; (8002b34 <HAL_ADC_ConfigChannel+0x7c0>)
 8002a3a:	f7ff f837 	bl	8001aac <LL_ADC_GetCommonPathInternalCh>
 8002a3e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a3c      	ldr	r2, [pc, #240]	; (8002b38 <HAL_ADC_ConfigChannel+0x7c4>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d004      	beq.n	8002a56 <HAL_ADC_ConfigChannel+0x6e2>
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a3a      	ldr	r2, [pc, #232]	; (8002b3c <HAL_ADC_ConfigChannel+0x7c8>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d127      	bne.n	8002aa6 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002a56:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d121      	bne.n	8002aa6 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a6a:	d157      	bne.n	8002b1c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a70:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a74:	4619      	mov	r1, r3
 8002a76:	482f      	ldr	r0, [pc, #188]	; (8002b34 <HAL_ADC_ConfigChannel+0x7c0>)
 8002a78:	f7ff f805 	bl	8001a86 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a7c:	4b30      	ldr	r3, [pc, #192]	; (8002b40 <HAL_ADC_ConfigChannel+0x7cc>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	099b      	lsrs	r3, r3, #6
 8002a82:	4a30      	ldr	r2, [pc, #192]	; (8002b44 <HAL_ADC_ConfigChannel+0x7d0>)
 8002a84:	fba2 2303 	umull	r2, r3, r2, r3
 8002a88:	099b      	lsrs	r3, r3, #6
 8002a8a:	1c5a      	adds	r2, r3, #1
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	005b      	lsls	r3, r3, #1
 8002a90:	4413      	add	r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002a96:	e002      	b.n	8002a9e <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d1f9      	bne.n	8002a98 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002aa4:	e03a      	b.n	8002b1c <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a27      	ldr	r2, [pc, #156]	; (8002b48 <HAL_ADC_ConfigChannel+0x7d4>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d113      	bne.n	8002ad8 <HAL_ADC_ConfigChannel+0x764>
 8002ab0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ab4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d10d      	bne.n	8002ad8 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a22      	ldr	r2, [pc, #136]	; (8002b4c <HAL_ADC_ConfigChannel+0x7d8>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d02a      	beq.n	8002b1c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ac6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002aca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ace:	4619      	mov	r1, r3
 8002ad0:	4818      	ldr	r0, [pc, #96]	; (8002b34 <HAL_ADC_ConfigChannel+0x7c0>)
 8002ad2:	f7fe ffd8 	bl	8001a86 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ad6:	e021      	b.n	8002b1c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a1c      	ldr	r2, [pc, #112]	; (8002b50 <HAL_ADC_ConfigChannel+0x7dc>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d11c      	bne.n	8002b1c <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002ae2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ae6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d116      	bne.n	8002b1c <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a16      	ldr	r2, [pc, #88]	; (8002b4c <HAL_ADC_ConfigChannel+0x7d8>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d011      	beq.n	8002b1c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002af8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002afc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b00:	4619      	mov	r1, r3
 8002b02:	480c      	ldr	r0, [pc, #48]	; (8002b34 <HAL_ADC_ConfigChannel+0x7c0>)
 8002b04:	f7fe ffbf 	bl	8001a86 <LL_ADC_SetCommonPathInternalCh>
 8002b08:	e008      	b.n	8002b1c <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b0e:	f043 0220 	orr.w	r2, r3, #32
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002b24:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	37d8      	adds	r7, #216	; 0xd8
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	80080000 	.word	0x80080000
 8002b34:	50000300 	.word	0x50000300
 8002b38:	c3210000 	.word	0xc3210000
 8002b3c:	90c00010 	.word	0x90c00010
 8002b40:	20000214 	.word	0x20000214
 8002b44:	053e2d63 	.word	0x053e2d63
 8002b48:	c7520000 	.word	0xc7520000
 8002b4c:	50000100 	.word	0x50000100
 8002b50:	cb840000 	.word	0xcb840000

08002b54 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7ff f953 	bl	8001e0c <LL_ADC_IsEnabled>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d14d      	bne.n	8002c08 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	689a      	ldr	r2, [r3, #8]
 8002b72:	4b28      	ldr	r3, [pc, #160]	; (8002c14 <ADC_Enable+0xc0>)
 8002b74:	4013      	ands	r3, r2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00d      	beq.n	8002b96 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b7e:	f043 0210 	orr.w	r2, r3, #16
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b8a:	f043 0201 	orr.w	r2, r3, #1
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e039      	b.n	8002c0a <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7ff f90e 	bl	8001dbc <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002ba0:	f7fe ff30 	bl	8001a04 <HAL_GetTick>
 8002ba4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ba6:	e028      	b.n	8002bfa <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7ff f92d 	bl	8001e0c <LL_ADC_IsEnabled>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d104      	bne.n	8002bc2 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f7ff f8fd 	bl	8001dbc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002bc2:	f7fe ff1f 	bl	8001a04 <HAL_GetTick>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d914      	bls.n	8002bfa <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d00d      	beq.n	8002bfa <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002be2:	f043 0210 	orr.w	r2, r3, #16
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bee:	f043 0201 	orr.w	r2, r3, #1
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e007      	b.n	8002c0a <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0301 	and.w	r3, r3, #1
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d1cf      	bne.n	8002ba8 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3710      	adds	r7, #16
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	8000003f 	.word	0x8000003f

08002c18 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7ff f904 	bl	8001e32 <LL_ADC_IsDisableOngoing>
 8002c2a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7ff f8eb 	bl	8001e0c <LL_ADC_IsEnabled>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d047      	beq.n	8002ccc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d144      	bne.n	8002ccc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f003 030d 	and.w	r3, r3, #13
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d10c      	bne.n	8002c6a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7ff f8c5 	bl	8001de4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2203      	movs	r2, #3
 8002c60:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002c62:	f7fe fecf 	bl	8001a04 <HAL_GetTick>
 8002c66:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002c68:	e029      	b.n	8002cbe <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c6e:	f043 0210 	orr.w	r2, r3, #16
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c7a:	f043 0201 	orr.w	r2, r3, #1
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e023      	b.n	8002cce <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002c86:	f7fe febd 	bl	8001a04 <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d914      	bls.n	8002cbe <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00d      	beq.n	8002cbe <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ca6:	f043 0210 	orr.w	r2, r3, #16
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cb2:	f043 0201 	orr.w	r2, r3, #1
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e007      	b.n	8002cce <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	f003 0301 	and.w	r3, r3, #1
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d1dc      	bne.n	8002c86 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3710      	adds	r7, #16
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <LL_ADC_IsEnabled>:
{
 8002cd6:	b480      	push	{r7}
 8002cd8:	b083      	sub	sp, #12
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f003 0301 	and.w	r3, r3, #1
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d101      	bne.n	8002cee <LL_ADC_IsEnabled+0x18>
 8002cea:	2301      	movs	r3, #1
 8002cec:	e000      	b.n	8002cf0 <LL_ADC_IsEnabled+0x1a>
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <LL_ADC_StartCalibration>:
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002d0e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d12:	683a      	ldr	r2, [r7, #0]
 8002d14:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	609a      	str	r2, [r3, #8]
}
 8002d22:	bf00      	nop
 8002d24:	370c      	adds	r7, #12
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr

08002d2e <LL_ADC_IsCalibrationOnGoing>:
{
 8002d2e:	b480      	push	{r7}
 8002d30:	b083      	sub	sp, #12
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d42:	d101      	bne.n	8002d48 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002d44:	2301      	movs	r3, #1
 8002d46:	e000      	b.n	8002d4a <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr

08002d56 <LL_ADC_REG_IsConversionOngoing>:
{
 8002d56:	b480      	push	{r7}
 8002d58:	b083      	sub	sp, #12
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f003 0304 	and.w	r3, r3, #4
 8002d66:	2b04      	cmp	r3, #4
 8002d68:	d101      	bne.n	8002d6e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e000      	b.n	8002d70 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d6e:	2300      	movs	r3, #0
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002d86:	2300      	movs	r3, #0
 8002d88:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d101      	bne.n	8002d98 <HAL_ADCEx_Calibration_Start+0x1c>
 8002d94:	2302      	movs	r3, #2
 8002d96:	e04d      	b.n	8002e34 <HAL_ADCEx_Calibration_Start+0xb8>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f7ff ff39 	bl	8002c18 <ADC_Disable>
 8002da6:	4603      	mov	r3, r0
 8002da8:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002daa:	7bfb      	ldrb	r3, [r7, #15]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d136      	bne.n	8002e1e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002db4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002db8:	f023 0302 	bic.w	r3, r3, #2
 8002dbc:	f043 0202 	orr.w	r2, r3, #2
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	6839      	ldr	r1, [r7, #0]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7ff ff96 	bl	8002cfc <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002dd0:	e014      	b.n	8002dfc <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	4a18      	ldr	r2, [pc, #96]	; (8002e3c <HAL_ADCEx_Calibration_Start+0xc0>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d90d      	bls.n	8002dfc <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002de4:	f023 0312 	bic.w	r3, r3, #18
 8002de8:	f043 0210 	orr.w	r2, r3, #16
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e01b      	b.n	8002e34 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7ff ff94 	bl	8002d2e <LL_ADC_IsCalibrationOnGoing>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d1e2      	bne.n	8002dd2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e10:	f023 0303 	bic.w	r3, r3, #3
 8002e14:	f043 0201 	orr.w	r2, r3, #1
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	65da      	str	r2, [r3, #92]	; 0x5c
 8002e1c:	e005      	b.n	8002e2a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e22:	f043 0210 	orr.w	r2, r3, #16
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3710      	adds	r7, #16
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	0004de01 	.word	0x0004de01

08002e40 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002e40:	b590      	push	{r4, r7, lr}
 8002e42:	b0a1      	sub	sp, #132	; 0x84
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d101      	bne.n	8002e5e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	e08b      	b.n	8002f76 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2201      	movs	r2, #1
 8002e62:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002e66:	2300      	movs	r3, #0
 8002e68:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e76:	d102      	bne.n	8002e7e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002e78:	4b41      	ldr	r3, [pc, #260]	; (8002f80 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002e7a:	60bb      	str	r3, [r7, #8]
 8002e7c:	e001      	b.n	8002e82 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002e7e:	2300      	movs	r3, #0
 8002e80:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d10b      	bne.n	8002ea0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e8c:	f043 0220 	orr.w	r2, r3, #32
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e06a      	b.n	8002f76 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7ff ff57 	bl	8002d56 <LL_ADC_REG_IsConversionOngoing>
 8002ea8:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7ff ff51 	bl	8002d56 <LL_ADC_REG_IsConversionOngoing>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d14c      	bne.n	8002f54 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002eba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d149      	bne.n	8002f54 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002ec0:	4b30      	ldr	r3, [pc, #192]	; (8002f84 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002ec2:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d028      	beq.n	8002f1e <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002ecc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	6859      	ldr	r1, [r3, #4]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002ede:	035b      	lsls	r3, r3, #13
 8002ee0:	430b      	orrs	r3, r1
 8002ee2:	431a      	orrs	r2, r3
 8002ee4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ee6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ee8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002eec:	f7ff fef3 	bl	8002cd6 <LL_ADC_IsEnabled>
 8002ef0:	4604      	mov	r4, r0
 8002ef2:	4823      	ldr	r0, [pc, #140]	; (8002f80 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002ef4:	f7ff feef 	bl	8002cd6 <LL_ADC_IsEnabled>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	4323      	orrs	r3, r4
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d133      	bne.n	8002f68 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002f00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002f08:	f023 030f 	bic.w	r3, r3, #15
 8002f0c:	683a      	ldr	r2, [r7, #0]
 8002f0e:	6811      	ldr	r1, [r2, #0]
 8002f10:	683a      	ldr	r2, [r7, #0]
 8002f12:	6892      	ldr	r2, [r2, #8]
 8002f14:	430a      	orrs	r2, r1
 8002f16:	431a      	orrs	r2, r3
 8002f18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f1a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f1c:	e024      	b.n	8002f68 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002f1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f28:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f2a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002f2e:	f7ff fed2 	bl	8002cd6 <LL_ADC_IsEnabled>
 8002f32:	4604      	mov	r4, r0
 8002f34:	4812      	ldr	r0, [pc, #72]	; (8002f80 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002f36:	f7ff fece 	bl	8002cd6 <LL_ADC_IsEnabled>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	4323      	orrs	r3, r4
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d112      	bne.n	8002f68 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002f42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002f4a:	f023 030f 	bic.w	r3, r3, #15
 8002f4e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002f50:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f52:	e009      	b.n	8002f68 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f58:	f043 0220 	orr.w	r2, r3, #32
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002f66:	e000      	b.n	8002f6a <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f68:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002f72:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3784      	adds	r7, #132	; 0x84
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd90      	pop	{r4, r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	50000100 	.word	0x50000100
 8002f84:	50000300 	.word	0x50000300

08002f88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b085      	sub	sp, #20
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f003 0307 	and.w	r3, r3, #7
 8002f96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f98:	4b0c      	ldr	r3, [pc, #48]	; (8002fcc <__NVIC_SetPriorityGrouping+0x44>)
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f9e:	68ba      	ldr	r2, [r7, #8]
 8002fa0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fba:	4a04      	ldr	r2, [pc, #16]	; (8002fcc <__NVIC_SetPriorityGrouping+0x44>)
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	60d3      	str	r3, [r2, #12]
}
 8002fc0:	bf00      	nop
 8002fc2:	3714      	adds	r7, #20
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr
 8002fcc:	e000ed00 	.word	0xe000ed00

08002fd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fd4:	4b04      	ldr	r3, [pc, #16]	; (8002fe8 <__NVIC_GetPriorityGrouping+0x18>)
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	0a1b      	lsrs	r3, r3, #8
 8002fda:	f003 0307 	and.w	r3, r3, #7
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr
 8002fe8:	e000ed00 	.word	0xe000ed00

08002fec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	db0b      	blt.n	8003016 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ffe:	79fb      	ldrb	r3, [r7, #7]
 8003000:	f003 021f 	and.w	r2, r3, #31
 8003004:	4907      	ldr	r1, [pc, #28]	; (8003024 <__NVIC_EnableIRQ+0x38>)
 8003006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800300a:	095b      	lsrs	r3, r3, #5
 800300c:	2001      	movs	r0, #1
 800300e:	fa00 f202 	lsl.w	r2, r0, r2
 8003012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003016:	bf00      	nop
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
 8003022:	bf00      	nop
 8003024:	e000e100 	.word	0xe000e100

08003028 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	4603      	mov	r3, r0
 8003030:	6039      	str	r1, [r7, #0]
 8003032:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003038:	2b00      	cmp	r3, #0
 800303a:	db0a      	blt.n	8003052 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	b2da      	uxtb	r2, r3
 8003040:	490c      	ldr	r1, [pc, #48]	; (8003074 <__NVIC_SetPriority+0x4c>)
 8003042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003046:	0112      	lsls	r2, r2, #4
 8003048:	b2d2      	uxtb	r2, r2
 800304a:	440b      	add	r3, r1
 800304c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003050:	e00a      	b.n	8003068 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	b2da      	uxtb	r2, r3
 8003056:	4908      	ldr	r1, [pc, #32]	; (8003078 <__NVIC_SetPriority+0x50>)
 8003058:	79fb      	ldrb	r3, [r7, #7]
 800305a:	f003 030f 	and.w	r3, r3, #15
 800305e:	3b04      	subs	r3, #4
 8003060:	0112      	lsls	r2, r2, #4
 8003062:	b2d2      	uxtb	r2, r2
 8003064:	440b      	add	r3, r1
 8003066:	761a      	strb	r2, [r3, #24]
}
 8003068:	bf00      	nop
 800306a:	370c      	adds	r7, #12
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr
 8003074:	e000e100 	.word	0xe000e100
 8003078:	e000ed00 	.word	0xe000ed00

0800307c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800307c:	b480      	push	{r7}
 800307e:	b089      	sub	sp, #36	; 0x24
 8003080:	af00      	add	r7, sp, #0
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	60b9      	str	r1, [r7, #8]
 8003086:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f003 0307 	and.w	r3, r3, #7
 800308e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	f1c3 0307 	rsb	r3, r3, #7
 8003096:	2b04      	cmp	r3, #4
 8003098:	bf28      	it	cs
 800309a:	2304      	movcs	r3, #4
 800309c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	3304      	adds	r3, #4
 80030a2:	2b06      	cmp	r3, #6
 80030a4:	d902      	bls.n	80030ac <NVIC_EncodePriority+0x30>
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	3b03      	subs	r3, #3
 80030aa:	e000      	b.n	80030ae <NVIC_EncodePriority+0x32>
 80030ac:	2300      	movs	r3, #0
 80030ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030b0:	f04f 32ff 	mov.w	r2, #4294967295
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ba:	43da      	mvns	r2, r3
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	401a      	ands	r2, r3
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030c4:	f04f 31ff 	mov.w	r1, #4294967295
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	fa01 f303 	lsl.w	r3, r1, r3
 80030ce:	43d9      	mvns	r1, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030d4:	4313      	orrs	r3, r2
         );
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3724      	adds	r7, #36	; 0x24
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
	...

080030e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	3b01      	subs	r3, #1
 80030f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030f4:	d301      	bcc.n	80030fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030f6:	2301      	movs	r3, #1
 80030f8:	e00f      	b.n	800311a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030fa:	4a0a      	ldr	r2, [pc, #40]	; (8003124 <SysTick_Config+0x40>)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	3b01      	subs	r3, #1
 8003100:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003102:	210f      	movs	r1, #15
 8003104:	f04f 30ff 	mov.w	r0, #4294967295
 8003108:	f7ff ff8e 	bl	8003028 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800310c:	4b05      	ldr	r3, [pc, #20]	; (8003124 <SysTick_Config+0x40>)
 800310e:	2200      	movs	r2, #0
 8003110:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003112:	4b04      	ldr	r3, [pc, #16]	; (8003124 <SysTick_Config+0x40>)
 8003114:	2207      	movs	r2, #7
 8003116:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3708      	adds	r7, #8
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	e000e010 	.word	0xe000e010

08003128 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f7ff ff29 	bl	8002f88 <__NVIC_SetPriorityGrouping>
}
 8003136:	bf00      	nop
 8003138:	3708      	adds	r7, #8
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}

0800313e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800313e:	b580      	push	{r7, lr}
 8003140:	b086      	sub	sp, #24
 8003142:	af00      	add	r7, sp, #0
 8003144:	4603      	mov	r3, r0
 8003146:	60b9      	str	r1, [r7, #8]
 8003148:	607a      	str	r2, [r7, #4]
 800314a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800314c:	f7ff ff40 	bl	8002fd0 <__NVIC_GetPriorityGrouping>
 8003150:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	68b9      	ldr	r1, [r7, #8]
 8003156:	6978      	ldr	r0, [r7, #20]
 8003158:	f7ff ff90 	bl	800307c <NVIC_EncodePriority>
 800315c:	4602      	mov	r2, r0
 800315e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003162:	4611      	mov	r1, r2
 8003164:	4618      	mov	r0, r3
 8003166:	f7ff ff5f 	bl	8003028 <__NVIC_SetPriority>
}
 800316a:	bf00      	nop
 800316c:	3718      	adds	r7, #24
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003172:	b580      	push	{r7, lr}
 8003174:	b082      	sub	sp, #8
 8003176:	af00      	add	r7, sp, #0
 8003178:	4603      	mov	r3, r0
 800317a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800317c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003180:	4618      	mov	r0, r3
 8003182:	f7ff ff33 	bl	8002fec <__NVIC_EnableIRQ>
}
 8003186:	bf00      	nop
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800318e:	b580      	push	{r7, lr}
 8003190:	b082      	sub	sp, #8
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f7ff ffa4 	bl	80030e4 <SysTick_Config>
 800319c:	4603      	mov	r3, r0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3708      	adds	r7, #8
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b082      	sub	sp, #8
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d101      	bne.n	80031b8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e014      	b.n	80031e2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	791b      	ldrb	r3, [r3, #4]
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d105      	bne.n	80031ce <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f7fe f9d7 	bl	800157c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2202      	movs	r2, #2
 80031d2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2201      	movs	r2, #1
 80031de:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3708      	adds	r7, #8
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
	...

080031ec <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b086      	sub	sp, #24
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	607a      	str	r2, [r7, #4]
 80031f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 80031fa:	2300      	movs	r3, #0
 80031fc:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	795b      	ldrb	r3, [r3, #5]
 8003202:	2b01      	cmp	r3, #1
 8003204:	d101      	bne.n	800320a <HAL_DAC_Start_DMA+0x1e>
 8003206:	2302      	movs	r3, #2
 8003208:	e0ae      	b.n	8003368 <HAL_DAC_Start_DMA+0x17c>
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2201      	movs	r2, #1
 800320e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2202      	movs	r2, #2
 8003214:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d12f      	bne.n	800327c <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	4a53      	ldr	r2, [pc, #332]	; (8003370 <HAL_DAC_Start_DMA+0x184>)
 8003222:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	4a52      	ldr	r2, [pc, #328]	; (8003374 <HAL_DAC_Start_DMA+0x188>)
 800322a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	4a51      	ldr	r2, [pc, #324]	; (8003378 <HAL_DAC_Start_DMA+0x18c>)
 8003232:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003242:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8003244:	6a3b      	ldr	r3, [r7, #32]
 8003246:	2b08      	cmp	r3, #8
 8003248:	d013      	beq.n	8003272 <HAL_DAC_Start_DMA+0x86>
 800324a:	6a3b      	ldr	r3, [r7, #32]
 800324c:	2b08      	cmp	r3, #8
 800324e:	d845      	bhi.n	80032dc <HAL_DAC_Start_DMA+0xf0>
 8003250:	6a3b      	ldr	r3, [r7, #32]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d003      	beq.n	800325e <HAL_DAC_Start_DMA+0x72>
 8003256:	6a3b      	ldr	r3, [r7, #32]
 8003258:	2b04      	cmp	r3, #4
 800325a:	d005      	beq.n	8003268 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 800325c:	e03e      	b.n	80032dc <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	3308      	adds	r3, #8
 8003264:	613b      	str	r3, [r7, #16]
        break;
 8003266:	e03c      	b.n	80032e2 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	330c      	adds	r3, #12
 800326e:	613b      	str	r3, [r7, #16]
        break;
 8003270:	e037      	b.n	80032e2 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	3310      	adds	r3, #16
 8003278:	613b      	str	r3, [r7, #16]
        break;
 800327a:	e032      	b.n	80032e2 <HAL_DAC_Start_DMA+0xf6>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	4a3e      	ldr	r2, [pc, #248]	; (800337c <HAL_DAC_Start_DMA+0x190>)
 8003282:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	4a3d      	ldr	r2, [pc, #244]	; (8003380 <HAL_DAC_Start_DMA+0x194>)
 800328a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	4a3c      	ldr	r2, [pc, #240]	; (8003384 <HAL_DAC_Start_DMA+0x198>)
 8003292:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80032a2:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80032a4:	6a3b      	ldr	r3, [r7, #32]
 80032a6:	2b08      	cmp	r3, #8
 80032a8:	d013      	beq.n	80032d2 <HAL_DAC_Start_DMA+0xe6>
 80032aa:	6a3b      	ldr	r3, [r7, #32]
 80032ac:	2b08      	cmp	r3, #8
 80032ae:	d817      	bhi.n	80032e0 <HAL_DAC_Start_DMA+0xf4>
 80032b0:	6a3b      	ldr	r3, [r7, #32]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d003      	beq.n	80032be <HAL_DAC_Start_DMA+0xd2>
 80032b6:	6a3b      	ldr	r3, [r7, #32]
 80032b8:	2b04      	cmp	r3, #4
 80032ba:	d005      	beq.n	80032c8 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80032bc:	e010      	b.n	80032e0 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	3314      	adds	r3, #20
 80032c4:	613b      	str	r3, [r7, #16]
        break;
 80032c6:	e00c      	b.n	80032e2 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	3318      	adds	r3, #24
 80032ce:	613b      	str	r3, [r7, #16]
        break;
 80032d0:	e007      	b.n	80032e2 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	331c      	adds	r3, #28
 80032d8:	613b      	str	r3, [r7, #16]
        break;
 80032da:	e002      	b.n	80032e2 <HAL_DAC_Start_DMA+0xf6>
        break;
 80032dc:	bf00      	nop
 80032de:	e000      	b.n	80032e2 <HAL_DAC_Start_DMA+0xf6>
        break;
 80032e0:	bf00      	nop
    }
  }


  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d111      	bne.n	800330c <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032f6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6898      	ldr	r0, [r3, #8]
 80032fc:	6879      	ldr	r1, [r7, #4]
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	693a      	ldr	r2, [r7, #16]
 8003302:	f000 fb39 	bl	8003978 <HAL_DMA_Start_IT>
 8003306:	4603      	mov	r3, r0
 8003308:	75fb      	strb	r3, [r7, #23]
 800330a:	e010      	b.n	800332e <HAL_DAC_Start_DMA+0x142>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800331a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	68d8      	ldr	r0, [r3, #12]
 8003320:	6879      	ldr	r1, [r7, #4]
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	693a      	ldr	r2, [r7, #16]
 8003326:	f000 fb27 	bl	8003978 <HAL_DMA_Start_IT>
 800332a:	4603      	mov	r3, r0
 800332c:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2200      	movs	r2, #0
 8003332:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8003334:	7dfb      	ldrb	r3, [r7, #23]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d10f      	bne.n	800335a <HAL_DAC_Start_DMA+0x16e>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	6819      	ldr	r1, [r3, #0]
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	f003 0310 	and.w	r3, r3, #16
 8003346:	2201      	movs	r2, #1
 8003348:	409a      	lsls	r2, r3
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	430a      	orrs	r2, r1
 8003350:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 8003352:	2001      	movs	r0, #1
 8003354:	f7fe fb62 	bl	8001a1c <HAL_Delay>
 8003358:	e005      	b.n	8003366 <HAL_DAC_Start_DMA+0x17a>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	f043 0204 	orr.w	r2, r3, #4
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8003366:	7dfb      	ldrb	r3, [r7, #23]
}
 8003368:	4618      	mov	r0, r3
 800336a:	3718      	adds	r7, #24
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	08003715 	.word	0x08003715
 8003374:	08003737 	.word	0x08003737
 8003378:	08003753 	.word	0x08003753
 800337c:	080037bd 	.word	0x080037bd
 8003380:	080037df 	.word	0x080037df
 8003384:	080037fb 	.word	0x080037fb

08003388 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8003390:	bf00      	nop
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr

0800339c <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80033a4:	bf00      	nop
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80033b8:	bf00      	nop
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b08a      	sub	sp, #40	; 0x28
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	795b      	ldrb	r3, [r3, #5]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d101      	bne.n	80033dc <HAL_DAC_ConfigChannel+0x18>
 80033d8:	2302      	movs	r3, #2
 80033da:	e192      	b.n	8003702 <HAL_DAC_ConfigChannel+0x33e>
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2201      	movs	r2, #1
 80033e0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2202      	movs	r2, #2
 80033e6:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	2b04      	cmp	r3, #4
 80033ee:	d174      	bne.n	80034da <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80033f0:	f7fe fb08 	bl	8001a04 <HAL_GetTick>
 80033f4:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d134      	bne.n	8003466 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80033fc:	e011      	b.n	8003422 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80033fe:	f7fe fb01 	bl	8001a04 <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	2b01      	cmp	r3, #1
 800340a:	d90a      	bls.n	8003422 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	691b      	ldr	r3, [r3, #16]
 8003410:	f043 0208 	orr.w	r2, r3, #8
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2203      	movs	r2, #3
 800341c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e16f      	b.n	8003702 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003428:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1e6      	bne.n	80033fe <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8003430:	2001      	movs	r0, #1
 8003432:	f7fe faf3 	bl	8001a1c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	68ba      	ldr	r2, [r7, #8]
 800343c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800343e:	641a      	str	r2, [r3, #64]	; 0x40
 8003440:	e01e      	b.n	8003480 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003442:	f7fe fadf 	bl	8001a04 <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	2b01      	cmp	r3, #1
 800344e:	d90a      	bls.n	8003466 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	f043 0208 	orr.w	r2, r3, #8
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2203      	movs	r2, #3
 8003460:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e14d      	b.n	8003702 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800346c:	2b00      	cmp	r3, #0
 800346e:	dbe8      	blt.n	8003442 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8003470:	2001      	movs	r0, #1
 8003472:	f7fe fad3 	bl	8001a1c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68ba      	ldr	r2, [r7, #8]
 800347c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800347e:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f003 0310 	and.w	r3, r3, #16
 800348c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003490:	fa01 f303 	lsl.w	r3, r1, r3
 8003494:	43db      	mvns	r3, r3
 8003496:	ea02 0103 	and.w	r1, r2, r3
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f003 0310 	and.w	r3, r3, #16
 80034a4:	409a      	lsls	r2, r3
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	430a      	orrs	r2, r1
 80034ac:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f003 0310 	and.w	r3, r3, #16
 80034ba:	21ff      	movs	r1, #255	; 0xff
 80034bc:	fa01 f303 	lsl.w	r3, r1, r3
 80034c0:	43db      	mvns	r3, r3
 80034c2:	ea02 0103 	and.w	r1, r2, r3
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f003 0310 	and.w	r3, r3, #16
 80034d0:	409a      	lsls	r2, r3
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	430a      	orrs	r2, r1
 80034d8:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	69db      	ldr	r3, [r3, #28]
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d11d      	bne.n	800351e <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f003 0310 	and.w	r3, r3, #16
 80034f0:	221f      	movs	r2, #31
 80034f2:	fa02 f303 	lsl.w	r3, r2, r3
 80034f6:	43db      	mvns	r3, r3
 80034f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034fa:	4013      	ands	r3, r2
 80034fc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	6a1b      	ldr	r3, [r3, #32]
 8003502:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f003 0310 	and.w	r3, r3, #16
 800350a:	69ba      	ldr	r2, [r7, #24]
 800350c:	fa02 f303 	lsl.w	r3, r2, r3
 8003510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003512:	4313      	orrs	r3, r2
 8003514:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800351c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003524:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f003 0310 	and.w	r3, r3, #16
 800352c:	2207      	movs	r2, #7
 800352e:	fa02 f303 	lsl.w	r3, r2, r3
 8003532:	43db      	mvns	r3, r3
 8003534:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003536:	4013      	ands	r3, r2
 8003538:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	699b      	ldr	r3, [r3, #24]
 800353e:	2b01      	cmp	r3, #1
 8003540:	d102      	bne.n	8003548 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8003542:	2300      	movs	r3, #0
 8003544:	623b      	str	r3, [r7, #32]
 8003546:	e00f      	b.n	8003568 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	699b      	ldr	r3, [r3, #24]
 800354c:	2b02      	cmp	r3, #2
 800354e:	d102      	bne.n	8003556 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003550:	2301      	movs	r3, #1
 8003552:	623b      	str	r3, [r7, #32]
 8003554:	e008      	b.n	8003568 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	695b      	ldr	r3, [r3, #20]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d102      	bne.n	8003564 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800355e:	2301      	movs	r3, #1
 8003560:	623b      	str	r3, [r7, #32]
 8003562:	e001      	b.n	8003568 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003564:	2300      	movs	r3, #0
 8003566:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	689a      	ldr	r2, [r3, #8]
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	695b      	ldr	r3, [r3, #20]
 8003570:	4313      	orrs	r3, r2
 8003572:	6a3a      	ldr	r2, [r7, #32]
 8003574:	4313      	orrs	r3, r2
 8003576:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f003 0310 	and.w	r3, r3, #16
 800357e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003582:	fa02 f303 	lsl.w	r3, r2, r3
 8003586:	43db      	mvns	r3, r3
 8003588:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800358a:	4013      	ands	r3, r2
 800358c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	791b      	ldrb	r3, [r3, #4]
 8003592:	2b01      	cmp	r3, #1
 8003594:	d102      	bne.n	800359c <HAL_DAC_ConfigChannel+0x1d8>
 8003596:	f44f 7380 	mov.w	r3, #256	; 0x100
 800359a:	e000      	b.n	800359e <HAL_DAC_ConfigChannel+0x1da>
 800359c:	2300      	movs	r3, #0
 800359e:	69ba      	ldr	r2, [r7, #24]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f003 0310 	and.w	r3, r3, #16
 80035aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035ae:	fa02 f303 	lsl.w	r3, r2, r3
 80035b2:	43db      	mvns	r3, r3
 80035b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035b6:	4013      	ands	r3, r2
 80035b8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	795b      	ldrb	r3, [r3, #5]
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d102      	bne.n	80035c8 <HAL_DAC_ConfigChannel+0x204>
 80035c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035c6:	e000      	b.n	80035ca <HAL_DAC_ConfigChannel+0x206>
 80035c8:	2300      	movs	r3, #0
 80035ca:	69ba      	ldr	r2, [r7, #24]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80035d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80035d6:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d114      	bne.n	800360a <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80035e0:	f001 ffc2 	bl	8005568 <HAL_RCC_GetHCLKFreq>
 80035e4:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	4a48      	ldr	r2, [pc, #288]	; (800370c <HAL_DAC_ConfigChannel+0x348>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d904      	bls.n	80035f8 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80035ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035f4:	627b      	str	r3, [r7, #36]	; 0x24
 80035f6:	e00f      	b.n	8003618 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	4a45      	ldr	r2, [pc, #276]	; (8003710 <HAL_DAC_ConfigChannel+0x34c>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d90a      	bls.n	8003616 <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8003600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003602:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003606:	627b      	str	r3, [r7, #36]	; 0x24
 8003608:	e006      	b.n	8003618 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003610:	4313      	orrs	r3, r2
 8003612:	627b      	str	r3, [r7, #36]	; 0x24
 8003614:	e000      	b.n	8003618 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8003616:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f003 0310 	and.w	r3, r3, #16
 800361e:	69ba      	ldr	r2, [r7, #24]
 8003620:	fa02 f303 	lsl.w	r3, r2, r3
 8003624:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003626:	4313      	orrs	r3, r2
 8003628:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003630:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	6819      	ldr	r1, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f003 0310 	and.w	r3, r3, #16
 800363e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003642:	fa02 f303 	lsl.w	r3, r2, r3
 8003646:	43da      	mvns	r2, r3
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	400a      	ands	r2, r1
 800364e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f003 0310 	and.w	r3, r3, #16
 800365e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003662:	fa02 f303 	lsl.w	r3, r2, r3
 8003666:	43db      	mvns	r3, r3
 8003668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800366a:	4013      	ands	r3, r2
 800366c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f003 0310 	and.w	r3, r3, #16
 800367a:	69ba      	ldr	r2, [r7, #24]
 800367c:	fa02 f303 	lsl.w	r3, r2, r3
 8003680:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003682:	4313      	orrs	r3, r2
 8003684:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800368c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	6819      	ldr	r1, [r3, #0]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f003 0310 	and.w	r3, r3, #16
 800369a:	22c0      	movs	r2, #192	; 0xc0
 800369c:	fa02 f303 	lsl.w	r3, r2, r3
 80036a0:	43da      	mvns	r2, r3
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	400a      	ands	r2, r1
 80036a8:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	089b      	lsrs	r3, r3, #2
 80036b0:	f003 030f 	and.w	r3, r3, #15
 80036b4:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	089b      	lsrs	r3, r3, #2
 80036bc:	021b      	lsls	r3, r3, #8
 80036be:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80036c2:	69ba      	ldr	r2, [r7, #24]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f003 0310 	and.w	r3, r3, #16
 80036d4:	f640 710f 	movw	r1, #3855	; 0xf0f
 80036d8:	fa01 f303 	lsl.w	r3, r1, r3
 80036dc:	43db      	mvns	r3, r3
 80036de:	ea02 0103 	and.w	r1, r2, r3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f003 0310 	and.w	r3, r3, #16
 80036e8:	69ba      	ldr	r2, [r7, #24]
 80036ea:	409a      	lsls	r2, r3
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	430a      	orrs	r2, r1
 80036f2:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2201      	movs	r2, #1
 80036f8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2200      	movs	r2, #0
 80036fe:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3728      	adds	r7, #40	; 0x28
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	09896800 	.word	0x09896800
 8003710:	04c4b400 	.word	0x04c4b400

08003714 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003720:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8003722:	68f8      	ldr	r0, [r7, #12]
 8003724:	f7ff fe30 	bl	8003388 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2201      	movs	r2, #1
 800372c:	711a      	strb	r2, [r3, #4]
}
 800372e:	bf00      	nop
 8003730:	3710      	adds	r7, #16
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}

08003736 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003736:	b580      	push	{r7, lr}
 8003738:	b084      	sub	sp, #16
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003742:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8003744:	68f8      	ldr	r0, [r7, #12]
 8003746:	f7ff fe29 	bl	800339c <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800374a:	bf00      	nop
 800374c:	3710      	adds	r7, #16
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}

08003752 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8003752:	b580      	push	{r7, lr}
 8003754:	b084      	sub	sp, #16
 8003756:	af00      	add	r7, sp, #0
 8003758:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800375e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	691b      	ldr	r3, [r3, #16]
 8003764:	f043 0204 	orr.w	r2, r3, #4
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800376c:	68f8      	ldr	r0, [r7, #12]
 800376e:	f7ff fe1f 	bl	80033b0 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2201      	movs	r2, #1
 8003776:	711a      	strb	r2, [r3, #4]
}
 8003778:	bf00      	nop
 800377a:	3710      	adds	r7, #16
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}

08003780 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8003788:	bf00      	nop
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800379c:	bf00      	nop
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80037b0:	bf00      	nop
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80037ca:	68f8      	ldr	r0, [r7, #12]
 80037cc:	f7ff ffd8 	bl	8003780 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2201      	movs	r2, #1
 80037d4:	711a      	strb	r2, [r3, #4]
}
 80037d6:	bf00      	nop
 80037d8:	3710      	adds	r7, #16
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}

080037de <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80037de:	b580      	push	{r7, lr}
 80037e0:	b084      	sub	sp, #16
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ea:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80037ec:	68f8      	ldr	r0, [r7, #12]
 80037ee:	f7ff ffd1 	bl	8003794 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80037f2:	bf00      	nop
 80037f4:	3710      	adds	r7, #16
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}

080037fa <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80037fa:	b580      	push	{r7, lr}
 80037fc:	b084      	sub	sp, #16
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003806:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	f043 0204 	orr.w	r2, r3, #4
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8003814:	68f8      	ldr	r0, [r7, #12]
 8003816:	f7ff ffc7 	bl	80037a8 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2201      	movs	r2, #1
 800381e:	711a      	strb	r2, [r3, #4]
}
 8003820:	bf00      	nop
 8003822:	3710      	adds	r7, #16
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d101      	bne.n	800383a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e08d      	b.n	8003956 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	461a      	mov	r2, r3
 8003840:	4b47      	ldr	r3, [pc, #284]	; (8003960 <HAL_DMA_Init+0x138>)
 8003842:	429a      	cmp	r2, r3
 8003844:	d80f      	bhi.n	8003866 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	461a      	mov	r2, r3
 800384c:	4b45      	ldr	r3, [pc, #276]	; (8003964 <HAL_DMA_Init+0x13c>)
 800384e:	4413      	add	r3, r2
 8003850:	4a45      	ldr	r2, [pc, #276]	; (8003968 <HAL_DMA_Init+0x140>)
 8003852:	fba2 2303 	umull	r2, r3, r2, r3
 8003856:	091b      	lsrs	r3, r3, #4
 8003858:	009a      	lsls	r2, r3, #2
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a42      	ldr	r2, [pc, #264]	; (800396c <HAL_DMA_Init+0x144>)
 8003862:	641a      	str	r2, [r3, #64]	; 0x40
 8003864:	e00e      	b.n	8003884 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	461a      	mov	r2, r3
 800386c:	4b40      	ldr	r3, [pc, #256]	; (8003970 <HAL_DMA_Init+0x148>)
 800386e:	4413      	add	r3, r2
 8003870:	4a3d      	ldr	r2, [pc, #244]	; (8003968 <HAL_DMA_Init+0x140>)
 8003872:	fba2 2303 	umull	r2, r3, r2, r3
 8003876:	091b      	lsrs	r3, r3, #4
 8003878:	009a      	lsls	r2, r3, #2
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a3c      	ldr	r2, [pc, #240]	; (8003974 <HAL_DMA_Init+0x14c>)
 8003882:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2202      	movs	r2, #2
 8003888:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800389a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800389e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80038a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	699b      	ldr	r3, [r3, #24]
 80038ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a1b      	ldr	r3, [r3, #32]
 80038c6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80038c8:	68fa      	ldr	r2, [r7, #12]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 f9b6 	bl	8003c48 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038e4:	d102      	bne.n	80038ec <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685a      	ldr	r2, [r3, #4]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038f4:	b2d2      	uxtb	r2, r2
 80038f6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003900:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d010      	beq.n	800392c <HAL_DMA_Init+0x104>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	2b04      	cmp	r3, #4
 8003910:	d80c      	bhi.n	800392c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 f9d6 	bl	8003cc4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800391c:	2200      	movs	r2, #0
 800391e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003928:	605a      	str	r2, [r3, #4]
 800392a:	e008      	b.n	800393e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	3710      	adds	r7, #16
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	40020407 	.word	0x40020407
 8003964:	bffdfff8 	.word	0xbffdfff8
 8003968:	cccccccd 	.word	0xcccccccd
 800396c:	40020000 	.word	0x40020000
 8003970:	bffdfbf8 	.word	0xbffdfbf8
 8003974:	40020400 	.word	0x40020400

08003978 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b086      	sub	sp, #24
 800397c:	af00      	add	r7, sp, #0
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	60b9      	str	r1, [r7, #8]
 8003982:	607a      	str	r2, [r7, #4]
 8003984:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003986:	2300      	movs	r3, #0
 8003988:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003990:	2b01      	cmp	r3, #1
 8003992:	d101      	bne.n	8003998 <HAL_DMA_Start_IT+0x20>
 8003994:	2302      	movs	r3, #2
 8003996:	e066      	b.n	8003a66 <HAL_DMA_Start_IT+0xee>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d155      	bne.n	8003a58 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2202      	movs	r2, #2
 80039b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2200      	movs	r2, #0
 80039b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f022 0201 	bic.w	r2, r2, #1
 80039c8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	68b9      	ldr	r1, [r7, #8]
 80039d0:	68f8      	ldr	r0, [r7, #12]
 80039d2:	f000 f8fb 	bl	8003bcc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d008      	beq.n	80039f0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f042 020e 	orr.w	r2, r2, #14
 80039ec:	601a      	str	r2, [r3, #0]
 80039ee:	e00f      	b.n	8003a10 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f022 0204 	bic.w	r2, r2, #4
 80039fe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f042 020a 	orr.w	r2, r2, #10
 8003a0e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d007      	beq.n	8003a2e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a2c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d007      	beq.n	8003a46 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a44:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f042 0201 	orr.w	r2, r2, #1
 8003a54:	601a      	str	r2, [r3, #0]
 8003a56:	e005      	b.n	8003a64 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003a60:	2302      	movs	r3, #2
 8003a62:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003a64:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3718      	adds	r7, #24
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}

08003a6e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a6e:	b580      	push	{r7, lr}
 8003a70:	b084      	sub	sp, #16
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a8a:	f003 031f 	and.w	r3, r3, #31
 8003a8e:	2204      	movs	r2, #4
 8003a90:	409a      	lsls	r2, r3
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	4013      	ands	r3, r2
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d026      	beq.n	8003ae8 <HAL_DMA_IRQHandler+0x7a>
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	f003 0304 	and.w	r3, r3, #4
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d021      	beq.n	8003ae8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0320 	and.w	r3, r3, #32
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d107      	bne.n	8003ac2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f022 0204 	bic.w	r2, r2, #4
 8003ac0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac6:	f003 021f 	and.w	r2, r3, #31
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ace:	2104      	movs	r1, #4
 8003ad0:	fa01 f202 	lsl.w	r2, r1, r2
 8003ad4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d071      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003ae6:	e06c      	b.n	8003bc2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aec:	f003 031f 	and.w	r3, r3, #31
 8003af0:	2202      	movs	r2, #2
 8003af2:	409a      	lsls	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	4013      	ands	r3, r2
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d02e      	beq.n	8003b5a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	f003 0302 	and.w	r3, r3, #2
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d029      	beq.n	8003b5a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0320 	and.w	r3, r3, #32
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d10b      	bne.n	8003b2c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f022 020a 	bic.w	r2, r2, #10
 8003b22:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b30:	f003 021f 	and.w	r2, r3, #31
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b38:	2102      	movs	r1, #2
 8003b3a:	fa01 f202 	lsl.w	r2, r1, r2
 8003b3e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d038      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003b58:	e033      	b.n	8003bc2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b5e:	f003 031f 	and.w	r3, r3, #31
 8003b62:	2208      	movs	r2, #8
 8003b64:	409a      	lsls	r2, r3
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	4013      	ands	r3, r2
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d02a      	beq.n	8003bc4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	f003 0308 	and.w	r3, r3, #8
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d025      	beq.n	8003bc4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f022 020e 	bic.w	r2, r2, #14
 8003b86:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b8c:	f003 021f 	and.w	r2, r3, #31
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b94:	2101      	movs	r1, #1
 8003b96:	fa01 f202 	lsl.w	r2, r1, r2
 8003b9a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d004      	beq.n	8003bc4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003bc2:	bf00      	nop
 8003bc4:	bf00      	nop
}
 8003bc6:	3710      	adds	r7, #16
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b085      	sub	sp, #20
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
 8003bd8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bde:	68fa      	ldr	r2, [r7, #12]
 8003be0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003be2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d004      	beq.n	8003bf6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bf0:	68fa      	ldr	r2, [r7, #12]
 8003bf2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003bf4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bfa:	f003 021f 	and.w	r2, r3, #31
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c02:	2101      	movs	r1, #1
 8003c04:	fa01 f202 	lsl.w	r2, r1, r2
 8003c08:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	683a      	ldr	r2, [r7, #0]
 8003c10:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	2b10      	cmp	r3, #16
 8003c18:	d108      	bne.n	8003c2c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68ba      	ldr	r2, [r7, #8]
 8003c28:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003c2a:	e007      	b.n	8003c3c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68ba      	ldr	r2, [r7, #8]
 8003c32:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	60da      	str	r2, [r3, #12]
}
 8003c3c:	bf00      	nop
 8003c3e:	3714      	adds	r7, #20
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b087      	sub	sp, #28
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	461a      	mov	r2, r3
 8003c56:	4b16      	ldr	r3, [pc, #88]	; (8003cb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d802      	bhi.n	8003c62 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003c5c:	4b15      	ldr	r3, [pc, #84]	; (8003cb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003c5e:	617b      	str	r3, [r7, #20]
 8003c60:	e001      	b.n	8003c66 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8003c62:	4b15      	ldr	r3, [pc, #84]	; (8003cb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003c64:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	3b08      	subs	r3, #8
 8003c72:	4a12      	ldr	r2, [pc, #72]	; (8003cbc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003c74:	fba2 2303 	umull	r2, r3, r2, r3
 8003c78:	091b      	lsrs	r3, r3, #4
 8003c7a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c80:	089b      	lsrs	r3, r3, #2
 8003c82:	009a      	lsls	r2, r3, #2
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	4413      	add	r3, r2
 8003c88:	461a      	mov	r2, r3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a0b      	ldr	r2, [pc, #44]	; (8003cc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003c92:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f003 031f 	and.w	r3, r3, #31
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	409a      	lsls	r2, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003ca2:	bf00      	nop
 8003ca4:	371c      	adds	r7, #28
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop
 8003cb0:	40020407 	.word	0x40020407
 8003cb4:	40020800 	.word	0x40020800
 8003cb8:	40020820 	.word	0x40020820
 8003cbc:	cccccccd 	.word	0xcccccccd
 8003cc0:	40020880 	.word	0x40020880

08003cc4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b085      	sub	sp, #20
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003cd4:	68fa      	ldr	r2, [r7, #12]
 8003cd6:	4b0b      	ldr	r3, [pc, #44]	; (8003d04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003cd8:	4413      	add	r3, r2
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	461a      	mov	r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a08      	ldr	r2, [pc, #32]	; (8003d08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003ce6:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	3b01      	subs	r3, #1
 8003cec:	f003 031f 	and.w	r3, r3, #31
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	409a      	lsls	r2, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003cf8:	bf00      	nop
 8003cfa:	3714      	adds	r7, #20
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr
 8003d04:	1000823f 	.word	0x1000823f
 8003d08:	40020940 	.word	0x40020940

08003d0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b087      	sub	sp, #28
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003d16:	2300      	movs	r3, #0
 8003d18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003d1a:	e15a      	b.n	8003fd2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	2101      	movs	r1, #1
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	fa01 f303 	lsl.w	r3, r1, r3
 8003d28:	4013      	ands	r3, r2
 8003d2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	f000 814c 	beq.w	8003fcc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f003 0303 	and.w	r3, r3, #3
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d005      	beq.n	8003d4c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d130      	bne.n	8003dae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	005b      	lsls	r3, r3, #1
 8003d56:	2203      	movs	r2, #3
 8003d58:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5c:	43db      	mvns	r3, r3
 8003d5e:	693a      	ldr	r2, [r7, #16]
 8003d60:	4013      	ands	r3, r2
 8003d62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	68da      	ldr	r2, [r3, #12]
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	005b      	lsls	r3, r3, #1
 8003d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d70:	693a      	ldr	r2, [r7, #16]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	693a      	ldr	r2, [r7, #16]
 8003d7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003d82:	2201      	movs	r2, #1
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8a:	43db      	mvns	r3, r3
 8003d8c:	693a      	ldr	r2, [r7, #16]
 8003d8e:	4013      	ands	r3, r2
 8003d90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	091b      	lsrs	r3, r3, #4
 8003d98:	f003 0201 	and.w	r2, r3, #1
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	693a      	ldr	r2, [r7, #16]
 8003dac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	f003 0303 	and.w	r3, r3, #3
 8003db6:	2b03      	cmp	r3, #3
 8003db8:	d017      	beq.n	8003dea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	005b      	lsls	r3, r3, #1
 8003dc4:	2203      	movs	r2, #3
 8003dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dca:	43db      	mvns	r3, r3
 8003dcc:	693a      	ldr	r2, [r7, #16]
 8003dce:	4013      	ands	r3, r2
 8003dd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	689a      	ldr	r2, [r3, #8]
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	005b      	lsls	r3, r3, #1
 8003dda:	fa02 f303 	lsl.w	r3, r2, r3
 8003dde:	693a      	ldr	r2, [r7, #16]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	693a      	ldr	r2, [r7, #16]
 8003de8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	f003 0303 	and.w	r3, r3, #3
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d123      	bne.n	8003e3e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	08da      	lsrs	r2, r3, #3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	3208      	adds	r2, #8
 8003dfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e02:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	f003 0307 	and.w	r3, r3, #7
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	220f      	movs	r2, #15
 8003e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e12:	43db      	mvns	r3, r3
 8003e14:	693a      	ldr	r2, [r7, #16]
 8003e16:	4013      	ands	r3, r2
 8003e18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	691a      	ldr	r2, [r3, #16]
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	f003 0307 	and.w	r3, r3, #7
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2a:	693a      	ldr	r2, [r7, #16]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	08da      	lsrs	r2, r3, #3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	3208      	adds	r2, #8
 8003e38:	6939      	ldr	r1, [r7, #16]
 8003e3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	005b      	lsls	r3, r3, #1
 8003e48:	2203      	movs	r2, #3
 8003e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4e:	43db      	mvns	r3, r3
 8003e50:	693a      	ldr	r2, [r7, #16]
 8003e52:	4013      	ands	r3, r2
 8003e54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	f003 0203 	and.w	r2, r3, #3
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	005b      	lsls	r3, r3, #1
 8003e62:	fa02 f303 	lsl.w	r3, r2, r3
 8003e66:	693a      	ldr	r2, [r7, #16]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	693a      	ldr	r2, [r7, #16]
 8003e70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	f000 80a6 	beq.w	8003fcc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e80:	4b5b      	ldr	r3, [pc, #364]	; (8003ff0 <HAL_GPIO_Init+0x2e4>)
 8003e82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e84:	4a5a      	ldr	r2, [pc, #360]	; (8003ff0 <HAL_GPIO_Init+0x2e4>)
 8003e86:	f043 0301 	orr.w	r3, r3, #1
 8003e8a:	6613      	str	r3, [r2, #96]	; 0x60
 8003e8c:	4b58      	ldr	r3, [pc, #352]	; (8003ff0 <HAL_GPIO_Init+0x2e4>)
 8003e8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e90:	f003 0301 	and.w	r3, r3, #1
 8003e94:	60bb      	str	r3, [r7, #8]
 8003e96:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e98:	4a56      	ldr	r2, [pc, #344]	; (8003ff4 <HAL_GPIO_Init+0x2e8>)
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	089b      	lsrs	r3, r3, #2
 8003e9e:	3302      	adds	r3, #2
 8003ea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ea4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	f003 0303 	and.w	r3, r3, #3
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	220f      	movs	r2, #15
 8003eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb4:	43db      	mvns	r3, r3
 8003eb6:	693a      	ldr	r2, [r7, #16]
 8003eb8:	4013      	ands	r3, r2
 8003eba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003ec2:	d01f      	beq.n	8003f04 <HAL_GPIO_Init+0x1f8>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4a4c      	ldr	r2, [pc, #304]	; (8003ff8 <HAL_GPIO_Init+0x2ec>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d019      	beq.n	8003f00 <HAL_GPIO_Init+0x1f4>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4a4b      	ldr	r2, [pc, #300]	; (8003ffc <HAL_GPIO_Init+0x2f0>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d013      	beq.n	8003efc <HAL_GPIO_Init+0x1f0>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4a4a      	ldr	r2, [pc, #296]	; (8004000 <HAL_GPIO_Init+0x2f4>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d00d      	beq.n	8003ef8 <HAL_GPIO_Init+0x1ec>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	4a49      	ldr	r2, [pc, #292]	; (8004004 <HAL_GPIO_Init+0x2f8>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d007      	beq.n	8003ef4 <HAL_GPIO_Init+0x1e8>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4a48      	ldr	r2, [pc, #288]	; (8004008 <HAL_GPIO_Init+0x2fc>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d101      	bne.n	8003ef0 <HAL_GPIO_Init+0x1e4>
 8003eec:	2305      	movs	r3, #5
 8003eee:	e00a      	b.n	8003f06 <HAL_GPIO_Init+0x1fa>
 8003ef0:	2306      	movs	r3, #6
 8003ef2:	e008      	b.n	8003f06 <HAL_GPIO_Init+0x1fa>
 8003ef4:	2304      	movs	r3, #4
 8003ef6:	e006      	b.n	8003f06 <HAL_GPIO_Init+0x1fa>
 8003ef8:	2303      	movs	r3, #3
 8003efa:	e004      	b.n	8003f06 <HAL_GPIO_Init+0x1fa>
 8003efc:	2302      	movs	r3, #2
 8003efe:	e002      	b.n	8003f06 <HAL_GPIO_Init+0x1fa>
 8003f00:	2301      	movs	r3, #1
 8003f02:	e000      	b.n	8003f06 <HAL_GPIO_Init+0x1fa>
 8003f04:	2300      	movs	r3, #0
 8003f06:	697a      	ldr	r2, [r7, #20]
 8003f08:	f002 0203 	and.w	r2, r2, #3
 8003f0c:	0092      	lsls	r2, r2, #2
 8003f0e:	4093      	lsls	r3, r2
 8003f10:	693a      	ldr	r2, [r7, #16]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f16:	4937      	ldr	r1, [pc, #220]	; (8003ff4 <HAL_GPIO_Init+0x2e8>)
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	089b      	lsrs	r3, r3, #2
 8003f1c:	3302      	adds	r3, #2
 8003f1e:	693a      	ldr	r2, [r7, #16]
 8003f20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003f24:	4b39      	ldr	r3, [pc, #228]	; (800400c <HAL_GPIO_Init+0x300>)
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	43db      	mvns	r3, r3
 8003f2e:	693a      	ldr	r2, [r7, #16]
 8003f30:	4013      	ands	r3, r2
 8003f32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d003      	beq.n	8003f48 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003f40:	693a      	ldr	r2, [r7, #16]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003f48:	4a30      	ldr	r2, [pc, #192]	; (800400c <HAL_GPIO_Init+0x300>)
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003f4e:	4b2f      	ldr	r3, [pc, #188]	; (800400c <HAL_GPIO_Init+0x300>)
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	43db      	mvns	r3, r3
 8003f58:	693a      	ldr	r2, [r7, #16]
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d003      	beq.n	8003f72 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003f6a:	693a      	ldr	r2, [r7, #16]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003f72:	4a26      	ldr	r2, [pc, #152]	; (800400c <HAL_GPIO_Init+0x300>)
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003f78:	4b24      	ldr	r3, [pc, #144]	; (800400c <HAL_GPIO_Init+0x300>)
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	43db      	mvns	r3, r3
 8003f82:	693a      	ldr	r2, [r7, #16]
 8003f84:	4013      	ands	r3, r2
 8003f86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d003      	beq.n	8003f9c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003f94:	693a      	ldr	r2, [r7, #16]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003f9c:	4a1b      	ldr	r2, [pc, #108]	; (800400c <HAL_GPIO_Init+0x300>)
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003fa2:	4b1a      	ldr	r3, [pc, #104]	; (800400c <HAL_GPIO_Init+0x300>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	43db      	mvns	r3, r3
 8003fac:	693a      	ldr	r2, [r7, #16]
 8003fae:	4013      	ands	r3, r2
 8003fb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d003      	beq.n	8003fc6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003fbe:	693a      	ldr	r2, [r7, #16]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003fc6:	4a11      	ldr	r2, [pc, #68]	; (800400c <HAL_GPIO_Init+0x300>)
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	3301      	adds	r3, #1
 8003fd0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	fa22 f303 	lsr.w	r3, r2, r3
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	f47f ae9d 	bne.w	8003d1c <HAL_GPIO_Init+0x10>
  }
}
 8003fe2:	bf00      	nop
 8003fe4:	bf00      	nop
 8003fe6:	371c      	adds	r7, #28
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr
 8003ff0:	40021000 	.word	0x40021000
 8003ff4:	40010000 	.word	0x40010000
 8003ff8:	48000400 	.word	0x48000400
 8003ffc:	48000800 	.word	0x48000800
 8004000:	48000c00 	.word	0x48000c00
 8004004:	48001000 	.word	0x48001000
 8004008:	48001400 	.word	0x48001400
 800400c:	40010400 	.word	0x40010400

08004010 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004010:	b480      	push	{r7}
 8004012:	b085      	sub	sp, #20
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	460b      	mov	r3, r1
 800401a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	691a      	ldr	r2, [r3, #16]
 8004020:	887b      	ldrh	r3, [r7, #2]
 8004022:	4013      	ands	r3, r2
 8004024:	2b00      	cmp	r3, #0
 8004026:	d002      	beq.n	800402e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004028:	2301      	movs	r3, #1
 800402a:	73fb      	strb	r3, [r7, #15]
 800402c:	e001      	b.n	8004032 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800402e:	2300      	movs	r3, #0
 8004030:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004032:	7bfb      	ldrb	r3, [r7, #15]
}
 8004034:	4618      	mov	r0, r3
 8004036:	3714      	adds	r7, #20
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	460b      	mov	r3, r1
 800404a:	807b      	strh	r3, [r7, #2]
 800404c:	4613      	mov	r3, r2
 800404e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004050:	787b      	ldrb	r3, [r7, #1]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d003      	beq.n	800405e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004056:	887a      	ldrh	r2, [r7, #2]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800405c:	e002      	b.n	8004064 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800405e:	887a      	ldrh	r2, [r7, #2]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004064:	bf00      	nop
 8004066:	370c      	adds	r7, #12
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d101      	bne.n	8004082 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e081      	b.n	8004186 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004088:	b2db      	uxtb	r3, r3
 800408a:	2b00      	cmp	r3, #0
 800408c:	d106      	bne.n	800409c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f7fd fade 	bl	8001658 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2224      	movs	r2, #36	; 0x24
 80040a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f022 0201 	bic.w	r2, r2, #1
 80040b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	685a      	ldr	r2, [r3, #4]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80040c0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	689a      	ldr	r2, [r3, #8]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80040d0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d107      	bne.n	80040ea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	689a      	ldr	r2, [r3, #8]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040e6:	609a      	str	r2, [r3, #8]
 80040e8:	e006      	b.n	80040f8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	689a      	ldr	r2, [r3, #8]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80040f6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d104      	bne.n	800410a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004108:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	6812      	ldr	r2, [r2, #0]
 8004114:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004118:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800411c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68da      	ldr	r2, [r3, #12]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800412c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	691a      	ldr	r2, [r3, #16]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	699b      	ldr	r3, [r3, #24]
 800413e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	430a      	orrs	r2, r1
 8004146:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	69d9      	ldr	r1, [r3, #28]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6a1a      	ldr	r2, [r3, #32]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	430a      	orrs	r2, r1
 8004156:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f042 0201 	orr.w	r2, r2, #1
 8004166:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2220      	movs	r2, #32
 8004172:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004184:	2300      	movs	r3, #0
}
 8004186:	4618      	mov	r0, r3
 8004188:	3708      	adds	r7, #8
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
	...

08004190 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b088      	sub	sp, #32
 8004194:	af02      	add	r7, sp, #8
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	607a      	str	r2, [r7, #4]
 800419a:	461a      	mov	r2, r3
 800419c:	460b      	mov	r3, r1
 800419e:	817b      	strh	r3, [r7, #10]
 80041a0:	4613      	mov	r3, r2
 80041a2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	2b20      	cmp	r3, #32
 80041ae:	f040 80da 	bne.w	8004366 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d101      	bne.n	80041c0 <HAL_I2C_Master_Transmit+0x30>
 80041bc:	2302      	movs	r3, #2
 80041be:	e0d3      	b.n	8004368 <HAL_I2C_Master_Transmit+0x1d8>
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80041c8:	f7fd fc1c 	bl	8001a04 <HAL_GetTick>
 80041cc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	9300      	str	r3, [sp, #0]
 80041d2:	2319      	movs	r3, #25
 80041d4:	2201      	movs	r2, #1
 80041d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80041da:	68f8      	ldr	r0, [r7, #12]
 80041dc:	f000 f9f7 	bl	80045ce <I2C_WaitOnFlagUntilTimeout>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d001      	beq.n	80041ea <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e0be      	b.n	8004368 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2221      	movs	r2, #33	; 0x21
 80041ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2210      	movs	r2, #16
 80041f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2200      	movs	r2, #0
 80041fe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	893a      	ldrh	r2, [r7, #8]
 800420a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2200      	movs	r2, #0
 8004210:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004216:	b29b      	uxth	r3, r3
 8004218:	2bff      	cmp	r3, #255	; 0xff
 800421a:	d90e      	bls.n	800423a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	22ff      	movs	r2, #255	; 0xff
 8004220:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004226:	b2da      	uxtb	r2, r3
 8004228:	8979      	ldrh	r1, [r7, #10]
 800422a:	4b51      	ldr	r3, [pc, #324]	; (8004370 <HAL_I2C_Master_Transmit+0x1e0>)
 800422c:	9300      	str	r3, [sp, #0]
 800422e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004232:	68f8      	ldr	r0, [r7, #12]
 8004234:	f000 fb74 	bl	8004920 <I2C_TransferConfig>
 8004238:	e06c      	b.n	8004314 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800423e:	b29a      	uxth	r2, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004248:	b2da      	uxtb	r2, r3
 800424a:	8979      	ldrh	r1, [r7, #10]
 800424c:	4b48      	ldr	r3, [pc, #288]	; (8004370 <HAL_I2C_Master_Transmit+0x1e0>)
 800424e:	9300      	str	r3, [sp, #0]
 8004250:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004254:	68f8      	ldr	r0, [r7, #12]
 8004256:	f000 fb63 	bl	8004920 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800425a:	e05b      	b.n	8004314 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800425c:	697a      	ldr	r2, [r7, #20]
 800425e:	6a39      	ldr	r1, [r7, #32]
 8004260:	68f8      	ldr	r0, [r7, #12]
 8004262:	f000 f9f4 	bl	800464e <I2C_WaitOnTXISFlagUntilTimeout>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d001      	beq.n	8004270 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e07b      	b.n	8004368 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004274:	781a      	ldrb	r2, [r3, #0]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004280:	1c5a      	adds	r2, r3, #1
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800428a:	b29b      	uxth	r3, r3
 800428c:	3b01      	subs	r3, #1
 800428e:	b29a      	uxth	r2, r3
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004298:	3b01      	subs	r3, #1
 800429a:	b29a      	uxth	r2, r3
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d034      	beq.n	8004314 <HAL_I2C_Master_Transmit+0x184>
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d130      	bne.n	8004314 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	9300      	str	r3, [sp, #0]
 80042b6:	6a3b      	ldr	r3, [r7, #32]
 80042b8:	2200      	movs	r2, #0
 80042ba:	2180      	movs	r1, #128	; 0x80
 80042bc:	68f8      	ldr	r0, [r7, #12]
 80042be:	f000 f986 	bl	80045ce <I2C_WaitOnFlagUntilTimeout>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d001      	beq.n	80042cc <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e04d      	b.n	8004368 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	2bff      	cmp	r3, #255	; 0xff
 80042d4:	d90e      	bls.n	80042f4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	22ff      	movs	r2, #255	; 0xff
 80042da:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042e0:	b2da      	uxtb	r2, r3
 80042e2:	8979      	ldrh	r1, [r7, #10]
 80042e4:	2300      	movs	r3, #0
 80042e6:	9300      	str	r3, [sp, #0]
 80042e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80042ec:	68f8      	ldr	r0, [r7, #12]
 80042ee:	f000 fb17 	bl	8004920 <I2C_TransferConfig>
 80042f2:	e00f      	b.n	8004314 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f8:	b29a      	uxth	r2, r3
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004302:	b2da      	uxtb	r2, r3
 8004304:	8979      	ldrh	r1, [r7, #10]
 8004306:	2300      	movs	r3, #0
 8004308:	9300      	str	r3, [sp, #0]
 800430a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800430e:	68f8      	ldr	r0, [r7, #12]
 8004310:	f000 fb06 	bl	8004920 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004318:	b29b      	uxth	r3, r3
 800431a:	2b00      	cmp	r3, #0
 800431c:	d19e      	bne.n	800425c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800431e:	697a      	ldr	r2, [r7, #20]
 8004320:	6a39      	ldr	r1, [r7, #32]
 8004322:	68f8      	ldr	r0, [r7, #12]
 8004324:	f000 f9d3 	bl	80046ce <I2C_WaitOnSTOPFlagUntilTimeout>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d001      	beq.n	8004332 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e01a      	b.n	8004368 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2220      	movs	r2, #32
 8004338:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	6859      	ldr	r1, [r3, #4]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	4b0b      	ldr	r3, [pc, #44]	; (8004374 <HAL_I2C_Master_Transmit+0x1e4>)
 8004346:	400b      	ands	r3, r1
 8004348:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2220      	movs	r2, #32
 800434e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2200      	movs	r2, #0
 8004356:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004362:	2300      	movs	r3, #0
 8004364:	e000      	b.n	8004368 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004366:	2302      	movs	r3, #2
  }
}
 8004368:	4618      	mov	r0, r3
 800436a:	3718      	adds	r7, #24
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}
 8004370:	80002000 	.word	0x80002000
 8004374:	fe00e800 	.word	0xfe00e800

08004378 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b08a      	sub	sp, #40	; 0x28
 800437c:	af02      	add	r7, sp, #8
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	607a      	str	r2, [r7, #4]
 8004382:	603b      	str	r3, [r7, #0]
 8004384:	460b      	mov	r3, r1
 8004386:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8004388:	2300      	movs	r3, #0
 800438a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004392:	b2db      	uxtb	r3, r3
 8004394:	2b20      	cmp	r3, #32
 8004396:	f040 80f1 	bne.w	800457c <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	699b      	ldr	r3, [r3, #24]
 80043a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043a8:	d101      	bne.n	80043ae <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80043aa:	2302      	movs	r3, #2
 80043ac:	e0e7      	b.n	800457e <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d101      	bne.n	80043bc <HAL_I2C_IsDeviceReady+0x44>
 80043b8:	2302      	movs	r3, #2
 80043ba:	e0e0      	b.n	800457e <HAL_I2C_IsDeviceReady+0x206>
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2224      	movs	r2, #36	; 0x24
 80043c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d107      	bne.n	80043ea <HAL_I2C_IsDeviceReady+0x72>
 80043da:	897b      	ldrh	r3, [r7, #10]
 80043dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80043e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80043e8:	e004      	b.n	80043f4 <HAL_I2C_IsDeviceReady+0x7c>
 80043ea:	897b      	ldrh	r3, [r7, #10]
 80043ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043f0:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80043f4:	68fa      	ldr	r2, [r7, #12]
 80043f6:	6812      	ldr	r2, [r2, #0]
 80043f8:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80043fa:	f7fd fb03 	bl	8001a04 <HAL_GetTick>
 80043fe:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	699b      	ldr	r3, [r3, #24]
 8004406:	f003 0320 	and.w	r3, r3, #32
 800440a:	2b20      	cmp	r3, #32
 800440c:	bf0c      	ite	eq
 800440e:	2301      	moveq	r3, #1
 8004410:	2300      	movne	r3, #0
 8004412:	b2db      	uxtb	r3, r3
 8004414:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	699b      	ldr	r3, [r3, #24]
 800441c:	f003 0310 	and.w	r3, r3, #16
 8004420:	2b10      	cmp	r3, #16
 8004422:	bf0c      	ite	eq
 8004424:	2301      	moveq	r3, #1
 8004426:	2300      	movne	r3, #0
 8004428:	b2db      	uxtb	r3, r3
 800442a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800442c:	e034      	b.n	8004498 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004434:	d01a      	beq.n	800446c <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004436:	f7fd fae5 	bl	8001a04 <HAL_GetTick>
 800443a:	4602      	mov	r2, r0
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	683a      	ldr	r2, [r7, #0]
 8004442:	429a      	cmp	r2, r3
 8004444:	d302      	bcc.n	800444c <HAL_I2C_IsDeviceReady+0xd4>
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d10f      	bne.n	800446c <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2220      	movs	r2, #32
 8004450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004458:	f043 0220 	orr.w	r2, r3, #32
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2200      	movs	r2, #0
 8004464:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e088      	b.n	800457e <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	699b      	ldr	r3, [r3, #24]
 8004472:	f003 0320 	and.w	r3, r3, #32
 8004476:	2b20      	cmp	r3, #32
 8004478:	bf0c      	ite	eq
 800447a:	2301      	moveq	r3, #1
 800447c:	2300      	movne	r3, #0
 800447e:	b2db      	uxtb	r3, r3
 8004480:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	699b      	ldr	r3, [r3, #24]
 8004488:	f003 0310 	and.w	r3, r3, #16
 800448c:	2b10      	cmp	r3, #16
 800448e:	bf0c      	ite	eq
 8004490:	2301      	moveq	r3, #1
 8004492:	2300      	movne	r3, #0
 8004494:	b2db      	uxtb	r3, r3
 8004496:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004498:	7ffb      	ldrb	r3, [r7, #31]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d102      	bne.n	80044a4 <HAL_I2C_IsDeviceReady+0x12c>
 800449e:	7fbb      	ldrb	r3, [r7, #30]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d0c4      	beq.n	800442e <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	699b      	ldr	r3, [r3, #24]
 80044aa:	f003 0310 	and.w	r3, r3, #16
 80044ae:	2b10      	cmp	r3, #16
 80044b0:	d01a      	beq.n	80044e8 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80044b2:	69bb      	ldr	r3, [r7, #24]
 80044b4:	9300      	str	r3, [sp, #0]
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	2200      	movs	r2, #0
 80044ba:	2120      	movs	r1, #32
 80044bc:	68f8      	ldr	r0, [r7, #12]
 80044be:	f000 f886 	bl	80045ce <I2C_WaitOnFlagUntilTimeout>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d001      	beq.n	80044cc <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e058      	b.n	800457e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2220      	movs	r2, #32
 80044d2:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2220      	movs	r2, #32
 80044d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2200      	movs	r2, #0
 80044e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80044e4:	2300      	movs	r3, #0
 80044e6:	e04a      	b.n	800457e <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80044e8:	69bb      	ldr	r3, [r7, #24]
 80044ea:	9300      	str	r3, [sp, #0]
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	2200      	movs	r2, #0
 80044f0:	2120      	movs	r1, #32
 80044f2:	68f8      	ldr	r0, [r7, #12]
 80044f4:	f000 f86b 	bl	80045ce <I2C_WaitOnFlagUntilTimeout>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d001      	beq.n	8004502 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e03d      	b.n	800457e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	2210      	movs	r2, #16
 8004508:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2220      	movs	r2, #32
 8004510:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	429a      	cmp	r2, r3
 8004518:	d118      	bne.n	800454c <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	685a      	ldr	r2, [r3, #4]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004528:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	9300      	str	r3, [sp, #0]
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	2200      	movs	r2, #0
 8004532:	2120      	movs	r1, #32
 8004534:	68f8      	ldr	r0, [r7, #12]
 8004536:	f000 f84a 	bl	80045ce <I2C_WaitOnFlagUntilTimeout>
 800453a:	4603      	mov	r3, r0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d001      	beq.n	8004544 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e01c      	b.n	800457e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2220      	movs	r2, #32
 800454a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	3301      	adds	r3, #1
 8004550:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	429a      	cmp	r2, r3
 8004558:	f63f af3b 	bhi.w	80043d2 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2220      	movs	r2, #32
 8004560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004568:	f043 0220 	orr.w	r2, r3, #32
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2200      	movs	r2, #0
 8004574:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e000      	b.n	800457e <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 800457c:	2302      	movs	r3, #2
  }
}
 800457e:	4618      	mov	r0, r3
 8004580:	3720      	adds	r7, #32
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}

08004586 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004586:	b480      	push	{r7}
 8004588:	b083      	sub	sp, #12
 800458a:	af00      	add	r7, sp, #0
 800458c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	699b      	ldr	r3, [r3, #24]
 8004594:	f003 0302 	and.w	r3, r3, #2
 8004598:	2b02      	cmp	r3, #2
 800459a:	d103      	bne.n	80045a4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2200      	movs	r2, #0
 80045a2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	699b      	ldr	r3, [r3, #24]
 80045aa:	f003 0301 	and.w	r3, r3, #1
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d007      	beq.n	80045c2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	699a      	ldr	r2, [r3, #24]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f042 0201 	orr.w	r2, r2, #1
 80045c0:	619a      	str	r2, [r3, #24]
  }
}
 80045c2:	bf00      	nop
 80045c4:	370c      	adds	r7, #12
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr

080045ce <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80045ce:	b580      	push	{r7, lr}
 80045d0:	b084      	sub	sp, #16
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	60f8      	str	r0, [r7, #12]
 80045d6:	60b9      	str	r1, [r7, #8]
 80045d8:	603b      	str	r3, [r7, #0]
 80045da:	4613      	mov	r3, r2
 80045dc:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045de:	e022      	b.n	8004626 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045e6:	d01e      	beq.n	8004626 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045e8:	f7fd fa0c 	bl	8001a04 <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	683a      	ldr	r2, [r7, #0]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d302      	bcc.n	80045fe <I2C_WaitOnFlagUntilTimeout+0x30>
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d113      	bne.n	8004626 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004602:	f043 0220 	orr.w	r2, r3, #32
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2220      	movs	r2, #32
 800460e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2200      	movs	r2, #0
 8004616:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e00f      	b.n	8004646 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	699a      	ldr	r2, [r3, #24]
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	4013      	ands	r3, r2
 8004630:	68ba      	ldr	r2, [r7, #8]
 8004632:	429a      	cmp	r2, r3
 8004634:	bf0c      	ite	eq
 8004636:	2301      	moveq	r3, #1
 8004638:	2300      	movne	r3, #0
 800463a:	b2db      	uxtb	r3, r3
 800463c:	461a      	mov	r2, r3
 800463e:	79fb      	ldrb	r3, [r7, #7]
 8004640:	429a      	cmp	r2, r3
 8004642:	d0cd      	beq.n	80045e0 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	3710      	adds	r7, #16
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}

0800464e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800464e:	b580      	push	{r7, lr}
 8004650:	b084      	sub	sp, #16
 8004652:	af00      	add	r7, sp, #0
 8004654:	60f8      	str	r0, [r7, #12]
 8004656:	60b9      	str	r1, [r7, #8]
 8004658:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800465a:	e02c      	b.n	80046b6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	68b9      	ldr	r1, [r7, #8]
 8004660:	68f8      	ldr	r0, [r7, #12]
 8004662:	f000 f871 	bl	8004748 <I2C_IsErrorOccurred>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d001      	beq.n	8004670 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e02a      	b.n	80046c6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004676:	d01e      	beq.n	80046b6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004678:	f7fd f9c4 	bl	8001a04 <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	68ba      	ldr	r2, [r7, #8]
 8004684:	429a      	cmp	r2, r3
 8004686:	d302      	bcc.n	800468e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d113      	bne.n	80046b6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004692:	f043 0220 	orr.w	r2, r3, #32
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2220      	movs	r2, #32
 800469e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e007      	b.n	80046c6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	699b      	ldr	r3, [r3, #24]
 80046bc:	f003 0302 	and.w	r3, r3, #2
 80046c0:	2b02      	cmp	r3, #2
 80046c2:	d1cb      	bne.n	800465c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3710      	adds	r7, #16
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}

080046ce <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80046ce:	b580      	push	{r7, lr}
 80046d0:	b084      	sub	sp, #16
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	60f8      	str	r0, [r7, #12]
 80046d6:	60b9      	str	r1, [r7, #8]
 80046d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046da:	e028      	b.n	800472e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	68b9      	ldr	r1, [r7, #8]
 80046e0:	68f8      	ldr	r0, [r7, #12]
 80046e2:	f000 f831 	bl	8004748 <I2C_IsErrorOccurred>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d001      	beq.n	80046f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e026      	b.n	800473e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046f0:	f7fd f988 	bl	8001a04 <HAL_GetTick>
 80046f4:	4602      	mov	r2, r0
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	68ba      	ldr	r2, [r7, #8]
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d302      	bcc.n	8004706 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d113      	bne.n	800472e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800470a:	f043 0220 	orr.w	r2, r3, #32
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2220      	movs	r2, #32
 8004716:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2200      	movs	r2, #0
 800471e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2200      	movs	r2, #0
 8004726:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e007      	b.n	800473e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	699b      	ldr	r3, [r3, #24]
 8004734:	f003 0320 	and.w	r3, r3, #32
 8004738:	2b20      	cmp	r3, #32
 800473a:	d1cf      	bne.n	80046dc <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800473c:	2300      	movs	r3, #0
}
 800473e:	4618      	mov	r0, r3
 8004740:	3710      	adds	r7, #16
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
	...

08004748 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b08a      	sub	sp, #40	; 0x28
 800474c:	af00      	add	r7, sp, #0
 800474e:	60f8      	str	r0, [r7, #12]
 8004750:	60b9      	str	r1, [r7, #8]
 8004752:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004754:	2300      	movs	r3, #0
 8004756:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	699b      	ldr	r3, [r3, #24]
 8004760:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004762:	2300      	movs	r3, #0
 8004764:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800476a:	69bb      	ldr	r3, [r7, #24]
 800476c:	f003 0310 	and.w	r3, r3, #16
 8004770:	2b00      	cmp	r3, #0
 8004772:	d075      	beq.n	8004860 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2210      	movs	r2, #16
 800477a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800477c:	e056      	b.n	800482c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004784:	d052      	beq.n	800482c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004786:	f7fd f93d 	bl	8001a04 <HAL_GetTick>
 800478a:	4602      	mov	r2, r0
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	68ba      	ldr	r2, [r7, #8]
 8004792:	429a      	cmp	r2, r3
 8004794:	d302      	bcc.n	800479c <I2C_IsErrorOccurred+0x54>
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d147      	bne.n	800482c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047a6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80047ae:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	699b      	ldr	r3, [r3, #24]
 80047b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047be:	d12e      	bne.n	800481e <I2C_IsErrorOccurred+0xd6>
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047c6:	d02a      	beq.n	800481e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80047c8:	7cfb      	ldrb	r3, [r7, #19]
 80047ca:	2b20      	cmp	r3, #32
 80047cc:	d027      	beq.n	800481e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	685a      	ldr	r2, [r3, #4]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047dc:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80047de:	f7fd f911 	bl	8001a04 <HAL_GetTick>
 80047e2:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047e4:	e01b      	b.n	800481e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80047e6:	f7fd f90d 	bl	8001a04 <HAL_GetTick>
 80047ea:	4602      	mov	r2, r0
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	2b19      	cmp	r3, #25
 80047f2:	d914      	bls.n	800481e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047f8:	f043 0220 	orr.w	r2, r3, #32
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2220      	movs	r2, #32
 8004804:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2200      	movs	r2, #0
 800480c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2200      	movs	r2, #0
 8004814:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	699b      	ldr	r3, [r3, #24]
 8004824:	f003 0320 	and.w	r3, r3, #32
 8004828:	2b20      	cmp	r3, #32
 800482a:	d1dc      	bne.n	80047e6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	699b      	ldr	r3, [r3, #24]
 8004832:	f003 0320 	and.w	r3, r3, #32
 8004836:	2b20      	cmp	r3, #32
 8004838:	d003      	beq.n	8004842 <I2C_IsErrorOccurred+0xfa>
 800483a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800483e:	2b00      	cmp	r3, #0
 8004840:	d09d      	beq.n	800477e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004842:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004846:	2b00      	cmp	r3, #0
 8004848:	d103      	bne.n	8004852 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	2220      	movs	r2, #32
 8004850:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004852:	6a3b      	ldr	r3, [r7, #32]
 8004854:	f043 0304 	orr.w	r3, r3, #4
 8004858:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	699b      	ldr	r3, [r3, #24]
 8004866:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800486e:	2b00      	cmp	r3, #0
 8004870:	d00b      	beq.n	800488a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004872:	6a3b      	ldr	r3, [r7, #32]
 8004874:	f043 0301 	orr.w	r3, r3, #1
 8004878:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004882:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004890:	2b00      	cmp	r3, #0
 8004892:	d00b      	beq.n	80048ac <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004894:	6a3b      	ldr	r3, [r7, #32]
 8004896:	f043 0308 	orr.w	r3, r3, #8
 800489a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80048a4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80048ac:	69bb      	ldr	r3, [r7, #24]
 80048ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00b      	beq.n	80048ce <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80048b6:	6a3b      	ldr	r3, [r7, #32]
 80048b8:	f043 0302 	orr.w	r3, r3, #2
 80048bc:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048c6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80048ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d01c      	beq.n	8004910 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80048d6:	68f8      	ldr	r0, [r7, #12]
 80048d8:	f7ff fe55 	bl	8004586 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	6859      	ldr	r1, [r3, #4]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	4b0d      	ldr	r3, [pc, #52]	; (800491c <I2C_IsErrorOccurred+0x1d4>)
 80048e8:	400b      	ands	r3, r1
 80048ea:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048f0:	6a3b      	ldr	r3, [r7, #32]
 80048f2:	431a      	orrs	r2, r3
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2220      	movs	r2, #32
 80048fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2200      	movs	r2, #0
 8004904:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2200      	movs	r2, #0
 800490c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004910:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004914:	4618      	mov	r0, r3
 8004916:	3728      	adds	r7, #40	; 0x28
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}
 800491c:	fe00e800 	.word	0xfe00e800

08004920 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004920:	b480      	push	{r7}
 8004922:	b087      	sub	sp, #28
 8004924:	af00      	add	r7, sp, #0
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	607b      	str	r3, [r7, #4]
 800492a:	460b      	mov	r3, r1
 800492c:	817b      	strh	r3, [r7, #10]
 800492e:	4613      	mov	r3, r2
 8004930:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004932:	897b      	ldrh	r3, [r7, #10]
 8004934:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004938:	7a7b      	ldrb	r3, [r7, #9]
 800493a:	041b      	lsls	r3, r3, #16
 800493c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004940:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004946:	6a3b      	ldr	r3, [r7, #32]
 8004948:	4313      	orrs	r3, r2
 800494a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800494e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	685a      	ldr	r2, [r3, #4]
 8004956:	6a3b      	ldr	r3, [r7, #32]
 8004958:	0d5b      	lsrs	r3, r3, #21
 800495a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800495e:	4b08      	ldr	r3, [pc, #32]	; (8004980 <I2C_TransferConfig+0x60>)
 8004960:	430b      	orrs	r3, r1
 8004962:	43db      	mvns	r3, r3
 8004964:	ea02 0103 	and.w	r1, r2, r3
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	697a      	ldr	r2, [r7, #20]
 800496e:	430a      	orrs	r2, r1
 8004970:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004972:	bf00      	nop
 8004974:	371c      	adds	r7, #28
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
 800497e:	bf00      	nop
 8004980:	03ff63ff 	.word	0x03ff63ff

08004984 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004984:	b480      	push	{r7}
 8004986:	b083      	sub	sp, #12
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004994:	b2db      	uxtb	r3, r3
 8004996:	2b20      	cmp	r3, #32
 8004998:	d138      	bne.n	8004a0c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d101      	bne.n	80049a8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80049a4:	2302      	movs	r3, #2
 80049a6:	e032      	b.n	8004a0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2224      	movs	r2, #36	; 0x24
 80049b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f022 0201 	bic.w	r2, r2, #1
 80049c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80049d6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	6819      	ldr	r1, [r3, #0]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	683a      	ldr	r2, [r7, #0]
 80049e4:	430a      	orrs	r2, r1
 80049e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f042 0201 	orr.w	r2, r2, #1
 80049f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2220      	movs	r2, #32
 80049fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	e000      	b.n	8004a0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004a0c:	2302      	movs	r3, #2
  }
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	370c      	adds	r7, #12
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr

08004a1a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004a1a:	b480      	push	{r7}
 8004a1c:	b085      	sub	sp, #20
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
 8004a22:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	2b20      	cmp	r3, #32
 8004a2e:	d139      	bne.n	8004aa4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d101      	bne.n	8004a3e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004a3a:	2302      	movs	r3, #2
 8004a3c:	e033      	b.n	8004aa6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2201      	movs	r2, #1
 8004a42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2224      	movs	r2, #36	; 0x24
 8004a4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f022 0201 	bic.w	r2, r2, #1
 8004a5c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004a6c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	021b      	lsls	r3, r3, #8
 8004a72:	68fa      	ldr	r2, [r7, #12]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	68fa      	ldr	r2, [r7, #12]
 8004a7e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f042 0201 	orr.w	r2, r2, #1
 8004a8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2220      	movs	r2, #32
 8004a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	e000      	b.n	8004aa6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004aa4:	2302      	movs	r3, #2
  }
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3714      	adds	r7, #20
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr
	...

08004ab4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b085      	sub	sp, #20
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d141      	bne.n	8004b46 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004ac2:	4b4b      	ldr	r3, [pc, #300]	; (8004bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004aca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ace:	d131      	bne.n	8004b34 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ad0:	4b47      	ldr	r3, [pc, #284]	; (8004bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ad2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ad6:	4a46      	ldr	r2, [pc, #280]	; (8004bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ad8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004adc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004ae0:	4b43      	ldr	r3, [pc, #268]	; (8004bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004ae8:	4a41      	ldr	r2, [pc, #260]	; (8004bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004aea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004aee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004af0:	4b40      	ldr	r3, [pc, #256]	; (8004bf4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2232      	movs	r2, #50	; 0x32
 8004af6:	fb02 f303 	mul.w	r3, r2, r3
 8004afa:	4a3f      	ldr	r2, [pc, #252]	; (8004bf8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004afc:	fba2 2303 	umull	r2, r3, r2, r3
 8004b00:	0c9b      	lsrs	r3, r3, #18
 8004b02:	3301      	adds	r3, #1
 8004b04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b06:	e002      	b.n	8004b0e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	3b01      	subs	r3, #1
 8004b0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b0e:	4b38      	ldr	r3, [pc, #224]	; (8004bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b10:	695b      	ldr	r3, [r3, #20]
 8004b12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b1a:	d102      	bne.n	8004b22 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d1f2      	bne.n	8004b08 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004b22:	4b33      	ldr	r3, [pc, #204]	; (8004bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b24:	695b      	ldr	r3, [r3, #20]
 8004b26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b2e:	d158      	bne.n	8004be2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004b30:	2303      	movs	r3, #3
 8004b32:	e057      	b.n	8004be4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004b34:	4b2e      	ldr	r3, [pc, #184]	; (8004bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b3a:	4a2d      	ldr	r2, [pc, #180]	; (8004bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b40:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004b44:	e04d      	b.n	8004be2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b4c:	d141      	bne.n	8004bd2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004b4e:	4b28      	ldr	r3, [pc, #160]	; (8004bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004b56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b5a:	d131      	bne.n	8004bc0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004b5c:	4b24      	ldr	r3, [pc, #144]	; (8004bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b62:	4a23      	ldr	r2, [pc, #140]	; (8004bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b68:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004b6c:	4b20      	ldr	r3, [pc, #128]	; (8004bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004b74:	4a1e      	ldr	r2, [pc, #120]	; (8004bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b7a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004b7c:	4b1d      	ldr	r3, [pc, #116]	; (8004bf4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	2232      	movs	r2, #50	; 0x32
 8004b82:	fb02 f303 	mul.w	r3, r2, r3
 8004b86:	4a1c      	ldr	r2, [pc, #112]	; (8004bf8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004b88:	fba2 2303 	umull	r2, r3, r2, r3
 8004b8c:	0c9b      	lsrs	r3, r3, #18
 8004b8e:	3301      	adds	r3, #1
 8004b90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b92:	e002      	b.n	8004b9a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	3b01      	subs	r3, #1
 8004b98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b9a:	4b15      	ldr	r3, [pc, #84]	; (8004bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b9c:	695b      	ldr	r3, [r3, #20]
 8004b9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ba2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ba6:	d102      	bne.n	8004bae <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d1f2      	bne.n	8004b94 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004bae:	4b10      	ldr	r3, [pc, #64]	; (8004bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bb0:	695b      	ldr	r3, [r3, #20]
 8004bb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bba:	d112      	bne.n	8004be2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004bbc:	2303      	movs	r3, #3
 8004bbe:	e011      	b.n	8004be4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004bc0:	4b0b      	ldr	r3, [pc, #44]	; (8004bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bc6:	4a0a      	ldr	r2, [pc, #40]	; (8004bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bcc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004bd0:	e007      	b.n	8004be2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004bd2:	4b07      	ldr	r3, [pc, #28]	; (8004bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004bda:	4a05      	ldr	r2, [pc, #20]	; (8004bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bdc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004be0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004be2:	2300      	movs	r3, #0
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3714      	adds	r7, #20
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr
 8004bf0:	40007000 	.word	0x40007000
 8004bf4:	20000214 	.word	0x20000214
 8004bf8:	431bde83 	.word	0x431bde83

08004bfc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b088      	sub	sp, #32
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d101      	bne.n	8004c0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e306      	b.n	800521c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 0301 	and.w	r3, r3, #1
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d075      	beq.n	8004d06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c1a:	4b97      	ldr	r3, [pc, #604]	; (8004e78 <HAL_RCC_OscConfig+0x27c>)
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	f003 030c 	and.w	r3, r3, #12
 8004c22:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c24:	4b94      	ldr	r3, [pc, #592]	; (8004e78 <HAL_RCC_OscConfig+0x27c>)
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	f003 0303 	and.w	r3, r3, #3
 8004c2c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	2b0c      	cmp	r3, #12
 8004c32:	d102      	bne.n	8004c3a <HAL_RCC_OscConfig+0x3e>
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	2b03      	cmp	r3, #3
 8004c38:	d002      	beq.n	8004c40 <HAL_RCC_OscConfig+0x44>
 8004c3a:	69bb      	ldr	r3, [r7, #24]
 8004c3c:	2b08      	cmp	r3, #8
 8004c3e:	d10b      	bne.n	8004c58 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c40:	4b8d      	ldr	r3, [pc, #564]	; (8004e78 <HAL_RCC_OscConfig+0x27c>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d05b      	beq.n	8004d04 <HAL_RCC_OscConfig+0x108>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d157      	bne.n	8004d04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e2e1      	b.n	800521c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c60:	d106      	bne.n	8004c70 <HAL_RCC_OscConfig+0x74>
 8004c62:	4b85      	ldr	r3, [pc, #532]	; (8004e78 <HAL_RCC_OscConfig+0x27c>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a84      	ldr	r2, [pc, #528]	; (8004e78 <HAL_RCC_OscConfig+0x27c>)
 8004c68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c6c:	6013      	str	r3, [r2, #0]
 8004c6e:	e01d      	b.n	8004cac <HAL_RCC_OscConfig+0xb0>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c78:	d10c      	bne.n	8004c94 <HAL_RCC_OscConfig+0x98>
 8004c7a:	4b7f      	ldr	r3, [pc, #508]	; (8004e78 <HAL_RCC_OscConfig+0x27c>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a7e      	ldr	r2, [pc, #504]	; (8004e78 <HAL_RCC_OscConfig+0x27c>)
 8004c80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c84:	6013      	str	r3, [r2, #0]
 8004c86:	4b7c      	ldr	r3, [pc, #496]	; (8004e78 <HAL_RCC_OscConfig+0x27c>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a7b      	ldr	r2, [pc, #492]	; (8004e78 <HAL_RCC_OscConfig+0x27c>)
 8004c8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c90:	6013      	str	r3, [r2, #0]
 8004c92:	e00b      	b.n	8004cac <HAL_RCC_OscConfig+0xb0>
 8004c94:	4b78      	ldr	r3, [pc, #480]	; (8004e78 <HAL_RCC_OscConfig+0x27c>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a77      	ldr	r2, [pc, #476]	; (8004e78 <HAL_RCC_OscConfig+0x27c>)
 8004c9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c9e:	6013      	str	r3, [r2, #0]
 8004ca0:	4b75      	ldr	r3, [pc, #468]	; (8004e78 <HAL_RCC_OscConfig+0x27c>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a74      	ldr	r2, [pc, #464]	; (8004e78 <HAL_RCC_OscConfig+0x27c>)
 8004ca6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004caa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d013      	beq.n	8004cdc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cb4:	f7fc fea6 	bl	8001a04 <HAL_GetTick>
 8004cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004cba:	e008      	b.n	8004cce <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cbc:	f7fc fea2 	bl	8001a04 <HAL_GetTick>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	2b64      	cmp	r3, #100	; 0x64
 8004cc8:	d901      	bls.n	8004cce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e2a6      	b.n	800521c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004cce:	4b6a      	ldr	r3, [pc, #424]	; (8004e78 <HAL_RCC_OscConfig+0x27c>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d0f0      	beq.n	8004cbc <HAL_RCC_OscConfig+0xc0>
 8004cda:	e014      	b.n	8004d06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cdc:	f7fc fe92 	bl	8001a04 <HAL_GetTick>
 8004ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ce2:	e008      	b.n	8004cf6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ce4:	f7fc fe8e 	bl	8001a04 <HAL_GetTick>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	2b64      	cmp	r3, #100	; 0x64
 8004cf0:	d901      	bls.n	8004cf6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e292      	b.n	800521c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004cf6:	4b60      	ldr	r3, [pc, #384]	; (8004e78 <HAL_RCC_OscConfig+0x27c>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d1f0      	bne.n	8004ce4 <HAL_RCC_OscConfig+0xe8>
 8004d02:	e000      	b.n	8004d06 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0302 	and.w	r3, r3, #2
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d075      	beq.n	8004dfe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d12:	4b59      	ldr	r3, [pc, #356]	; (8004e78 <HAL_RCC_OscConfig+0x27c>)
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	f003 030c 	and.w	r3, r3, #12
 8004d1a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d1c:	4b56      	ldr	r3, [pc, #344]	; (8004e78 <HAL_RCC_OscConfig+0x27c>)
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	f003 0303 	and.w	r3, r3, #3
 8004d24:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	2b0c      	cmp	r3, #12
 8004d2a:	d102      	bne.n	8004d32 <HAL_RCC_OscConfig+0x136>
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	2b02      	cmp	r3, #2
 8004d30:	d002      	beq.n	8004d38 <HAL_RCC_OscConfig+0x13c>
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	2b04      	cmp	r3, #4
 8004d36:	d11f      	bne.n	8004d78 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d38:	4b4f      	ldr	r3, [pc, #316]	; (8004e78 <HAL_RCC_OscConfig+0x27c>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d005      	beq.n	8004d50 <HAL_RCC_OscConfig+0x154>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d101      	bne.n	8004d50 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e265      	b.n	800521c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d50:	4b49      	ldr	r3, [pc, #292]	; (8004e78 <HAL_RCC_OscConfig+0x27c>)
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	691b      	ldr	r3, [r3, #16]
 8004d5c:	061b      	lsls	r3, r3, #24
 8004d5e:	4946      	ldr	r1, [pc, #280]	; (8004e78 <HAL_RCC_OscConfig+0x27c>)
 8004d60:	4313      	orrs	r3, r2
 8004d62:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004d64:	4b45      	ldr	r3, [pc, #276]	; (8004e7c <HAL_RCC_OscConfig+0x280>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f7fc fdff 	bl	800196c <HAL_InitTick>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d043      	beq.n	8004dfc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e251      	b.n	800521c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d023      	beq.n	8004dc8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d80:	4b3d      	ldr	r3, [pc, #244]	; (8004e78 <HAL_RCC_OscConfig+0x27c>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a3c      	ldr	r2, [pc, #240]	; (8004e78 <HAL_RCC_OscConfig+0x27c>)
 8004d86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d8c:	f7fc fe3a 	bl	8001a04 <HAL_GetTick>
 8004d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d92:	e008      	b.n	8004da6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d94:	f7fc fe36 	bl	8001a04 <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	2b02      	cmp	r3, #2
 8004da0:	d901      	bls.n	8004da6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e23a      	b.n	800521c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004da6:	4b34      	ldr	r3, [pc, #208]	; (8004e78 <HAL_RCC_OscConfig+0x27c>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d0f0      	beq.n	8004d94 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004db2:	4b31      	ldr	r3, [pc, #196]	; (8004e78 <HAL_RCC_OscConfig+0x27c>)
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	061b      	lsls	r3, r3, #24
 8004dc0:	492d      	ldr	r1, [pc, #180]	; (8004e78 <HAL_RCC_OscConfig+0x27c>)
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	604b      	str	r3, [r1, #4]
 8004dc6:	e01a      	b.n	8004dfe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004dc8:	4b2b      	ldr	r3, [pc, #172]	; (8004e78 <HAL_RCC_OscConfig+0x27c>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a2a      	ldr	r2, [pc, #168]	; (8004e78 <HAL_RCC_OscConfig+0x27c>)
 8004dce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004dd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dd4:	f7fc fe16 	bl	8001a04 <HAL_GetTick>
 8004dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004dda:	e008      	b.n	8004dee <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ddc:	f7fc fe12 	bl	8001a04 <HAL_GetTick>
 8004de0:	4602      	mov	r2, r0
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d901      	bls.n	8004dee <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e216      	b.n	800521c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004dee:	4b22      	ldr	r3, [pc, #136]	; (8004e78 <HAL_RCC_OscConfig+0x27c>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d1f0      	bne.n	8004ddc <HAL_RCC_OscConfig+0x1e0>
 8004dfa:	e000      	b.n	8004dfe <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004dfc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 0308 	and.w	r3, r3, #8
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d041      	beq.n	8004e8e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	695b      	ldr	r3, [r3, #20]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d01c      	beq.n	8004e4c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e12:	4b19      	ldr	r3, [pc, #100]	; (8004e78 <HAL_RCC_OscConfig+0x27c>)
 8004e14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e18:	4a17      	ldr	r2, [pc, #92]	; (8004e78 <HAL_RCC_OscConfig+0x27c>)
 8004e1a:	f043 0301 	orr.w	r3, r3, #1
 8004e1e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e22:	f7fc fdef 	bl	8001a04 <HAL_GetTick>
 8004e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004e28:	e008      	b.n	8004e3c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e2a:	f7fc fdeb 	bl	8001a04 <HAL_GetTick>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	2b02      	cmp	r3, #2
 8004e36:	d901      	bls.n	8004e3c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004e38:	2303      	movs	r3, #3
 8004e3a:	e1ef      	b.n	800521c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004e3c:	4b0e      	ldr	r3, [pc, #56]	; (8004e78 <HAL_RCC_OscConfig+0x27c>)
 8004e3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e42:	f003 0302 	and.w	r3, r3, #2
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d0ef      	beq.n	8004e2a <HAL_RCC_OscConfig+0x22e>
 8004e4a:	e020      	b.n	8004e8e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e4c:	4b0a      	ldr	r3, [pc, #40]	; (8004e78 <HAL_RCC_OscConfig+0x27c>)
 8004e4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e52:	4a09      	ldr	r2, [pc, #36]	; (8004e78 <HAL_RCC_OscConfig+0x27c>)
 8004e54:	f023 0301 	bic.w	r3, r3, #1
 8004e58:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e5c:	f7fc fdd2 	bl	8001a04 <HAL_GetTick>
 8004e60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004e62:	e00d      	b.n	8004e80 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e64:	f7fc fdce 	bl	8001a04 <HAL_GetTick>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	2b02      	cmp	r3, #2
 8004e70:	d906      	bls.n	8004e80 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004e72:	2303      	movs	r3, #3
 8004e74:	e1d2      	b.n	800521c <HAL_RCC_OscConfig+0x620>
 8004e76:	bf00      	nop
 8004e78:	40021000 	.word	0x40021000
 8004e7c:	20000218 	.word	0x20000218
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004e80:	4b8c      	ldr	r3, [pc, #560]	; (80050b4 <HAL_RCC_OscConfig+0x4b8>)
 8004e82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e86:	f003 0302 	and.w	r3, r3, #2
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d1ea      	bne.n	8004e64 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 0304 	and.w	r3, r3, #4
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	f000 80a6 	beq.w	8004fe8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004ea0:	4b84      	ldr	r3, [pc, #528]	; (80050b4 <HAL_RCC_OscConfig+0x4b8>)
 8004ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ea4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d101      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x2b4>
 8004eac:	2301      	movs	r3, #1
 8004eae:	e000      	b.n	8004eb2 <HAL_RCC_OscConfig+0x2b6>
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00d      	beq.n	8004ed2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004eb6:	4b7f      	ldr	r3, [pc, #508]	; (80050b4 <HAL_RCC_OscConfig+0x4b8>)
 8004eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eba:	4a7e      	ldr	r2, [pc, #504]	; (80050b4 <HAL_RCC_OscConfig+0x4b8>)
 8004ebc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ec0:	6593      	str	r3, [r2, #88]	; 0x58
 8004ec2:	4b7c      	ldr	r3, [pc, #496]	; (80050b4 <HAL_RCC_OscConfig+0x4b8>)
 8004ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eca:	60fb      	str	r3, [r7, #12]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ed2:	4b79      	ldr	r3, [pc, #484]	; (80050b8 <HAL_RCC_OscConfig+0x4bc>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d118      	bne.n	8004f10 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ede:	4b76      	ldr	r3, [pc, #472]	; (80050b8 <HAL_RCC_OscConfig+0x4bc>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a75      	ldr	r2, [pc, #468]	; (80050b8 <HAL_RCC_OscConfig+0x4bc>)
 8004ee4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ee8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004eea:	f7fc fd8b 	bl	8001a04 <HAL_GetTick>
 8004eee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ef0:	e008      	b.n	8004f04 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ef2:	f7fc fd87 	bl	8001a04 <HAL_GetTick>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	1ad3      	subs	r3, r2, r3
 8004efc:	2b02      	cmp	r3, #2
 8004efe:	d901      	bls.n	8004f04 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004f00:	2303      	movs	r3, #3
 8004f02:	e18b      	b.n	800521c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f04:	4b6c      	ldr	r3, [pc, #432]	; (80050b8 <HAL_RCC_OscConfig+0x4bc>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d0f0      	beq.n	8004ef2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d108      	bne.n	8004f2a <HAL_RCC_OscConfig+0x32e>
 8004f18:	4b66      	ldr	r3, [pc, #408]	; (80050b4 <HAL_RCC_OscConfig+0x4b8>)
 8004f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f1e:	4a65      	ldr	r2, [pc, #404]	; (80050b4 <HAL_RCC_OscConfig+0x4b8>)
 8004f20:	f043 0301 	orr.w	r3, r3, #1
 8004f24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f28:	e024      	b.n	8004f74 <HAL_RCC_OscConfig+0x378>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	2b05      	cmp	r3, #5
 8004f30:	d110      	bne.n	8004f54 <HAL_RCC_OscConfig+0x358>
 8004f32:	4b60      	ldr	r3, [pc, #384]	; (80050b4 <HAL_RCC_OscConfig+0x4b8>)
 8004f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f38:	4a5e      	ldr	r2, [pc, #376]	; (80050b4 <HAL_RCC_OscConfig+0x4b8>)
 8004f3a:	f043 0304 	orr.w	r3, r3, #4
 8004f3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f42:	4b5c      	ldr	r3, [pc, #368]	; (80050b4 <HAL_RCC_OscConfig+0x4b8>)
 8004f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f48:	4a5a      	ldr	r2, [pc, #360]	; (80050b4 <HAL_RCC_OscConfig+0x4b8>)
 8004f4a:	f043 0301 	orr.w	r3, r3, #1
 8004f4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f52:	e00f      	b.n	8004f74 <HAL_RCC_OscConfig+0x378>
 8004f54:	4b57      	ldr	r3, [pc, #348]	; (80050b4 <HAL_RCC_OscConfig+0x4b8>)
 8004f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f5a:	4a56      	ldr	r2, [pc, #344]	; (80050b4 <HAL_RCC_OscConfig+0x4b8>)
 8004f5c:	f023 0301 	bic.w	r3, r3, #1
 8004f60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f64:	4b53      	ldr	r3, [pc, #332]	; (80050b4 <HAL_RCC_OscConfig+0x4b8>)
 8004f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f6a:	4a52      	ldr	r2, [pc, #328]	; (80050b4 <HAL_RCC_OscConfig+0x4b8>)
 8004f6c:	f023 0304 	bic.w	r3, r3, #4
 8004f70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d016      	beq.n	8004faa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f7c:	f7fc fd42 	bl	8001a04 <HAL_GetTick>
 8004f80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f82:	e00a      	b.n	8004f9a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f84:	f7fc fd3e 	bl	8001a04 <HAL_GetTick>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d901      	bls.n	8004f9a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004f96:	2303      	movs	r3, #3
 8004f98:	e140      	b.n	800521c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f9a:	4b46      	ldr	r3, [pc, #280]	; (80050b4 <HAL_RCC_OscConfig+0x4b8>)
 8004f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fa0:	f003 0302 	and.w	r3, r3, #2
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d0ed      	beq.n	8004f84 <HAL_RCC_OscConfig+0x388>
 8004fa8:	e015      	b.n	8004fd6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004faa:	f7fc fd2b 	bl	8001a04 <HAL_GetTick>
 8004fae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004fb0:	e00a      	b.n	8004fc8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fb2:	f7fc fd27 	bl	8001a04 <HAL_GetTick>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	1ad3      	subs	r3, r2, r3
 8004fbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d901      	bls.n	8004fc8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	e129      	b.n	800521c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004fc8:	4b3a      	ldr	r3, [pc, #232]	; (80050b4 <HAL_RCC_OscConfig+0x4b8>)
 8004fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fce:	f003 0302 	and.w	r3, r3, #2
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d1ed      	bne.n	8004fb2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004fd6:	7ffb      	ldrb	r3, [r7, #31]
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d105      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fdc:	4b35      	ldr	r3, [pc, #212]	; (80050b4 <HAL_RCC_OscConfig+0x4b8>)
 8004fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fe0:	4a34      	ldr	r2, [pc, #208]	; (80050b4 <HAL_RCC_OscConfig+0x4b8>)
 8004fe2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fe6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0320 	and.w	r3, r3, #32
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d03c      	beq.n	800506e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	699b      	ldr	r3, [r3, #24]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d01c      	beq.n	8005036 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004ffc:	4b2d      	ldr	r3, [pc, #180]	; (80050b4 <HAL_RCC_OscConfig+0x4b8>)
 8004ffe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005002:	4a2c      	ldr	r2, [pc, #176]	; (80050b4 <HAL_RCC_OscConfig+0x4b8>)
 8005004:	f043 0301 	orr.w	r3, r3, #1
 8005008:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800500c:	f7fc fcfa 	bl	8001a04 <HAL_GetTick>
 8005010:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005012:	e008      	b.n	8005026 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005014:	f7fc fcf6 	bl	8001a04 <HAL_GetTick>
 8005018:	4602      	mov	r2, r0
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	2b02      	cmp	r3, #2
 8005020:	d901      	bls.n	8005026 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	e0fa      	b.n	800521c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005026:	4b23      	ldr	r3, [pc, #140]	; (80050b4 <HAL_RCC_OscConfig+0x4b8>)
 8005028:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800502c:	f003 0302 	and.w	r3, r3, #2
 8005030:	2b00      	cmp	r3, #0
 8005032:	d0ef      	beq.n	8005014 <HAL_RCC_OscConfig+0x418>
 8005034:	e01b      	b.n	800506e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005036:	4b1f      	ldr	r3, [pc, #124]	; (80050b4 <HAL_RCC_OscConfig+0x4b8>)
 8005038:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800503c:	4a1d      	ldr	r2, [pc, #116]	; (80050b4 <HAL_RCC_OscConfig+0x4b8>)
 800503e:	f023 0301 	bic.w	r3, r3, #1
 8005042:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005046:	f7fc fcdd 	bl	8001a04 <HAL_GetTick>
 800504a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800504c:	e008      	b.n	8005060 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800504e:	f7fc fcd9 	bl	8001a04 <HAL_GetTick>
 8005052:	4602      	mov	r2, r0
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	1ad3      	subs	r3, r2, r3
 8005058:	2b02      	cmp	r3, #2
 800505a:	d901      	bls.n	8005060 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800505c:	2303      	movs	r3, #3
 800505e:	e0dd      	b.n	800521c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005060:	4b14      	ldr	r3, [pc, #80]	; (80050b4 <HAL_RCC_OscConfig+0x4b8>)
 8005062:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005066:	f003 0302 	and.w	r3, r3, #2
 800506a:	2b00      	cmp	r3, #0
 800506c:	d1ef      	bne.n	800504e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	69db      	ldr	r3, [r3, #28]
 8005072:	2b00      	cmp	r3, #0
 8005074:	f000 80d1 	beq.w	800521a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005078:	4b0e      	ldr	r3, [pc, #56]	; (80050b4 <HAL_RCC_OscConfig+0x4b8>)
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	f003 030c 	and.w	r3, r3, #12
 8005080:	2b0c      	cmp	r3, #12
 8005082:	f000 808b 	beq.w	800519c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	69db      	ldr	r3, [r3, #28]
 800508a:	2b02      	cmp	r3, #2
 800508c:	d15e      	bne.n	800514c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800508e:	4b09      	ldr	r3, [pc, #36]	; (80050b4 <HAL_RCC_OscConfig+0x4b8>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a08      	ldr	r2, [pc, #32]	; (80050b4 <HAL_RCC_OscConfig+0x4b8>)
 8005094:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005098:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800509a:	f7fc fcb3 	bl	8001a04 <HAL_GetTick>
 800509e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050a0:	e00c      	b.n	80050bc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050a2:	f7fc fcaf 	bl	8001a04 <HAL_GetTick>
 80050a6:	4602      	mov	r2, r0
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	1ad3      	subs	r3, r2, r3
 80050ac:	2b02      	cmp	r3, #2
 80050ae:	d905      	bls.n	80050bc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80050b0:	2303      	movs	r3, #3
 80050b2:	e0b3      	b.n	800521c <HAL_RCC_OscConfig+0x620>
 80050b4:	40021000 	.word	0x40021000
 80050b8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050bc:	4b59      	ldr	r3, [pc, #356]	; (8005224 <HAL_RCC_OscConfig+0x628>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d1ec      	bne.n	80050a2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050c8:	4b56      	ldr	r3, [pc, #344]	; (8005224 <HAL_RCC_OscConfig+0x628>)
 80050ca:	68da      	ldr	r2, [r3, #12]
 80050cc:	4b56      	ldr	r3, [pc, #344]	; (8005228 <HAL_RCC_OscConfig+0x62c>)
 80050ce:	4013      	ands	r3, r2
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	6a11      	ldr	r1, [r2, #32]
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80050d8:	3a01      	subs	r2, #1
 80050da:	0112      	lsls	r2, r2, #4
 80050dc:	4311      	orrs	r1, r2
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80050e2:	0212      	lsls	r2, r2, #8
 80050e4:	4311      	orrs	r1, r2
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80050ea:	0852      	lsrs	r2, r2, #1
 80050ec:	3a01      	subs	r2, #1
 80050ee:	0552      	lsls	r2, r2, #21
 80050f0:	4311      	orrs	r1, r2
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80050f6:	0852      	lsrs	r2, r2, #1
 80050f8:	3a01      	subs	r2, #1
 80050fa:	0652      	lsls	r2, r2, #25
 80050fc:	4311      	orrs	r1, r2
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005102:	06d2      	lsls	r2, r2, #27
 8005104:	430a      	orrs	r2, r1
 8005106:	4947      	ldr	r1, [pc, #284]	; (8005224 <HAL_RCC_OscConfig+0x628>)
 8005108:	4313      	orrs	r3, r2
 800510a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800510c:	4b45      	ldr	r3, [pc, #276]	; (8005224 <HAL_RCC_OscConfig+0x628>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a44      	ldr	r2, [pc, #272]	; (8005224 <HAL_RCC_OscConfig+0x628>)
 8005112:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005116:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005118:	4b42      	ldr	r3, [pc, #264]	; (8005224 <HAL_RCC_OscConfig+0x628>)
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	4a41      	ldr	r2, [pc, #260]	; (8005224 <HAL_RCC_OscConfig+0x628>)
 800511e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005122:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005124:	f7fc fc6e 	bl	8001a04 <HAL_GetTick>
 8005128:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800512a:	e008      	b.n	800513e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800512c:	f7fc fc6a 	bl	8001a04 <HAL_GetTick>
 8005130:	4602      	mov	r2, r0
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	2b02      	cmp	r3, #2
 8005138:	d901      	bls.n	800513e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800513a:	2303      	movs	r3, #3
 800513c:	e06e      	b.n	800521c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800513e:	4b39      	ldr	r3, [pc, #228]	; (8005224 <HAL_RCC_OscConfig+0x628>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005146:	2b00      	cmp	r3, #0
 8005148:	d0f0      	beq.n	800512c <HAL_RCC_OscConfig+0x530>
 800514a:	e066      	b.n	800521a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800514c:	4b35      	ldr	r3, [pc, #212]	; (8005224 <HAL_RCC_OscConfig+0x628>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a34      	ldr	r2, [pc, #208]	; (8005224 <HAL_RCC_OscConfig+0x628>)
 8005152:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005156:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005158:	4b32      	ldr	r3, [pc, #200]	; (8005224 <HAL_RCC_OscConfig+0x628>)
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	4a31      	ldr	r2, [pc, #196]	; (8005224 <HAL_RCC_OscConfig+0x628>)
 800515e:	f023 0303 	bic.w	r3, r3, #3
 8005162:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005164:	4b2f      	ldr	r3, [pc, #188]	; (8005224 <HAL_RCC_OscConfig+0x628>)
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	4a2e      	ldr	r2, [pc, #184]	; (8005224 <HAL_RCC_OscConfig+0x628>)
 800516a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800516e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005172:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005174:	f7fc fc46 	bl	8001a04 <HAL_GetTick>
 8005178:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800517a:	e008      	b.n	800518e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800517c:	f7fc fc42 	bl	8001a04 <HAL_GetTick>
 8005180:	4602      	mov	r2, r0
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	2b02      	cmp	r3, #2
 8005188:	d901      	bls.n	800518e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800518a:	2303      	movs	r3, #3
 800518c:	e046      	b.n	800521c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800518e:	4b25      	ldr	r3, [pc, #148]	; (8005224 <HAL_RCC_OscConfig+0x628>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005196:	2b00      	cmp	r3, #0
 8005198:	d1f0      	bne.n	800517c <HAL_RCC_OscConfig+0x580>
 800519a:	e03e      	b.n	800521a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	69db      	ldr	r3, [r3, #28]
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d101      	bne.n	80051a8 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	e039      	b.n	800521c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80051a8:	4b1e      	ldr	r3, [pc, #120]	; (8005224 <HAL_RCC_OscConfig+0x628>)
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	f003 0203 	and.w	r2, r3, #3
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6a1b      	ldr	r3, [r3, #32]
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d12c      	bne.n	8005216 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c6:	3b01      	subs	r3, #1
 80051c8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d123      	bne.n	8005216 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80051da:	429a      	cmp	r2, r3
 80051dc:	d11b      	bne.n	8005216 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d113      	bne.n	8005216 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f8:	085b      	lsrs	r3, r3, #1
 80051fa:	3b01      	subs	r3, #1
 80051fc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80051fe:	429a      	cmp	r2, r3
 8005200:	d109      	bne.n	8005216 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800520c:	085b      	lsrs	r3, r3, #1
 800520e:	3b01      	subs	r3, #1
 8005210:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005212:	429a      	cmp	r2, r3
 8005214:	d001      	beq.n	800521a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e000      	b.n	800521c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800521a:	2300      	movs	r3, #0
}
 800521c:	4618      	mov	r0, r3
 800521e:	3720      	adds	r7, #32
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}
 8005224:	40021000 	.word	0x40021000
 8005228:	019f800c 	.word	0x019f800c

0800522c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b086      	sub	sp, #24
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005236:	2300      	movs	r3, #0
 8005238:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d101      	bne.n	8005244 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	e11e      	b.n	8005482 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005244:	4b91      	ldr	r3, [pc, #580]	; (800548c <HAL_RCC_ClockConfig+0x260>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 030f 	and.w	r3, r3, #15
 800524c:	683a      	ldr	r2, [r7, #0]
 800524e:	429a      	cmp	r2, r3
 8005250:	d910      	bls.n	8005274 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005252:	4b8e      	ldr	r3, [pc, #568]	; (800548c <HAL_RCC_ClockConfig+0x260>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f023 020f 	bic.w	r2, r3, #15
 800525a:	498c      	ldr	r1, [pc, #560]	; (800548c <HAL_RCC_ClockConfig+0x260>)
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	4313      	orrs	r3, r2
 8005260:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005262:	4b8a      	ldr	r3, [pc, #552]	; (800548c <HAL_RCC_ClockConfig+0x260>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 030f 	and.w	r3, r3, #15
 800526a:	683a      	ldr	r2, [r7, #0]
 800526c:	429a      	cmp	r2, r3
 800526e:	d001      	beq.n	8005274 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	e106      	b.n	8005482 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 0301 	and.w	r3, r3, #1
 800527c:	2b00      	cmp	r3, #0
 800527e:	d073      	beq.n	8005368 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	2b03      	cmp	r3, #3
 8005286:	d129      	bne.n	80052dc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005288:	4b81      	ldr	r3, [pc, #516]	; (8005490 <HAL_RCC_ClockConfig+0x264>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005290:	2b00      	cmp	r3, #0
 8005292:	d101      	bne.n	8005298 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	e0f4      	b.n	8005482 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005298:	f000 f972 	bl	8005580 <RCC_GetSysClockFreqFromPLLSource>
 800529c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	4a7c      	ldr	r2, [pc, #496]	; (8005494 <HAL_RCC_ClockConfig+0x268>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d93f      	bls.n	8005326 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80052a6:	4b7a      	ldr	r3, [pc, #488]	; (8005490 <HAL_RCC_ClockConfig+0x264>)
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d009      	beq.n	80052c6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d033      	beq.n	8005326 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d12f      	bne.n	8005326 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80052c6:	4b72      	ldr	r3, [pc, #456]	; (8005490 <HAL_RCC_ClockConfig+0x264>)
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052ce:	4a70      	ldr	r2, [pc, #448]	; (8005490 <HAL_RCC_ClockConfig+0x264>)
 80052d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052d4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80052d6:	2380      	movs	r3, #128	; 0x80
 80052d8:	617b      	str	r3, [r7, #20]
 80052da:	e024      	b.n	8005326 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	2b02      	cmp	r3, #2
 80052e2:	d107      	bne.n	80052f4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80052e4:	4b6a      	ldr	r3, [pc, #424]	; (8005490 <HAL_RCC_ClockConfig+0x264>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d109      	bne.n	8005304 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e0c6      	b.n	8005482 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80052f4:	4b66      	ldr	r3, [pc, #408]	; (8005490 <HAL_RCC_ClockConfig+0x264>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d101      	bne.n	8005304 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	e0be      	b.n	8005482 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005304:	f000 f8ce 	bl	80054a4 <HAL_RCC_GetSysClockFreq>
 8005308:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	4a61      	ldr	r2, [pc, #388]	; (8005494 <HAL_RCC_ClockConfig+0x268>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d909      	bls.n	8005326 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005312:	4b5f      	ldr	r3, [pc, #380]	; (8005490 <HAL_RCC_ClockConfig+0x264>)
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800531a:	4a5d      	ldr	r2, [pc, #372]	; (8005490 <HAL_RCC_ClockConfig+0x264>)
 800531c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005320:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005322:	2380      	movs	r3, #128	; 0x80
 8005324:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005326:	4b5a      	ldr	r3, [pc, #360]	; (8005490 <HAL_RCC_ClockConfig+0x264>)
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	f023 0203 	bic.w	r2, r3, #3
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	4957      	ldr	r1, [pc, #348]	; (8005490 <HAL_RCC_ClockConfig+0x264>)
 8005334:	4313      	orrs	r3, r2
 8005336:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005338:	f7fc fb64 	bl	8001a04 <HAL_GetTick>
 800533c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800533e:	e00a      	b.n	8005356 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005340:	f7fc fb60 	bl	8001a04 <HAL_GetTick>
 8005344:	4602      	mov	r2, r0
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	f241 3288 	movw	r2, #5000	; 0x1388
 800534e:	4293      	cmp	r3, r2
 8005350:	d901      	bls.n	8005356 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005352:	2303      	movs	r3, #3
 8005354:	e095      	b.n	8005482 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005356:	4b4e      	ldr	r3, [pc, #312]	; (8005490 <HAL_RCC_ClockConfig+0x264>)
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	f003 020c 	and.w	r2, r3, #12
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	429a      	cmp	r2, r3
 8005366:	d1eb      	bne.n	8005340 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 0302 	and.w	r3, r3, #2
 8005370:	2b00      	cmp	r3, #0
 8005372:	d023      	beq.n	80053bc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 0304 	and.w	r3, r3, #4
 800537c:	2b00      	cmp	r3, #0
 800537e:	d005      	beq.n	800538c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005380:	4b43      	ldr	r3, [pc, #268]	; (8005490 <HAL_RCC_ClockConfig+0x264>)
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	4a42      	ldr	r2, [pc, #264]	; (8005490 <HAL_RCC_ClockConfig+0x264>)
 8005386:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800538a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0308 	and.w	r3, r3, #8
 8005394:	2b00      	cmp	r3, #0
 8005396:	d007      	beq.n	80053a8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005398:	4b3d      	ldr	r3, [pc, #244]	; (8005490 <HAL_RCC_ClockConfig+0x264>)
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80053a0:	4a3b      	ldr	r2, [pc, #236]	; (8005490 <HAL_RCC_ClockConfig+0x264>)
 80053a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80053a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053a8:	4b39      	ldr	r3, [pc, #228]	; (8005490 <HAL_RCC_ClockConfig+0x264>)
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	4936      	ldr	r1, [pc, #216]	; (8005490 <HAL_RCC_ClockConfig+0x264>)
 80053b6:	4313      	orrs	r3, r2
 80053b8:	608b      	str	r3, [r1, #8]
 80053ba:	e008      	b.n	80053ce <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	2b80      	cmp	r3, #128	; 0x80
 80053c0:	d105      	bne.n	80053ce <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80053c2:	4b33      	ldr	r3, [pc, #204]	; (8005490 <HAL_RCC_ClockConfig+0x264>)
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	4a32      	ldr	r2, [pc, #200]	; (8005490 <HAL_RCC_ClockConfig+0x264>)
 80053c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053cc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80053ce:	4b2f      	ldr	r3, [pc, #188]	; (800548c <HAL_RCC_ClockConfig+0x260>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 030f 	and.w	r3, r3, #15
 80053d6:	683a      	ldr	r2, [r7, #0]
 80053d8:	429a      	cmp	r2, r3
 80053da:	d21d      	bcs.n	8005418 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053dc:	4b2b      	ldr	r3, [pc, #172]	; (800548c <HAL_RCC_ClockConfig+0x260>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f023 020f 	bic.w	r2, r3, #15
 80053e4:	4929      	ldr	r1, [pc, #164]	; (800548c <HAL_RCC_ClockConfig+0x260>)
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	4313      	orrs	r3, r2
 80053ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80053ec:	f7fc fb0a 	bl	8001a04 <HAL_GetTick>
 80053f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053f2:	e00a      	b.n	800540a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053f4:	f7fc fb06 	bl	8001a04 <HAL_GetTick>
 80053f8:	4602      	mov	r2, r0
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	1ad3      	subs	r3, r2, r3
 80053fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005402:	4293      	cmp	r3, r2
 8005404:	d901      	bls.n	800540a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005406:	2303      	movs	r3, #3
 8005408:	e03b      	b.n	8005482 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800540a:	4b20      	ldr	r3, [pc, #128]	; (800548c <HAL_RCC_ClockConfig+0x260>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 030f 	and.w	r3, r3, #15
 8005412:	683a      	ldr	r2, [r7, #0]
 8005414:	429a      	cmp	r2, r3
 8005416:	d1ed      	bne.n	80053f4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 0304 	and.w	r3, r3, #4
 8005420:	2b00      	cmp	r3, #0
 8005422:	d008      	beq.n	8005436 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005424:	4b1a      	ldr	r3, [pc, #104]	; (8005490 <HAL_RCC_ClockConfig+0x264>)
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	4917      	ldr	r1, [pc, #92]	; (8005490 <HAL_RCC_ClockConfig+0x264>)
 8005432:	4313      	orrs	r3, r2
 8005434:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 0308 	and.w	r3, r3, #8
 800543e:	2b00      	cmp	r3, #0
 8005440:	d009      	beq.n	8005456 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005442:	4b13      	ldr	r3, [pc, #76]	; (8005490 <HAL_RCC_ClockConfig+0x264>)
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	00db      	lsls	r3, r3, #3
 8005450:	490f      	ldr	r1, [pc, #60]	; (8005490 <HAL_RCC_ClockConfig+0x264>)
 8005452:	4313      	orrs	r3, r2
 8005454:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005456:	f000 f825 	bl	80054a4 <HAL_RCC_GetSysClockFreq>
 800545a:	4602      	mov	r2, r0
 800545c:	4b0c      	ldr	r3, [pc, #48]	; (8005490 <HAL_RCC_ClockConfig+0x264>)
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	091b      	lsrs	r3, r3, #4
 8005462:	f003 030f 	and.w	r3, r3, #15
 8005466:	490c      	ldr	r1, [pc, #48]	; (8005498 <HAL_RCC_ClockConfig+0x26c>)
 8005468:	5ccb      	ldrb	r3, [r1, r3]
 800546a:	f003 031f 	and.w	r3, r3, #31
 800546e:	fa22 f303 	lsr.w	r3, r2, r3
 8005472:	4a0a      	ldr	r2, [pc, #40]	; (800549c <HAL_RCC_ClockConfig+0x270>)
 8005474:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005476:	4b0a      	ldr	r3, [pc, #40]	; (80054a0 <HAL_RCC_ClockConfig+0x274>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4618      	mov	r0, r3
 800547c:	f7fc fa76 	bl	800196c <HAL_InitTick>
 8005480:	4603      	mov	r3, r0
}
 8005482:	4618      	mov	r0, r3
 8005484:	3718      	adds	r7, #24
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
 800548a:	bf00      	nop
 800548c:	40022000 	.word	0x40022000
 8005490:	40021000 	.word	0x40021000
 8005494:	04c4b400 	.word	0x04c4b400
 8005498:	08007c98 	.word	0x08007c98
 800549c:	20000214 	.word	0x20000214
 80054a0:	20000218 	.word	0x20000218

080054a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b087      	sub	sp, #28
 80054a8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80054aa:	4b2c      	ldr	r3, [pc, #176]	; (800555c <HAL_RCC_GetSysClockFreq+0xb8>)
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	f003 030c 	and.w	r3, r3, #12
 80054b2:	2b04      	cmp	r3, #4
 80054b4:	d102      	bne.n	80054bc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80054b6:	4b2a      	ldr	r3, [pc, #168]	; (8005560 <HAL_RCC_GetSysClockFreq+0xbc>)
 80054b8:	613b      	str	r3, [r7, #16]
 80054ba:	e047      	b.n	800554c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80054bc:	4b27      	ldr	r3, [pc, #156]	; (800555c <HAL_RCC_GetSysClockFreq+0xb8>)
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	f003 030c 	and.w	r3, r3, #12
 80054c4:	2b08      	cmp	r3, #8
 80054c6:	d102      	bne.n	80054ce <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80054c8:	4b26      	ldr	r3, [pc, #152]	; (8005564 <HAL_RCC_GetSysClockFreq+0xc0>)
 80054ca:	613b      	str	r3, [r7, #16]
 80054cc:	e03e      	b.n	800554c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80054ce:	4b23      	ldr	r3, [pc, #140]	; (800555c <HAL_RCC_GetSysClockFreq+0xb8>)
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	f003 030c 	and.w	r3, r3, #12
 80054d6:	2b0c      	cmp	r3, #12
 80054d8:	d136      	bne.n	8005548 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80054da:	4b20      	ldr	r3, [pc, #128]	; (800555c <HAL_RCC_GetSysClockFreq+0xb8>)
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	f003 0303 	and.w	r3, r3, #3
 80054e2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80054e4:	4b1d      	ldr	r3, [pc, #116]	; (800555c <HAL_RCC_GetSysClockFreq+0xb8>)
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	091b      	lsrs	r3, r3, #4
 80054ea:	f003 030f 	and.w	r3, r3, #15
 80054ee:	3301      	adds	r3, #1
 80054f0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2b03      	cmp	r3, #3
 80054f6:	d10c      	bne.n	8005512 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80054f8:	4a1a      	ldr	r2, [pc, #104]	; (8005564 <HAL_RCC_GetSysClockFreq+0xc0>)
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005500:	4a16      	ldr	r2, [pc, #88]	; (800555c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005502:	68d2      	ldr	r2, [r2, #12]
 8005504:	0a12      	lsrs	r2, r2, #8
 8005506:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800550a:	fb02 f303 	mul.w	r3, r2, r3
 800550e:	617b      	str	r3, [r7, #20]
      break;
 8005510:	e00c      	b.n	800552c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005512:	4a13      	ldr	r2, [pc, #76]	; (8005560 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	fbb2 f3f3 	udiv	r3, r2, r3
 800551a:	4a10      	ldr	r2, [pc, #64]	; (800555c <HAL_RCC_GetSysClockFreq+0xb8>)
 800551c:	68d2      	ldr	r2, [r2, #12]
 800551e:	0a12      	lsrs	r2, r2, #8
 8005520:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005524:	fb02 f303 	mul.w	r3, r2, r3
 8005528:	617b      	str	r3, [r7, #20]
      break;
 800552a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800552c:	4b0b      	ldr	r3, [pc, #44]	; (800555c <HAL_RCC_GetSysClockFreq+0xb8>)
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	0e5b      	lsrs	r3, r3, #25
 8005532:	f003 0303 	and.w	r3, r3, #3
 8005536:	3301      	adds	r3, #1
 8005538:	005b      	lsls	r3, r3, #1
 800553a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800553c:	697a      	ldr	r2, [r7, #20]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	fbb2 f3f3 	udiv	r3, r2, r3
 8005544:	613b      	str	r3, [r7, #16]
 8005546:	e001      	b.n	800554c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005548:	2300      	movs	r3, #0
 800554a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800554c:	693b      	ldr	r3, [r7, #16]
}
 800554e:	4618      	mov	r0, r3
 8005550:	371c      	adds	r7, #28
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr
 800555a:	bf00      	nop
 800555c:	40021000 	.word	0x40021000
 8005560:	00f42400 	.word	0x00f42400
 8005564:	02dc6c00 	.word	0x02dc6c00

08005568 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005568:	b480      	push	{r7}
 800556a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800556c:	4b03      	ldr	r3, [pc, #12]	; (800557c <HAL_RCC_GetHCLKFreq+0x14>)
 800556e:	681b      	ldr	r3, [r3, #0]
}
 8005570:	4618      	mov	r0, r3
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr
 800557a:	bf00      	nop
 800557c:	20000214 	.word	0x20000214

08005580 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005580:	b480      	push	{r7}
 8005582:	b087      	sub	sp, #28
 8005584:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005586:	4b1e      	ldr	r3, [pc, #120]	; (8005600 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	f003 0303 	and.w	r3, r3, #3
 800558e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005590:	4b1b      	ldr	r3, [pc, #108]	; (8005600 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	091b      	lsrs	r3, r3, #4
 8005596:	f003 030f 	and.w	r3, r3, #15
 800559a:	3301      	adds	r3, #1
 800559c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	2b03      	cmp	r3, #3
 80055a2:	d10c      	bne.n	80055be <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80055a4:	4a17      	ldr	r2, [pc, #92]	; (8005604 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80055ac:	4a14      	ldr	r2, [pc, #80]	; (8005600 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80055ae:	68d2      	ldr	r2, [r2, #12]
 80055b0:	0a12      	lsrs	r2, r2, #8
 80055b2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80055b6:	fb02 f303 	mul.w	r3, r2, r3
 80055ba:	617b      	str	r3, [r7, #20]
    break;
 80055bc:	e00c      	b.n	80055d8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80055be:	4a12      	ldr	r2, [pc, #72]	; (8005608 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80055c6:	4a0e      	ldr	r2, [pc, #56]	; (8005600 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80055c8:	68d2      	ldr	r2, [r2, #12]
 80055ca:	0a12      	lsrs	r2, r2, #8
 80055cc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80055d0:	fb02 f303 	mul.w	r3, r2, r3
 80055d4:	617b      	str	r3, [r7, #20]
    break;
 80055d6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80055d8:	4b09      	ldr	r3, [pc, #36]	; (8005600 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	0e5b      	lsrs	r3, r3, #25
 80055de:	f003 0303 	and.w	r3, r3, #3
 80055e2:	3301      	adds	r3, #1
 80055e4:	005b      	lsls	r3, r3, #1
 80055e6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80055e8:	697a      	ldr	r2, [r7, #20]
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80055f0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80055f2:	687b      	ldr	r3, [r7, #4]
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	371c      	adds	r7, #28
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr
 8005600:	40021000 	.word	0x40021000
 8005604:	02dc6c00 	.word	0x02dc6c00
 8005608:	00f42400 	.word	0x00f42400

0800560c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b086      	sub	sp, #24
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005614:	2300      	movs	r3, #0
 8005616:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005618:	2300      	movs	r3, #0
 800561a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005624:	2b00      	cmp	r3, #0
 8005626:	f000 8098 	beq.w	800575a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800562a:	2300      	movs	r3, #0
 800562c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800562e:	4b43      	ldr	r3, [pc, #268]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005636:	2b00      	cmp	r3, #0
 8005638:	d10d      	bne.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800563a:	4b40      	ldr	r3, [pc, #256]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800563c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800563e:	4a3f      	ldr	r2, [pc, #252]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005644:	6593      	str	r3, [r2, #88]	; 0x58
 8005646:	4b3d      	ldr	r3, [pc, #244]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800564a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800564e:	60bb      	str	r3, [r7, #8]
 8005650:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005652:	2301      	movs	r3, #1
 8005654:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005656:	4b3a      	ldr	r3, [pc, #232]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a39      	ldr	r2, [pc, #228]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800565c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005660:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005662:	f7fc f9cf 	bl	8001a04 <HAL_GetTick>
 8005666:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005668:	e009      	b.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800566a:	f7fc f9cb 	bl	8001a04 <HAL_GetTick>
 800566e:	4602      	mov	r2, r0
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	1ad3      	subs	r3, r2, r3
 8005674:	2b02      	cmp	r3, #2
 8005676:	d902      	bls.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005678:	2303      	movs	r3, #3
 800567a:	74fb      	strb	r3, [r7, #19]
        break;
 800567c:	e005      	b.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800567e:	4b30      	ldr	r3, [pc, #192]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005686:	2b00      	cmp	r3, #0
 8005688:	d0ef      	beq.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800568a:	7cfb      	ldrb	r3, [r7, #19]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d159      	bne.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005690:	4b2a      	ldr	r3, [pc, #168]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005696:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800569a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d01e      	beq.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a6:	697a      	ldr	r2, [r7, #20]
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d019      	beq.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80056ac:	4b23      	ldr	r3, [pc, #140]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056b6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80056b8:	4b20      	ldr	r3, [pc, #128]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056be:	4a1f      	ldr	r2, [pc, #124]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80056c8:	4b1c      	ldr	r3, [pc, #112]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056ce:	4a1b      	ldr	r2, [pc, #108]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80056d8:	4a18      	ldr	r2, [pc, #96]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	f003 0301 	and.w	r3, r3, #1
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d016      	beq.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056ea:	f7fc f98b 	bl	8001a04 <HAL_GetTick>
 80056ee:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056f0:	e00b      	b.n	800570a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056f2:	f7fc f987 	bl	8001a04 <HAL_GetTick>
 80056f6:	4602      	mov	r2, r0
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	1ad3      	subs	r3, r2, r3
 80056fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005700:	4293      	cmp	r3, r2
 8005702:	d902      	bls.n	800570a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005704:	2303      	movs	r3, #3
 8005706:	74fb      	strb	r3, [r7, #19]
            break;
 8005708:	e006      	b.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800570a:	4b0c      	ldr	r3, [pc, #48]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800570c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005710:	f003 0302 	and.w	r3, r3, #2
 8005714:	2b00      	cmp	r3, #0
 8005716:	d0ec      	beq.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005718:	7cfb      	ldrb	r3, [r7, #19]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d10b      	bne.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800571e:	4b07      	ldr	r3, [pc, #28]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005724:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572c:	4903      	ldr	r1, [pc, #12]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800572e:	4313      	orrs	r3, r2
 8005730:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005734:	e008      	b.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005736:	7cfb      	ldrb	r3, [r7, #19]
 8005738:	74bb      	strb	r3, [r7, #18]
 800573a:	e005      	b.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800573c:	40021000 	.word	0x40021000
 8005740:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005744:	7cfb      	ldrb	r3, [r7, #19]
 8005746:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005748:	7c7b      	ldrb	r3, [r7, #17]
 800574a:	2b01      	cmp	r3, #1
 800574c:	d105      	bne.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800574e:	4ba6      	ldr	r3, [pc, #664]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005752:	4aa5      	ldr	r2, [pc, #660]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005754:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005758:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f003 0301 	and.w	r3, r3, #1
 8005762:	2b00      	cmp	r3, #0
 8005764:	d00a      	beq.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005766:	4ba0      	ldr	r3, [pc, #640]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005768:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800576c:	f023 0203 	bic.w	r2, r3, #3
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	499c      	ldr	r1, [pc, #624]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005776:	4313      	orrs	r3, r2
 8005778:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 0302 	and.w	r3, r3, #2
 8005784:	2b00      	cmp	r3, #0
 8005786:	d00a      	beq.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005788:	4b97      	ldr	r3, [pc, #604]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800578a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800578e:	f023 020c 	bic.w	r2, r3, #12
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	4994      	ldr	r1, [pc, #592]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005798:	4313      	orrs	r3, r2
 800579a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f003 0304 	and.w	r3, r3, #4
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d00a      	beq.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80057aa:	4b8f      	ldr	r3, [pc, #572]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057b0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	498b      	ldr	r1, [pc, #556]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057ba:	4313      	orrs	r3, r2
 80057bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 0308 	and.w	r3, r3, #8
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d00a      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80057cc:	4b86      	ldr	r3, [pc, #536]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057d2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	691b      	ldr	r3, [r3, #16]
 80057da:	4983      	ldr	r1, [pc, #524]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057dc:	4313      	orrs	r3, r2
 80057de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f003 0320 	and.w	r3, r3, #32
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d00a      	beq.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80057ee:	4b7e      	ldr	r3, [pc, #504]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057f4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	695b      	ldr	r3, [r3, #20]
 80057fc:	497a      	ldr	r1, [pc, #488]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057fe:	4313      	orrs	r3, r2
 8005800:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800580c:	2b00      	cmp	r3, #0
 800580e:	d00a      	beq.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005810:	4b75      	ldr	r3, [pc, #468]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005816:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	699b      	ldr	r3, [r3, #24]
 800581e:	4972      	ldr	r1, [pc, #456]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005820:	4313      	orrs	r3, r2
 8005822:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800582e:	2b00      	cmp	r3, #0
 8005830:	d00a      	beq.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005832:	4b6d      	ldr	r3, [pc, #436]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005834:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005838:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	69db      	ldr	r3, [r3, #28]
 8005840:	4969      	ldr	r1, [pc, #420]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005842:	4313      	orrs	r3, r2
 8005844:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005850:	2b00      	cmp	r3, #0
 8005852:	d00a      	beq.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005854:	4b64      	ldr	r3, [pc, #400]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800585a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a1b      	ldr	r3, [r3, #32]
 8005862:	4961      	ldr	r1, [pc, #388]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005864:	4313      	orrs	r3, r2
 8005866:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005872:	2b00      	cmp	r3, #0
 8005874:	d00a      	beq.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005876:	4b5c      	ldr	r3, [pc, #368]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005878:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800587c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005884:	4958      	ldr	r1, [pc, #352]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005886:	4313      	orrs	r3, r2
 8005888:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005894:	2b00      	cmp	r3, #0
 8005896:	d015      	beq.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005898:	4b53      	ldr	r3, [pc, #332]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800589a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800589e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058a6:	4950      	ldr	r1, [pc, #320]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058a8:	4313      	orrs	r3, r2
 80058aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058b6:	d105      	bne.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058b8:	4b4b      	ldr	r3, [pc, #300]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	4a4a      	ldr	r2, [pc, #296]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80058c2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d015      	beq.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80058d0:	4b45      	ldr	r3, [pc, #276]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058d6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058de:	4942      	ldr	r1, [pc, #264]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058e0:	4313      	orrs	r3, r2
 80058e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058ee:	d105      	bne.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058f0:	4b3d      	ldr	r3, [pc, #244]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	4a3c      	ldr	r2, [pc, #240]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80058fa:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005904:	2b00      	cmp	r3, #0
 8005906:	d015      	beq.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005908:	4b37      	ldr	r3, [pc, #220]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800590a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800590e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005916:	4934      	ldr	r1, [pc, #208]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005918:	4313      	orrs	r3, r2
 800591a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005922:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005926:	d105      	bne.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005928:	4b2f      	ldr	r3, [pc, #188]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	4a2e      	ldr	r2, [pc, #184]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800592e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005932:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800593c:	2b00      	cmp	r3, #0
 800593e:	d015      	beq.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005940:	4b29      	ldr	r3, [pc, #164]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005946:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800594e:	4926      	ldr	r1, [pc, #152]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005950:	4313      	orrs	r3, r2
 8005952:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800595a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800595e:	d105      	bne.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005960:	4b21      	ldr	r3, [pc, #132]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	4a20      	ldr	r2, [pc, #128]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005966:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800596a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005974:	2b00      	cmp	r3, #0
 8005976:	d015      	beq.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005978:	4b1b      	ldr	r3, [pc, #108]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800597a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800597e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005986:	4918      	ldr	r1, [pc, #96]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005988:	4313      	orrs	r3, r2
 800598a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005992:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005996:	d105      	bne.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005998:	4b13      	ldr	r3, [pc, #76]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	4a12      	ldr	r2, [pc, #72]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800599e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059a2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d015      	beq.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80059b0:	4b0d      	ldr	r3, [pc, #52]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059b6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059be:	490a      	ldr	r1, [pc, #40]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059c0:	4313      	orrs	r3, r2
 80059c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80059ce:	d105      	bne.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80059d0:	4b05      	ldr	r3, [pc, #20]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	4a04      	ldr	r2, [pc, #16]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059da:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80059dc:	7cbb      	ldrb	r3, [r7, #18]
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3718      	adds	r7, #24
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop
 80059e8:	40021000 	.word	0x40021000

080059ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b082      	sub	sp, #8
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d101      	bne.n	80059fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	e049      	b.n	8005a92 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d106      	bne.n	8005a18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f7fb fe96 	bl	8001744 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2202      	movs	r2, #2
 8005a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	3304      	adds	r3, #4
 8005a28:	4619      	mov	r1, r3
 8005a2a:	4610      	mov	r0, r2
 8005a2c:	f000 fba4 	bl	8006178 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2201      	movs	r2, #1
 8005a44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2201      	movs	r2, #1
 8005a54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a90:	2300      	movs	r3, #0
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3708      	adds	r7, #8
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
	...

08005a9c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b085      	sub	sp, #20
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d001      	beq.n	8005ab4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	e042      	b.n	8005b3a <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2202      	movs	r2, #2
 8005ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a21      	ldr	r2, [pc, #132]	; (8005b48 <HAL_TIM_Base_Start+0xac>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d018      	beq.n	8005af8 <HAL_TIM_Base_Start+0x5c>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ace:	d013      	beq.n	8005af8 <HAL_TIM_Base_Start+0x5c>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a1d      	ldr	r2, [pc, #116]	; (8005b4c <HAL_TIM_Base_Start+0xb0>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d00e      	beq.n	8005af8 <HAL_TIM_Base_Start+0x5c>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a1c      	ldr	r2, [pc, #112]	; (8005b50 <HAL_TIM_Base_Start+0xb4>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d009      	beq.n	8005af8 <HAL_TIM_Base_Start+0x5c>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a1a      	ldr	r2, [pc, #104]	; (8005b54 <HAL_TIM_Base_Start+0xb8>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d004      	beq.n	8005af8 <HAL_TIM_Base_Start+0x5c>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a19      	ldr	r2, [pc, #100]	; (8005b58 <HAL_TIM_Base_Start+0xbc>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d115      	bne.n	8005b24 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	689a      	ldr	r2, [r3, #8]
 8005afe:	4b17      	ldr	r3, [pc, #92]	; (8005b5c <HAL_TIM_Base_Start+0xc0>)
 8005b00:	4013      	ands	r3, r2
 8005b02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2b06      	cmp	r3, #6
 8005b08:	d015      	beq.n	8005b36 <HAL_TIM_Base_Start+0x9a>
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b10:	d011      	beq.n	8005b36 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f042 0201 	orr.w	r2, r2, #1
 8005b20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b22:	e008      	b.n	8005b36 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f042 0201 	orr.w	r2, r2, #1
 8005b32:	601a      	str	r2, [r3, #0]
 8005b34:	e000      	b.n	8005b38 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b36:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005b38:	2300      	movs	r3, #0
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3714      	adds	r7, #20
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b44:	4770      	bx	lr
 8005b46:	bf00      	nop
 8005b48:	40012c00 	.word	0x40012c00
 8005b4c:	40000400 	.word	0x40000400
 8005b50:	40000800 	.word	0x40000800
 8005b54:	40013400 	.word	0x40013400
 8005b58:	40014000 	.word	0x40014000
 8005b5c:	00010007 	.word	0x00010007

08005b60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b085      	sub	sp, #20
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d001      	beq.n	8005b78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b74:	2301      	movs	r3, #1
 8005b76:	e04a      	b.n	8005c0e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2202      	movs	r2, #2
 8005b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	68da      	ldr	r2, [r3, #12]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f042 0201 	orr.w	r2, r2, #1
 8005b8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a21      	ldr	r2, [pc, #132]	; (8005c1c <HAL_TIM_Base_Start_IT+0xbc>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d018      	beq.n	8005bcc <HAL_TIM_Base_Start_IT+0x6c>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ba2:	d013      	beq.n	8005bcc <HAL_TIM_Base_Start_IT+0x6c>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a1d      	ldr	r2, [pc, #116]	; (8005c20 <HAL_TIM_Base_Start_IT+0xc0>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d00e      	beq.n	8005bcc <HAL_TIM_Base_Start_IT+0x6c>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a1c      	ldr	r2, [pc, #112]	; (8005c24 <HAL_TIM_Base_Start_IT+0xc4>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d009      	beq.n	8005bcc <HAL_TIM_Base_Start_IT+0x6c>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a1a      	ldr	r2, [pc, #104]	; (8005c28 <HAL_TIM_Base_Start_IT+0xc8>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d004      	beq.n	8005bcc <HAL_TIM_Base_Start_IT+0x6c>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a19      	ldr	r2, [pc, #100]	; (8005c2c <HAL_TIM_Base_Start_IT+0xcc>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d115      	bne.n	8005bf8 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	689a      	ldr	r2, [r3, #8]
 8005bd2:	4b17      	ldr	r3, [pc, #92]	; (8005c30 <HAL_TIM_Base_Start_IT+0xd0>)
 8005bd4:	4013      	ands	r3, r2
 8005bd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2b06      	cmp	r3, #6
 8005bdc:	d015      	beq.n	8005c0a <HAL_TIM_Base_Start_IT+0xaa>
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005be4:	d011      	beq.n	8005c0a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f042 0201 	orr.w	r2, r2, #1
 8005bf4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bf6:	e008      	b.n	8005c0a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f042 0201 	orr.w	r2, r2, #1
 8005c06:	601a      	str	r2, [r3, #0]
 8005c08:	e000      	b.n	8005c0c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c0a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c0c:	2300      	movs	r3, #0
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3714      	adds	r7, #20
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr
 8005c1a:	bf00      	nop
 8005c1c:	40012c00 	.word	0x40012c00
 8005c20:	40000400 	.word	0x40000400
 8005c24:	40000800 	.word	0x40000800
 8005c28:	40013400 	.word	0x40013400
 8005c2c:	40014000 	.word	0x40014000
 8005c30:	00010007 	.word	0x00010007

08005c34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b082      	sub	sp, #8
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	691b      	ldr	r3, [r3, #16]
 8005c42:	f003 0302 	and.w	r3, r3, #2
 8005c46:	2b02      	cmp	r3, #2
 8005c48:	d122      	bne.n	8005c90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	68db      	ldr	r3, [r3, #12]
 8005c50:	f003 0302 	and.w	r3, r3, #2
 8005c54:	2b02      	cmp	r3, #2
 8005c56:	d11b      	bne.n	8005c90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f06f 0202 	mvn.w	r2, #2
 8005c60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2201      	movs	r2, #1
 8005c66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	699b      	ldr	r3, [r3, #24]
 8005c6e:	f003 0303 	and.w	r3, r3, #3
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d003      	beq.n	8005c7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f000 fa60 	bl	800613c <HAL_TIM_IC_CaptureCallback>
 8005c7c:	e005      	b.n	8005c8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f000 fa52 	bl	8006128 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f000 fa63 	bl	8006150 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	691b      	ldr	r3, [r3, #16]
 8005c96:	f003 0304 	and.w	r3, r3, #4
 8005c9a:	2b04      	cmp	r3, #4
 8005c9c:	d122      	bne.n	8005ce4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	f003 0304 	and.w	r3, r3, #4
 8005ca8:	2b04      	cmp	r3, #4
 8005caa:	d11b      	bne.n	8005ce4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f06f 0204 	mvn.w	r2, #4
 8005cb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2202      	movs	r2, #2
 8005cba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	699b      	ldr	r3, [r3, #24]
 8005cc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d003      	beq.n	8005cd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f000 fa36 	bl	800613c <HAL_TIM_IC_CaptureCallback>
 8005cd0:	e005      	b.n	8005cde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f000 fa28 	bl	8006128 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f000 fa39 	bl	8006150 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	691b      	ldr	r3, [r3, #16]
 8005cea:	f003 0308 	and.w	r3, r3, #8
 8005cee:	2b08      	cmp	r3, #8
 8005cf0:	d122      	bne.n	8005d38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	f003 0308 	and.w	r3, r3, #8
 8005cfc:	2b08      	cmp	r3, #8
 8005cfe:	d11b      	bne.n	8005d38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f06f 0208 	mvn.w	r2, #8
 8005d08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2204      	movs	r2, #4
 8005d0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	69db      	ldr	r3, [r3, #28]
 8005d16:	f003 0303 	and.w	r3, r3, #3
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d003      	beq.n	8005d26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f000 fa0c 	bl	800613c <HAL_TIM_IC_CaptureCallback>
 8005d24:	e005      	b.n	8005d32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f000 f9fe 	bl	8006128 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f000 fa0f 	bl	8006150 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2200      	movs	r2, #0
 8005d36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	691b      	ldr	r3, [r3, #16]
 8005d3e:	f003 0310 	and.w	r3, r3, #16
 8005d42:	2b10      	cmp	r3, #16
 8005d44:	d122      	bne.n	8005d8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	68db      	ldr	r3, [r3, #12]
 8005d4c:	f003 0310 	and.w	r3, r3, #16
 8005d50:	2b10      	cmp	r3, #16
 8005d52:	d11b      	bne.n	8005d8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f06f 0210 	mvn.w	r2, #16
 8005d5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2208      	movs	r2, #8
 8005d62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	69db      	ldr	r3, [r3, #28]
 8005d6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d003      	beq.n	8005d7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 f9e2 	bl	800613c <HAL_TIM_IC_CaptureCallback>
 8005d78:	e005      	b.n	8005d86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f000 f9d4 	bl	8006128 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f000 f9e5 	bl	8006150 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	691b      	ldr	r3, [r3, #16]
 8005d92:	f003 0301 	and.w	r3, r3, #1
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	d10e      	bne.n	8005db8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	f003 0301 	and.w	r3, r3, #1
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d107      	bne.n	8005db8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f06f 0201 	mvn.w	r2, #1
 8005db0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f7fb f83c 	bl	8000e30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	691b      	ldr	r3, [r3, #16]
 8005dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dc2:	2b80      	cmp	r3, #128	; 0x80
 8005dc4:	d10e      	bne.n	8005de4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dd0:	2b80      	cmp	r3, #128	; 0x80
 8005dd2:	d107      	bne.n	8005de4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ddc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 fb82 	bl	80064e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	691b      	ldr	r3, [r3, #16]
 8005dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005df2:	d10e      	bne.n	8005e12 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	68db      	ldr	r3, [r3, #12]
 8005dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dfe:	2b80      	cmp	r3, #128	; 0x80
 8005e00:	d107      	bne.n	8005e12 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005e0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f000 fb75 	bl	80064fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	691b      	ldr	r3, [r3, #16]
 8005e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e1c:	2b40      	cmp	r3, #64	; 0x40
 8005e1e:	d10e      	bne.n	8005e3e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	68db      	ldr	r3, [r3, #12]
 8005e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e2a:	2b40      	cmp	r3, #64	; 0x40
 8005e2c:	d107      	bne.n	8005e3e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f000 f993 	bl	8006164 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	691b      	ldr	r3, [r3, #16]
 8005e44:	f003 0320 	and.w	r3, r3, #32
 8005e48:	2b20      	cmp	r3, #32
 8005e4a:	d10e      	bne.n	8005e6a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	68db      	ldr	r3, [r3, #12]
 8005e52:	f003 0320 	and.w	r3, r3, #32
 8005e56:	2b20      	cmp	r3, #32
 8005e58:	d107      	bne.n	8005e6a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f06f 0220 	mvn.w	r2, #32
 8005e62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f000 fb35 	bl	80064d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	691b      	ldr	r3, [r3, #16]
 8005e70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e78:	d10f      	bne.n	8005e9a <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	68db      	ldr	r3, [r3, #12]
 8005e80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e88:	d107      	bne.n	8005e9a <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005e92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f000 fb3b 	bl	8006510 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	691b      	ldr	r3, [r3, #16]
 8005ea0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ea4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ea8:	d10f      	bne.n	8005eca <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005eb4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005eb8:	d107      	bne.n	8005eca <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8005ec2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f000 fb2d 	bl	8006524 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	691b      	ldr	r3, [r3, #16]
 8005ed0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ed4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ed8:	d10f      	bne.n	8005efa <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ee4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ee8:	d107      	bne.n	8005efa <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8005ef2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f000 fb1f 	bl	8006538 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	691b      	ldr	r3, [r3, #16]
 8005f00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f04:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005f08:	d10f      	bne.n	8005f2a <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	68db      	ldr	r3, [r3, #12]
 8005f10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f14:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005f18:	d107      	bne.n	8005f2a <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8005f22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f000 fb11 	bl	800654c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f2a:	bf00      	nop
 8005f2c:	3708      	adds	r7, #8
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
	...

08005f34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b084      	sub	sp, #16
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d101      	bne.n	8005f50 <HAL_TIM_ConfigClockSource+0x1c>
 8005f4c:	2302      	movs	r3, #2
 8005f4e:	e0de      	b.n	800610e <HAL_TIM_ConfigClockSource+0x1da>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2201      	movs	r2, #1
 8005f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2202      	movs	r2, #2
 8005f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8005f6e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005f72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f7a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	68ba      	ldr	r2, [r7, #8]
 8005f82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a63      	ldr	r2, [pc, #396]	; (8006118 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	f000 80a9 	beq.w	80060e2 <HAL_TIM_ConfigClockSource+0x1ae>
 8005f90:	4a61      	ldr	r2, [pc, #388]	; (8006118 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	f200 80ae 	bhi.w	80060f4 <HAL_TIM_ConfigClockSource+0x1c0>
 8005f98:	4a60      	ldr	r2, [pc, #384]	; (800611c <HAL_TIM_ConfigClockSource+0x1e8>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	f000 80a1 	beq.w	80060e2 <HAL_TIM_ConfigClockSource+0x1ae>
 8005fa0:	4a5e      	ldr	r2, [pc, #376]	; (800611c <HAL_TIM_ConfigClockSource+0x1e8>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	f200 80a6 	bhi.w	80060f4 <HAL_TIM_ConfigClockSource+0x1c0>
 8005fa8:	4a5d      	ldr	r2, [pc, #372]	; (8006120 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	f000 8099 	beq.w	80060e2 <HAL_TIM_ConfigClockSource+0x1ae>
 8005fb0:	4a5b      	ldr	r2, [pc, #364]	; (8006120 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	f200 809e 	bhi.w	80060f4 <HAL_TIM_ConfigClockSource+0x1c0>
 8005fb8:	4a5a      	ldr	r2, [pc, #360]	; (8006124 <HAL_TIM_ConfigClockSource+0x1f0>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	f000 8091 	beq.w	80060e2 <HAL_TIM_ConfigClockSource+0x1ae>
 8005fc0:	4a58      	ldr	r2, [pc, #352]	; (8006124 <HAL_TIM_ConfigClockSource+0x1f0>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	f200 8096 	bhi.w	80060f4 <HAL_TIM_ConfigClockSource+0x1c0>
 8005fc8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005fcc:	f000 8089 	beq.w	80060e2 <HAL_TIM_ConfigClockSource+0x1ae>
 8005fd0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005fd4:	f200 808e 	bhi.w	80060f4 <HAL_TIM_ConfigClockSource+0x1c0>
 8005fd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fdc:	d03e      	beq.n	800605c <HAL_TIM_ConfigClockSource+0x128>
 8005fde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fe2:	f200 8087 	bhi.w	80060f4 <HAL_TIM_ConfigClockSource+0x1c0>
 8005fe6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fea:	f000 8086 	beq.w	80060fa <HAL_TIM_ConfigClockSource+0x1c6>
 8005fee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ff2:	d87f      	bhi.n	80060f4 <HAL_TIM_ConfigClockSource+0x1c0>
 8005ff4:	2b70      	cmp	r3, #112	; 0x70
 8005ff6:	d01a      	beq.n	800602e <HAL_TIM_ConfigClockSource+0xfa>
 8005ff8:	2b70      	cmp	r3, #112	; 0x70
 8005ffa:	d87b      	bhi.n	80060f4 <HAL_TIM_ConfigClockSource+0x1c0>
 8005ffc:	2b60      	cmp	r3, #96	; 0x60
 8005ffe:	d050      	beq.n	80060a2 <HAL_TIM_ConfigClockSource+0x16e>
 8006000:	2b60      	cmp	r3, #96	; 0x60
 8006002:	d877      	bhi.n	80060f4 <HAL_TIM_ConfigClockSource+0x1c0>
 8006004:	2b50      	cmp	r3, #80	; 0x50
 8006006:	d03c      	beq.n	8006082 <HAL_TIM_ConfigClockSource+0x14e>
 8006008:	2b50      	cmp	r3, #80	; 0x50
 800600a:	d873      	bhi.n	80060f4 <HAL_TIM_ConfigClockSource+0x1c0>
 800600c:	2b40      	cmp	r3, #64	; 0x40
 800600e:	d058      	beq.n	80060c2 <HAL_TIM_ConfigClockSource+0x18e>
 8006010:	2b40      	cmp	r3, #64	; 0x40
 8006012:	d86f      	bhi.n	80060f4 <HAL_TIM_ConfigClockSource+0x1c0>
 8006014:	2b30      	cmp	r3, #48	; 0x30
 8006016:	d064      	beq.n	80060e2 <HAL_TIM_ConfigClockSource+0x1ae>
 8006018:	2b30      	cmp	r3, #48	; 0x30
 800601a:	d86b      	bhi.n	80060f4 <HAL_TIM_ConfigClockSource+0x1c0>
 800601c:	2b20      	cmp	r3, #32
 800601e:	d060      	beq.n	80060e2 <HAL_TIM_ConfigClockSource+0x1ae>
 8006020:	2b20      	cmp	r3, #32
 8006022:	d867      	bhi.n	80060f4 <HAL_TIM_ConfigClockSource+0x1c0>
 8006024:	2b00      	cmp	r3, #0
 8006026:	d05c      	beq.n	80060e2 <HAL_TIM_ConfigClockSource+0x1ae>
 8006028:	2b10      	cmp	r3, #16
 800602a:	d05a      	beq.n	80060e2 <HAL_TIM_ConfigClockSource+0x1ae>
 800602c:	e062      	b.n	80060f4 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6818      	ldr	r0, [r3, #0]
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	6899      	ldr	r1, [r3, #8]
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	685a      	ldr	r2, [r3, #4]
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	68db      	ldr	r3, [r3, #12]
 800603e:	f000 f9a7 	bl	8006390 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006050:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	68ba      	ldr	r2, [r7, #8]
 8006058:	609a      	str	r2, [r3, #8]
      break;
 800605a:	e04f      	b.n	80060fc <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6818      	ldr	r0, [r3, #0]
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	6899      	ldr	r1, [r3, #8]
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	685a      	ldr	r2, [r3, #4]
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	f000 f990 	bl	8006390 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	689a      	ldr	r2, [r3, #8]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800607e:	609a      	str	r2, [r3, #8]
      break;
 8006080:	e03c      	b.n	80060fc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6818      	ldr	r0, [r3, #0]
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	6859      	ldr	r1, [r3, #4]
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	461a      	mov	r2, r3
 8006090:	f000 f902 	bl	8006298 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	2150      	movs	r1, #80	; 0x50
 800609a:	4618      	mov	r0, r3
 800609c:	f000 f95b 	bl	8006356 <TIM_ITRx_SetConfig>
      break;
 80060a0:	e02c      	b.n	80060fc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6818      	ldr	r0, [r3, #0]
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	6859      	ldr	r1, [r3, #4]
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	461a      	mov	r2, r3
 80060b0:	f000 f921 	bl	80062f6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	2160      	movs	r1, #96	; 0x60
 80060ba:	4618      	mov	r0, r3
 80060bc:	f000 f94b 	bl	8006356 <TIM_ITRx_SetConfig>
      break;
 80060c0:	e01c      	b.n	80060fc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6818      	ldr	r0, [r3, #0]
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	6859      	ldr	r1, [r3, #4]
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	68db      	ldr	r3, [r3, #12]
 80060ce:	461a      	mov	r2, r3
 80060d0:	f000 f8e2 	bl	8006298 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	2140      	movs	r1, #64	; 0x40
 80060da:	4618      	mov	r0, r3
 80060dc:	f000 f93b 	bl	8006356 <TIM_ITRx_SetConfig>
      break;
 80060e0:	e00c      	b.n	80060fc <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4619      	mov	r1, r3
 80060ec:	4610      	mov	r0, r2
 80060ee:	f000 f932 	bl	8006356 <TIM_ITRx_SetConfig>
      break;
 80060f2:	e003      	b.n	80060fc <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	73fb      	strb	r3, [r7, #15]
      break;
 80060f8:	e000      	b.n	80060fc <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80060fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2201      	movs	r2, #1
 8006100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800610c:	7bfb      	ldrb	r3, [r7, #15]
}
 800610e:	4618      	mov	r0, r3
 8006110:	3710      	adds	r7, #16
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
 8006116:	bf00      	nop
 8006118:	00100070 	.word	0x00100070
 800611c:	00100040 	.word	0x00100040
 8006120:	00100030 	.word	0x00100030
 8006124:	00100020 	.word	0x00100020

08006128 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006128:	b480      	push	{r7}
 800612a:	b083      	sub	sp, #12
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006130:	bf00      	nop
 8006132:	370c      	adds	r7, #12
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr

0800613c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800613c:	b480      	push	{r7}
 800613e:	b083      	sub	sp, #12
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006144:	bf00      	nop
 8006146:	370c      	adds	r7, #12
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr

08006150 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006150:	b480      	push	{r7}
 8006152:	b083      	sub	sp, #12
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006158:	bf00      	nop
 800615a:	370c      	adds	r7, #12
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr

08006164 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006164:	b480      	push	{r7}
 8006166:	b083      	sub	sp, #12
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800616c:	bf00      	nop
 800616e:	370c      	adds	r7, #12
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr

08006178 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006178:	b480      	push	{r7}
 800617a:	b085      	sub	sp, #20
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4a3c      	ldr	r2, [pc, #240]	; (800627c <TIM_Base_SetConfig+0x104>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d00f      	beq.n	80061b0 <TIM_Base_SetConfig+0x38>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006196:	d00b      	beq.n	80061b0 <TIM_Base_SetConfig+0x38>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	4a39      	ldr	r2, [pc, #228]	; (8006280 <TIM_Base_SetConfig+0x108>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d007      	beq.n	80061b0 <TIM_Base_SetConfig+0x38>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	4a38      	ldr	r2, [pc, #224]	; (8006284 <TIM_Base_SetConfig+0x10c>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d003      	beq.n	80061b0 <TIM_Base_SetConfig+0x38>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	4a37      	ldr	r2, [pc, #220]	; (8006288 <TIM_Base_SetConfig+0x110>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d108      	bne.n	80061c2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	68fa      	ldr	r2, [r7, #12]
 80061be:	4313      	orrs	r3, r2
 80061c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4a2d      	ldr	r2, [pc, #180]	; (800627c <TIM_Base_SetConfig+0x104>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d01b      	beq.n	8006202 <TIM_Base_SetConfig+0x8a>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061d0:	d017      	beq.n	8006202 <TIM_Base_SetConfig+0x8a>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4a2a      	ldr	r2, [pc, #168]	; (8006280 <TIM_Base_SetConfig+0x108>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d013      	beq.n	8006202 <TIM_Base_SetConfig+0x8a>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4a29      	ldr	r2, [pc, #164]	; (8006284 <TIM_Base_SetConfig+0x10c>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d00f      	beq.n	8006202 <TIM_Base_SetConfig+0x8a>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4a28      	ldr	r2, [pc, #160]	; (8006288 <TIM_Base_SetConfig+0x110>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d00b      	beq.n	8006202 <TIM_Base_SetConfig+0x8a>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a27      	ldr	r2, [pc, #156]	; (800628c <TIM_Base_SetConfig+0x114>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d007      	beq.n	8006202 <TIM_Base_SetConfig+0x8a>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4a26      	ldr	r2, [pc, #152]	; (8006290 <TIM_Base_SetConfig+0x118>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d003      	beq.n	8006202 <TIM_Base_SetConfig+0x8a>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4a25      	ldr	r2, [pc, #148]	; (8006294 <TIM_Base_SetConfig+0x11c>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d108      	bne.n	8006214 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006208:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	68db      	ldr	r3, [r3, #12]
 800620e:	68fa      	ldr	r2, [r7, #12]
 8006210:	4313      	orrs	r3, r2
 8006212:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	695b      	ldr	r3, [r3, #20]
 800621e:	4313      	orrs	r3, r2
 8006220:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	68fa      	ldr	r2, [r7, #12]
 8006226:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	689a      	ldr	r2, [r3, #8]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	4a10      	ldr	r2, [pc, #64]	; (800627c <TIM_Base_SetConfig+0x104>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d00f      	beq.n	8006260 <TIM_Base_SetConfig+0xe8>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	4a11      	ldr	r2, [pc, #68]	; (8006288 <TIM_Base_SetConfig+0x110>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d00b      	beq.n	8006260 <TIM_Base_SetConfig+0xe8>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	4a10      	ldr	r2, [pc, #64]	; (800628c <TIM_Base_SetConfig+0x114>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d007      	beq.n	8006260 <TIM_Base_SetConfig+0xe8>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	4a0f      	ldr	r2, [pc, #60]	; (8006290 <TIM_Base_SetConfig+0x118>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d003      	beq.n	8006260 <TIM_Base_SetConfig+0xe8>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	4a0e      	ldr	r2, [pc, #56]	; (8006294 <TIM_Base_SetConfig+0x11c>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d103      	bne.n	8006268 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	691a      	ldr	r2, [r3, #16]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2201      	movs	r2, #1
 800626c:	615a      	str	r2, [r3, #20]
}
 800626e:	bf00      	nop
 8006270:	3714      	adds	r7, #20
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr
 800627a:	bf00      	nop
 800627c:	40012c00 	.word	0x40012c00
 8006280:	40000400 	.word	0x40000400
 8006284:	40000800 	.word	0x40000800
 8006288:	40013400 	.word	0x40013400
 800628c:	40014000 	.word	0x40014000
 8006290:	40014400 	.word	0x40014400
 8006294:	40014800 	.word	0x40014800

08006298 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006298:	b480      	push	{r7}
 800629a:	b087      	sub	sp, #28
 800629c:	af00      	add	r7, sp, #0
 800629e:	60f8      	str	r0, [r7, #12]
 80062a0:	60b9      	str	r1, [r7, #8]
 80062a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	6a1b      	ldr	r3, [r3, #32]
 80062a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	6a1b      	ldr	r3, [r3, #32]
 80062ae:	f023 0201 	bic.w	r2, r3, #1
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	699b      	ldr	r3, [r3, #24]
 80062ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80062c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	011b      	lsls	r3, r3, #4
 80062c8:	693a      	ldr	r2, [r7, #16]
 80062ca:	4313      	orrs	r3, r2
 80062cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	f023 030a 	bic.w	r3, r3, #10
 80062d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80062d6:	697a      	ldr	r2, [r7, #20]
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	4313      	orrs	r3, r2
 80062dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	693a      	ldr	r2, [r7, #16]
 80062e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	697a      	ldr	r2, [r7, #20]
 80062e8:	621a      	str	r2, [r3, #32]
}
 80062ea:	bf00      	nop
 80062ec:	371c      	adds	r7, #28
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr

080062f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062f6:	b480      	push	{r7}
 80062f8:	b087      	sub	sp, #28
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	60f8      	str	r0, [r7, #12]
 80062fe:	60b9      	str	r1, [r7, #8]
 8006300:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	6a1b      	ldr	r3, [r3, #32]
 8006306:	f023 0210 	bic.w	r2, r3, #16
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	699b      	ldr	r3, [r3, #24]
 8006312:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6a1b      	ldr	r3, [r3, #32]
 8006318:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006320:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	031b      	lsls	r3, r3, #12
 8006326:	697a      	ldr	r2, [r7, #20]
 8006328:	4313      	orrs	r3, r2
 800632a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006332:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	011b      	lsls	r3, r3, #4
 8006338:	693a      	ldr	r2, [r7, #16]
 800633a:	4313      	orrs	r3, r2
 800633c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	697a      	ldr	r2, [r7, #20]
 8006342:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	693a      	ldr	r2, [r7, #16]
 8006348:	621a      	str	r2, [r3, #32]
}
 800634a:	bf00      	nop
 800634c:	371c      	adds	r7, #28
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr

08006356 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006356:	b480      	push	{r7}
 8006358:	b085      	sub	sp, #20
 800635a:	af00      	add	r7, sp, #0
 800635c:	6078      	str	r0, [r7, #4]
 800635e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800636c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006370:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006372:	683a      	ldr	r2, [r7, #0]
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	4313      	orrs	r3, r2
 8006378:	f043 0307 	orr.w	r3, r3, #7
 800637c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	68fa      	ldr	r2, [r7, #12]
 8006382:	609a      	str	r2, [r3, #8]
}
 8006384:	bf00      	nop
 8006386:	3714      	adds	r7, #20
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr

08006390 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006390:	b480      	push	{r7}
 8006392:	b087      	sub	sp, #28
 8006394:	af00      	add	r7, sp, #0
 8006396:	60f8      	str	r0, [r7, #12]
 8006398:	60b9      	str	r1, [r7, #8]
 800639a:	607a      	str	r2, [r7, #4]
 800639c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	021a      	lsls	r2, r3, #8
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	431a      	orrs	r2, r3
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	697a      	ldr	r2, [r7, #20]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	697a      	ldr	r2, [r7, #20]
 80063c2:	609a      	str	r2, [r3, #8]
}
 80063c4:	bf00      	nop
 80063c6:	371c      	adds	r7, #28
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr

080063d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b085      	sub	sp, #20
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d101      	bne.n	80063e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80063e4:	2302      	movs	r3, #2
 80063e6:	e065      	b.n	80064b4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2201      	movs	r2, #1
 80063ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2202      	movs	r2, #2
 80063f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a2c      	ldr	r2, [pc, #176]	; (80064c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d004      	beq.n	800641c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a2b      	ldr	r2, [pc, #172]	; (80064c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d108      	bne.n	800642e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006422:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	68fa      	ldr	r2, [r7, #12]
 800642a:	4313      	orrs	r3, r2
 800642c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006434:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006438:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	68fa      	ldr	r2, [r7, #12]
 8006440:	4313      	orrs	r3, r2
 8006442:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	68fa      	ldr	r2, [r7, #12]
 800644a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a1b      	ldr	r2, [pc, #108]	; (80064c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d018      	beq.n	8006488 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800645e:	d013      	beq.n	8006488 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a18      	ldr	r2, [pc, #96]	; (80064c8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d00e      	beq.n	8006488 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a17      	ldr	r2, [pc, #92]	; (80064cc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d009      	beq.n	8006488 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a12      	ldr	r2, [pc, #72]	; (80064c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d004      	beq.n	8006488 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a13      	ldr	r2, [pc, #76]	; (80064d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d10c      	bne.n	80064a2 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800648e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	68ba      	ldr	r2, [r7, #8]
 8006496:	4313      	orrs	r3, r2
 8006498:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	68ba      	ldr	r2, [r7, #8]
 80064a0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2201      	movs	r2, #1
 80064a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2200      	movs	r2, #0
 80064ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064b2:	2300      	movs	r3, #0
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3714      	adds	r7, #20
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr
 80064c0:	40012c00 	.word	0x40012c00
 80064c4:	40013400 	.word	0x40013400
 80064c8:	40000400 	.word	0x40000400
 80064cc:	40000800 	.word	0x40000800
 80064d0:	40014000 	.word	0x40014000

080064d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b083      	sub	sp, #12
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80064dc:	bf00      	nop
 80064de:	370c      	adds	r7, #12
 80064e0:	46bd      	mov	sp, r7
 80064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e6:	4770      	bx	lr

080064e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b083      	sub	sp, #12
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80064f0:	bf00      	nop
 80064f2:	370c      	adds	r7, #12
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr

080064fc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b083      	sub	sp, #12
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006504:	bf00      	nop
 8006506:	370c      	adds	r7, #12
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr

08006510 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006510:	b480      	push	{r7}
 8006512:	b083      	sub	sp, #12
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006518:	bf00      	nop
 800651a:	370c      	adds	r7, #12
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr

08006524 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006524:	b480      	push	{r7}
 8006526:	b083      	sub	sp, #12
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800652c:	bf00      	nop
 800652e:	370c      	adds	r7, #12
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr

08006538 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006538:	b480      	push	{r7}
 800653a:	b083      	sub	sp, #12
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006540:	bf00      	nop
 8006542:	370c      	adds	r7, #12
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr

0800654c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800654c:	b480      	push	{r7}
 800654e:	b083      	sub	sp, #12
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006554:	bf00      	nop
 8006556:	370c      	adds	r7, #12
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr

08006560 <__errno>:
 8006560:	4b01      	ldr	r3, [pc, #4]	; (8006568 <__errno+0x8>)
 8006562:	6818      	ldr	r0, [r3, #0]
 8006564:	4770      	bx	lr
 8006566:	bf00      	nop
 8006568:	20000220 	.word	0x20000220

0800656c <__libc_init_array>:
 800656c:	b570      	push	{r4, r5, r6, lr}
 800656e:	4d0d      	ldr	r5, [pc, #52]	; (80065a4 <__libc_init_array+0x38>)
 8006570:	4c0d      	ldr	r4, [pc, #52]	; (80065a8 <__libc_init_array+0x3c>)
 8006572:	1b64      	subs	r4, r4, r5
 8006574:	10a4      	asrs	r4, r4, #2
 8006576:	2600      	movs	r6, #0
 8006578:	42a6      	cmp	r6, r4
 800657a:	d109      	bne.n	8006590 <__libc_init_array+0x24>
 800657c:	4d0b      	ldr	r5, [pc, #44]	; (80065ac <__libc_init_array+0x40>)
 800657e:	4c0c      	ldr	r4, [pc, #48]	; (80065b0 <__libc_init_array+0x44>)
 8006580:	f000 fcb0 	bl	8006ee4 <_init>
 8006584:	1b64      	subs	r4, r4, r5
 8006586:	10a4      	asrs	r4, r4, #2
 8006588:	2600      	movs	r6, #0
 800658a:	42a6      	cmp	r6, r4
 800658c:	d105      	bne.n	800659a <__libc_init_array+0x2e>
 800658e:	bd70      	pop	{r4, r5, r6, pc}
 8006590:	f855 3b04 	ldr.w	r3, [r5], #4
 8006594:	4798      	blx	r3
 8006596:	3601      	adds	r6, #1
 8006598:	e7ee      	b.n	8006578 <__libc_init_array+0xc>
 800659a:	f855 3b04 	ldr.w	r3, [r5], #4
 800659e:	4798      	blx	r3
 80065a0:	3601      	adds	r6, #1
 80065a2:	e7f2      	b.n	800658a <__libc_init_array+0x1e>
 80065a4:	08007cdc 	.word	0x08007cdc
 80065a8:	08007cdc 	.word	0x08007cdc
 80065ac:	08007cdc 	.word	0x08007cdc
 80065b0:	08007ce0 	.word	0x08007ce0

080065b4 <memset>:
 80065b4:	4402      	add	r2, r0
 80065b6:	4603      	mov	r3, r0
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d100      	bne.n	80065be <memset+0xa>
 80065bc:	4770      	bx	lr
 80065be:	f803 1b01 	strb.w	r1, [r3], #1
 80065c2:	e7f9      	b.n	80065b8 <memset+0x4>

080065c4 <siprintf>:
 80065c4:	b40e      	push	{r1, r2, r3}
 80065c6:	b500      	push	{lr}
 80065c8:	b09c      	sub	sp, #112	; 0x70
 80065ca:	ab1d      	add	r3, sp, #116	; 0x74
 80065cc:	9002      	str	r0, [sp, #8]
 80065ce:	9006      	str	r0, [sp, #24]
 80065d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80065d4:	4809      	ldr	r0, [pc, #36]	; (80065fc <siprintf+0x38>)
 80065d6:	9107      	str	r1, [sp, #28]
 80065d8:	9104      	str	r1, [sp, #16]
 80065da:	4909      	ldr	r1, [pc, #36]	; (8006600 <siprintf+0x3c>)
 80065dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80065e0:	9105      	str	r1, [sp, #20]
 80065e2:	6800      	ldr	r0, [r0, #0]
 80065e4:	9301      	str	r3, [sp, #4]
 80065e6:	a902      	add	r1, sp, #8
 80065e8:	f000 f868 	bl	80066bc <_svfiprintf_r>
 80065ec:	9b02      	ldr	r3, [sp, #8]
 80065ee:	2200      	movs	r2, #0
 80065f0:	701a      	strb	r2, [r3, #0]
 80065f2:	b01c      	add	sp, #112	; 0x70
 80065f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80065f8:	b003      	add	sp, #12
 80065fa:	4770      	bx	lr
 80065fc:	20000220 	.word	0x20000220
 8006600:	ffff0208 	.word	0xffff0208

08006604 <__ssputs_r>:
 8006604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006608:	688e      	ldr	r6, [r1, #8]
 800660a:	429e      	cmp	r6, r3
 800660c:	4682      	mov	sl, r0
 800660e:	460c      	mov	r4, r1
 8006610:	4690      	mov	r8, r2
 8006612:	461f      	mov	r7, r3
 8006614:	d838      	bhi.n	8006688 <__ssputs_r+0x84>
 8006616:	898a      	ldrh	r2, [r1, #12]
 8006618:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800661c:	d032      	beq.n	8006684 <__ssputs_r+0x80>
 800661e:	6825      	ldr	r5, [r4, #0]
 8006620:	6909      	ldr	r1, [r1, #16]
 8006622:	eba5 0901 	sub.w	r9, r5, r1
 8006626:	6965      	ldr	r5, [r4, #20]
 8006628:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800662c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006630:	3301      	adds	r3, #1
 8006632:	444b      	add	r3, r9
 8006634:	106d      	asrs	r5, r5, #1
 8006636:	429d      	cmp	r5, r3
 8006638:	bf38      	it	cc
 800663a:	461d      	movcc	r5, r3
 800663c:	0553      	lsls	r3, r2, #21
 800663e:	d531      	bpl.n	80066a4 <__ssputs_r+0xa0>
 8006640:	4629      	mov	r1, r5
 8006642:	f000 fb63 	bl	8006d0c <_malloc_r>
 8006646:	4606      	mov	r6, r0
 8006648:	b950      	cbnz	r0, 8006660 <__ssputs_r+0x5c>
 800664a:	230c      	movs	r3, #12
 800664c:	f8ca 3000 	str.w	r3, [sl]
 8006650:	89a3      	ldrh	r3, [r4, #12]
 8006652:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006656:	81a3      	strh	r3, [r4, #12]
 8006658:	f04f 30ff 	mov.w	r0, #4294967295
 800665c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006660:	6921      	ldr	r1, [r4, #16]
 8006662:	464a      	mov	r2, r9
 8006664:	f000 fabe 	bl	8006be4 <memcpy>
 8006668:	89a3      	ldrh	r3, [r4, #12]
 800666a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800666e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006672:	81a3      	strh	r3, [r4, #12]
 8006674:	6126      	str	r6, [r4, #16]
 8006676:	6165      	str	r5, [r4, #20]
 8006678:	444e      	add	r6, r9
 800667a:	eba5 0509 	sub.w	r5, r5, r9
 800667e:	6026      	str	r6, [r4, #0]
 8006680:	60a5      	str	r5, [r4, #8]
 8006682:	463e      	mov	r6, r7
 8006684:	42be      	cmp	r6, r7
 8006686:	d900      	bls.n	800668a <__ssputs_r+0x86>
 8006688:	463e      	mov	r6, r7
 800668a:	6820      	ldr	r0, [r4, #0]
 800668c:	4632      	mov	r2, r6
 800668e:	4641      	mov	r1, r8
 8006690:	f000 fab6 	bl	8006c00 <memmove>
 8006694:	68a3      	ldr	r3, [r4, #8]
 8006696:	1b9b      	subs	r3, r3, r6
 8006698:	60a3      	str	r3, [r4, #8]
 800669a:	6823      	ldr	r3, [r4, #0]
 800669c:	4433      	add	r3, r6
 800669e:	6023      	str	r3, [r4, #0]
 80066a0:	2000      	movs	r0, #0
 80066a2:	e7db      	b.n	800665c <__ssputs_r+0x58>
 80066a4:	462a      	mov	r2, r5
 80066a6:	f000 fba5 	bl	8006df4 <_realloc_r>
 80066aa:	4606      	mov	r6, r0
 80066ac:	2800      	cmp	r0, #0
 80066ae:	d1e1      	bne.n	8006674 <__ssputs_r+0x70>
 80066b0:	6921      	ldr	r1, [r4, #16]
 80066b2:	4650      	mov	r0, sl
 80066b4:	f000 fabe 	bl	8006c34 <_free_r>
 80066b8:	e7c7      	b.n	800664a <__ssputs_r+0x46>
	...

080066bc <_svfiprintf_r>:
 80066bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066c0:	4698      	mov	r8, r3
 80066c2:	898b      	ldrh	r3, [r1, #12]
 80066c4:	061b      	lsls	r3, r3, #24
 80066c6:	b09d      	sub	sp, #116	; 0x74
 80066c8:	4607      	mov	r7, r0
 80066ca:	460d      	mov	r5, r1
 80066cc:	4614      	mov	r4, r2
 80066ce:	d50e      	bpl.n	80066ee <_svfiprintf_r+0x32>
 80066d0:	690b      	ldr	r3, [r1, #16]
 80066d2:	b963      	cbnz	r3, 80066ee <_svfiprintf_r+0x32>
 80066d4:	2140      	movs	r1, #64	; 0x40
 80066d6:	f000 fb19 	bl	8006d0c <_malloc_r>
 80066da:	6028      	str	r0, [r5, #0]
 80066dc:	6128      	str	r0, [r5, #16]
 80066de:	b920      	cbnz	r0, 80066ea <_svfiprintf_r+0x2e>
 80066e0:	230c      	movs	r3, #12
 80066e2:	603b      	str	r3, [r7, #0]
 80066e4:	f04f 30ff 	mov.w	r0, #4294967295
 80066e8:	e0d1      	b.n	800688e <_svfiprintf_r+0x1d2>
 80066ea:	2340      	movs	r3, #64	; 0x40
 80066ec:	616b      	str	r3, [r5, #20]
 80066ee:	2300      	movs	r3, #0
 80066f0:	9309      	str	r3, [sp, #36]	; 0x24
 80066f2:	2320      	movs	r3, #32
 80066f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80066f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80066fc:	2330      	movs	r3, #48	; 0x30
 80066fe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80068a8 <_svfiprintf_r+0x1ec>
 8006702:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006706:	f04f 0901 	mov.w	r9, #1
 800670a:	4623      	mov	r3, r4
 800670c:	469a      	mov	sl, r3
 800670e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006712:	b10a      	cbz	r2, 8006718 <_svfiprintf_r+0x5c>
 8006714:	2a25      	cmp	r2, #37	; 0x25
 8006716:	d1f9      	bne.n	800670c <_svfiprintf_r+0x50>
 8006718:	ebba 0b04 	subs.w	fp, sl, r4
 800671c:	d00b      	beq.n	8006736 <_svfiprintf_r+0x7a>
 800671e:	465b      	mov	r3, fp
 8006720:	4622      	mov	r2, r4
 8006722:	4629      	mov	r1, r5
 8006724:	4638      	mov	r0, r7
 8006726:	f7ff ff6d 	bl	8006604 <__ssputs_r>
 800672a:	3001      	adds	r0, #1
 800672c:	f000 80aa 	beq.w	8006884 <_svfiprintf_r+0x1c8>
 8006730:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006732:	445a      	add	r2, fp
 8006734:	9209      	str	r2, [sp, #36]	; 0x24
 8006736:	f89a 3000 	ldrb.w	r3, [sl]
 800673a:	2b00      	cmp	r3, #0
 800673c:	f000 80a2 	beq.w	8006884 <_svfiprintf_r+0x1c8>
 8006740:	2300      	movs	r3, #0
 8006742:	f04f 32ff 	mov.w	r2, #4294967295
 8006746:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800674a:	f10a 0a01 	add.w	sl, sl, #1
 800674e:	9304      	str	r3, [sp, #16]
 8006750:	9307      	str	r3, [sp, #28]
 8006752:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006756:	931a      	str	r3, [sp, #104]	; 0x68
 8006758:	4654      	mov	r4, sl
 800675a:	2205      	movs	r2, #5
 800675c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006760:	4851      	ldr	r0, [pc, #324]	; (80068a8 <_svfiprintf_r+0x1ec>)
 8006762:	f7f9 fd5d 	bl	8000220 <memchr>
 8006766:	9a04      	ldr	r2, [sp, #16]
 8006768:	b9d8      	cbnz	r0, 80067a2 <_svfiprintf_r+0xe6>
 800676a:	06d0      	lsls	r0, r2, #27
 800676c:	bf44      	itt	mi
 800676e:	2320      	movmi	r3, #32
 8006770:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006774:	0711      	lsls	r1, r2, #28
 8006776:	bf44      	itt	mi
 8006778:	232b      	movmi	r3, #43	; 0x2b
 800677a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800677e:	f89a 3000 	ldrb.w	r3, [sl]
 8006782:	2b2a      	cmp	r3, #42	; 0x2a
 8006784:	d015      	beq.n	80067b2 <_svfiprintf_r+0xf6>
 8006786:	9a07      	ldr	r2, [sp, #28]
 8006788:	4654      	mov	r4, sl
 800678a:	2000      	movs	r0, #0
 800678c:	f04f 0c0a 	mov.w	ip, #10
 8006790:	4621      	mov	r1, r4
 8006792:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006796:	3b30      	subs	r3, #48	; 0x30
 8006798:	2b09      	cmp	r3, #9
 800679a:	d94e      	bls.n	800683a <_svfiprintf_r+0x17e>
 800679c:	b1b0      	cbz	r0, 80067cc <_svfiprintf_r+0x110>
 800679e:	9207      	str	r2, [sp, #28]
 80067a0:	e014      	b.n	80067cc <_svfiprintf_r+0x110>
 80067a2:	eba0 0308 	sub.w	r3, r0, r8
 80067a6:	fa09 f303 	lsl.w	r3, r9, r3
 80067aa:	4313      	orrs	r3, r2
 80067ac:	9304      	str	r3, [sp, #16]
 80067ae:	46a2      	mov	sl, r4
 80067b0:	e7d2      	b.n	8006758 <_svfiprintf_r+0x9c>
 80067b2:	9b03      	ldr	r3, [sp, #12]
 80067b4:	1d19      	adds	r1, r3, #4
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	9103      	str	r1, [sp, #12]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	bfbb      	ittet	lt
 80067be:	425b      	neglt	r3, r3
 80067c0:	f042 0202 	orrlt.w	r2, r2, #2
 80067c4:	9307      	strge	r3, [sp, #28]
 80067c6:	9307      	strlt	r3, [sp, #28]
 80067c8:	bfb8      	it	lt
 80067ca:	9204      	strlt	r2, [sp, #16]
 80067cc:	7823      	ldrb	r3, [r4, #0]
 80067ce:	2b2e      	cmp	r3, #46	; 0x2e
 80067d0:	d10c      	bne.n	80067ec <_svfiprintf_r+0x130>
 80067d2:	7863      	ldrb	r3, [r4, #1]
 80067d4:	2b2a      	cmp	r3, #42	; 0x2a
 80067d6:	d135      	bne.n	8006844 <_svfiprintf_r+0x188>
 80067d8:	9b03      	ldr	r3, [sp, #12]
 80067da:	1d1a      	adds	r2, r3, #4
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	9203      	str	r2, [sp, #12]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	bfb8      	it	lt
 80067e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80067e8:	3402      	adds	r4, #2
 80067ea:	9305      	str	r3, [sp, #20]
 80067ec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80068b8 <_svfiprintf_r+0x1fc>
 80067f0:	7821      	ldrb	r1, [r4, #0]
 80067f2:	2203      	movs	r2, #3
 80067f4:	4650      	mov	r0, sl
 80067f6:	f7f9 fd13 	bl	8000220 <memchr>
 80067fa:	b140      	cbz	r0, 800680e <_svfiprintf_r+0x152>
 80067fc:	2340      	movs	r3, #64	; 0x40
 80067fe:	eba0 000a 	sub.w	r0, r0, sl
 8006802:	fa03 f000 	lsl.w	r0, r3, r0
 8006806:	9b04      	ldr	r3, [sp, #16]
 8006808:	4303      	orrs	r3, r0
 800680a:	3401      	adds	r4, #1
 800680c:	9304      	str	r3, [sp, #16]
 800680e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006812:	4826      	ldr	r0, [pc, #152]	; (80068ac <_svfiprintf_r+0x1f0>)
 8006814:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006818:	2206      	movs	r2, #6
 800681a:	f7f9 fd01 	bl	8000220 <memchr>
 800681e:	2800      	cmp	r0, #0
 8006820:	d038      	beq.n	8006894 <_svfiprintf_r+0x1d8>
 8006822:	4b23      	ldr	r3, [pc, #140]	; (80068b0 <_svfiprintf_r+0x1f4>)
 8006824:	bb1b      	cbnz	r3, 800686e <_svfiprintf_r+0x1b2>
 8006826:	9b03      	ldr	r3, [sp, #12]
 8006828:	3307      	adds	r3, #7
 800682a:	f023 0307 	bic.w	r3, r3, #7
 800682e:	3308      	adds	r3, #8
 8006830:	9303      	str	r3, [sp, #12]
 8006832:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006834:	4433      	add	r3, r6
 8006836:	9309      	str	r3, [sp, #36]	; 0x24
 8006838:	e767      	b.n	800670a <_svfiprintf_r+0x4e>
 800683a:	fb0c 3202 	mla	r2, ip, r2, r3
 800683e:	460c      	mov	r4, r1
 8006840:	2001      	movs	r0, #1
 8006842:	e7a5      	b.n	8006790 <_svfiprintf_r+0xd4>
 8006844:	2300      	movs	r3, #0
 8006846:	3401      	adds	r4, #1
 8006848:	9305      	str	r3, [sp, #20]
 800684a:	4619      	mov	r1, r3
 800684c:	f04f 0c0a 	mov.w	ip, #10
 8006850:	4620      	mov	r0, r4
 8006852:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006856:	3a30      	subs	r2, #48	; 0x30
 8006858:	2a09      	cmp	r2, #9
 800685a:	d903      	bls.n	8006864 <_svfiprintf_r+0x1a8>
 800685c:	2b00      	cmp	r3, #0
 800685e:	d0c5      	beq.n	80067ec <_svfiprintf_r+0x130>
 8006860:	9105      	str	r1, [sp, #20]
 8006862:	e7c3      	b.n	80067ec <_svfiprintf_r+0x130>
 8006864:	fb0c 2101 	mla	r1, ip, r1, r2
 8006868:	4604      	mov	r4, r0
 800686a:	2301      	movs	r3, #1
 800686c:	e7f0      	b.n	8006850 <_svfiprintf_r+0x194>
 800686e:	ab03      	add	r3, sp, #12
 8006870:	9300      	str	r3, [sp, #0]
 8006872:	462a      	mov	r2, r5
 8006874:	4b0f      	ldr	r3, [pc, #60]	; (80068b4 <_svfiprintf_r+0x1f8>)
 8006876:	a904      	add	r1, sp, #16
 8006878:	4638      	mov	r0, r7
 800687a:	f3af 8000 	nop.w
 800687e:	1c42      	adds	r2, r0, #1
 8006880:	4606      	mov	r6, r0
 8006882:	d1d6      	bne.n	8006832 <_svfiprintf_r+0x176>
 8006884:	89ab      	ldrh	r3, [r5, #12]
 8006886:	065b      	lsls	r3, r3, #25
 8006888:	f53f af2c 	bmi.w	80066e4 <_svfiprintf_r+0x28>
 800688c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800688e:	b01d      	add	sp, #116	; 0x74
 8006890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006894:	ab03      	add	r3, sp, #12
 8006896:	9300      	str	r3, [sp, #0]
 8006898:	462a      	mov	r2, r5
 800689a:	4b06      	ldr	r3, [pc, #24]	; (80068b4 <_svfiprintf_r+0x1f8>)
 800689c:	a904      	add	r1, sp, #16
 800689e:	4638      	mov	r0, r7
 80068a0:	f000 f87a 	bl	8006998 <_printf_i>
 80068a4:	e7eb      	b.n	800687e <_svfiprintf_r+0x1c2>
 80068a6:	bf00      	nop
 80068a8:	08007ca8 	.word	0x08007ca8
 80068ac:	08007cb2 	.word	0x08007cb2
 80068b0:	00000000 	.word	0x00000000
 80068b4:	08006605 	.word	0x08006605
 80068b8:	08007cae 	.word	0x08007cae

080068bc <_printf_common>:
 80068bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068c0:	4616      	mov	r6, r2
 80068c2:	4699      	mov	r9, r3
 80068c4:	688a      	ldr	r2, [r1, #8]
 80068c6:	690b      	ldr	r3, [r1, #16]
 80068c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80068cc:	4293      	cmp	r3, r2
 80068ce:	bfb8      	it	lt
 80068d0:	4613      	movlt	r3, r2
 80068d2:	6033      	str	r3, [r6, #0]
 80068d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80068d8:	4607      	mov	r7, r0
 80068da:	460c      	mov	r4, r1
 80068dc:	b10a      	cbz	r2, 80068e2 <_printf_common+0x26>
 80068de:	3301      	adds	r3, #1
 80068e0:	6033      	str	r3, [r6, #0]
 80068e2:	6823      	ldr	r3, [r4, #0]
 80068e4:	0699      	lsls	r1, r3, #26
 80068e6:	bf42      	ittt	mi
 80068e8:	6833      	ldrmi	r3, [r6, #0]
 80068ea:	3302      	addmi	r3, #2
 80068ec:	6033      	strmi	r3, [r6, #0]
 80068ee:	6825      	ldr	r5, [r4, #0]
 80068f0:	f015 0506 	ands.w	r5, r5, #6
 80068f4:	d106      	bne.n	8006904 <_printf_common+0x48>
 80068f6:	f104 0a19 	add.w	sl, r4, #25
 80068fa:	68e3      	ldr	r3, [r4, #12]
 80068fc:	6832      	ldr	r2, [r6, #0]
 80068fe:	1a9b      	subs	r3, r3, r2
 8006900:	42ab      	cmp	r3, r5
 8006902:	dc26      	bgt.n	8006952 <_printf_common+0x96>
 8006904:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006908:	1e13      	subs	r3, r2, #0
 800690a:	6822      	ldr	r2, [r4, #0]
 800690c:	bf18      	it	ne
 800690e:	2301      	movne	r3, #1
 8006910:	0692      	lsls	r2, r2, #26
 8006912:	d42b      	bmi.n	800696c <_printf_common+0xb0>
 8006914:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006918:	4649      	mov	r1, r9
 800691a:	4638      	mov	r0, r7
 800691c:	47c0      	blx	r8
 800691e:	3001      	adds	r0, #1
 8006920:	d01e      	beq.n	8006960 <_printf_common+0xa4>
 8006922:	6823      	ldr	r3, [r4, #0]
 8006924:	68e5      	ldr	r5, [r4, #12]
 8006926:	6832      	ldr	r2, [r6, #0]
 8006928:	f003 0306 	and.w	r3, r3, #6
 800692c:	2b04      	cmp	r3, #4
 800692e:	bf08      	it	eq
 8006930:	1aad      	subeq	r5, r5, r2
 8006932:	68a3      	ldr	r3, [r4, #8]
 8006934:	6922      	ldr	r2, [r4, #16]
 8006936:	bf0c      	ite	eq
 8006938:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800693c:	2500      	movne	r5, #0
 800693e:	4293      	cmp	r3, r2
 8006940:	bfc4      	itt	gt
 8006942:	1a9b      	subgt	r3, r3, r2
 8006944:	18ed      	addgt	r5, r5, r3
 8006946:	2600      	movs	r6, #0
 8006948:	341a      	adds	r4, #26
 800694a:	42b5      	cmp	r5, r6
 800694c:	d11a      	bne.n	8006984 <_printf_common+0xc8>
 800694e:	2000      	movs	r0, #0
 8006950:	e008      	b.n	8006964 <_printf_common+0xa8>
 8006952:	2301      	movs	r3, #1
 8006954:	4652      	mov	r2, sl
 8006956:	4649      	mov	r1, r9
 8006958:	4638      	mov	r0, r7
 800695a:	47c0      	blx	r8
 800695c:	3001      	adds	r0, #1
 800695e:	d103      	bne.n	8006968 <_printf_common+0xac>
 8006960:	f04f 30ff 	mov.w	r0, #4294967295
 8006964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006968:	3501      	adds	r5, #1
 800696a:	e7c6      	b.n	80068fa <_printf_common+0x3e>
 800696c:	18e1      	adds	r1, r4, r3
 800696e:	1c5a      	adds	r2, r3, #1
 8006970:	2030      	movs	r0, #48	; 0x30
 8006972:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006976:	4422      	add	r2, r4
 8006978:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800697c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006980:	3302      	adds	r3, #2
 8006982:	e7c7      	b.n	8006914 <_printf_common+0x58>
 8006984:	2301      	movs	r3, #1
 8006986:	4622      	mov	r2, r4
 8006988:	4649      	mov	r1, r9
 800698a:	4638      	mov	r0, r7
 800698c:	47c0      	blx	r8
 800698e:	3001      	adds	r0, #1
 8006990:	d0e6      	beq.n	8006960 <_printf_common+0xa4>
 8006992:	3601      	adds	r6, #1
 8006994:	e7d9      	b.n	800694a <_printf_common+0x8e>
	...

08006998 <_printf_i>:
 8006998:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800699c:	7e0f      	ldrb	r7, [r1, #24]
 800699e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80069a0:	2f78      	cmp	r7, #120	; 0x78
 80069a2:	4691      	mov	r9, r2
 80069a4:	4680      	mov	r8, r0
 80069a6:	460c      	mov	r4, r1
 80069a8:	469a      	mov	sl, r3
 80069aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80069ae:	d807      	bhi.n	80069c0 <_printf_i+0x28>
 80069b0:	2f62      	cmp	r7, #98	; 0x62
 80069b2:	d80a      	bhi.n	80069ca <_printf_i+0x32>
 80069b4:	2f00      	cmp	r7, #0
 80069b6:	f000 80d8 	beq.w	8006b6a <_printf_i+0x1d2>
 80069ba:	2f58      	cmp	r7, #88	; 0x58
 80069bc:	f000 80a3 	beq.w	8006b06 <_printf_i+0x16e>
 80069c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80069c8:	e03a      	b.n	8006a40 <_printf_i+0xa8>
 80069ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80069ce:	2b15      	cmp	r3, #21
 80069d0:	d8f6      	bhi.n	80069c0 <_printf_i+0x28>
 80069d2:	a101      	add	r1, pc, #4	; (adr r1, 80069d8 <_printf_i+0x40>)
 80069d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80069d8:	08006a31 	.word	0x08006a31
 80069dc:	08006a45 	.word	0x08006a45
 80069e0:	080069c1 	.word	0x080069c1
 80069e4:	080069c1 	.word	0x080069c1
 80069e8:	080069c1 	.word	0x080069c1
 80069ec:	080069c1 	.word	0x080069c1
 80069f0:	08006a45 	.word	0x08006a45
 80069f4:	080069c1 	.word	0x080069c1
 80069f8:	080069c1 	.word	0x080069c1
 80069fc:	080069c1 	.word	0x080069c1
 8006a00:	080069c1 	.word	0x080069c1
 8006a04:	08006b51 	.word	0x08006b51
 8006a08:	08006a75 	.word	0x08006a75
 8006a0c:	08006b33 	.word	0x08006b33
 8006a10:	080069c1 	.word	0x080069c1
 8006a14:	080069c1 	.word	0x080069c1
 8006a18:	08006b73 	.word	0x08006b73
 8006a1c:	080069c1 	.word	0x080069c1
 8006a20:	08006a75 	.word	0x08006a75
 8006a24:	080069c1 	.word	0x080069c1
 8006a28:	080069c1 	.word	0x080069c1
 8006a2c:	08006b3b 	.word	0x08006b3b
 8006a30:	682b      	ldr	r3, [r5, #0]
 8006a32:	1d1a      	adds	r2, r3, #4
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	602a      	str	r2, [r5, #0]
 8006a38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a40:	2301      	movs	r3, #1
 8006a42:	e0a3      	b.n	8006b8c <_printf_i+0x1f4>
 8006a44:	6820      	ldr	r0, [r4, #0]
 8006a46:	6829      	ldr	r1, [r5, #0]
 8006a48:	0606      	lsls	r6, r0, #24
 8006a4a:	f101 0304 	add.w	r3, r1, #4
 8006a4e:	d50a      	bpl.n	8006a66 <_printf_i+0xce>
 8006a50:	680e      	ldr	r6, [r1, #0]
 8006a52:	602b      	str	r3, [r5, #0]
 8006a54:	2e00      	cmp	r6, #0
 8006a56:	da03      	bge.n	8006a60 <_printf_i+0xc8>
 8006a58:	232d      	movs	r3, #45	; 0x2d
 8006a5a:	4276      	negs	r6, r6
 8006a5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a60:	485e      	ldr	r0, [pc, #376]	; (8006bdc <_printf_i+0x244>)
 8006a62:	230a      	movs	r3, #10
 8006a64:	e019      	b.n	8006a9a <_printf_i+0x102>
 8006a66:	680e      	ldr	r6, [r1, #0]
 8006a68:	602b      	str	r3, [r5, #0]
 8006a6a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006a6e:	bf18      	it	ne
 8006a70:	b236      	sxthne	r6, r6
 8006a72:	e7ef      	b.n	8006a54 <_printf_i+0xbc>
 8006a74:	682b      	ldr	r3, [r5, #0]
 8006a76:	6820      	ldr	r0, [r4, #0]
 8006a78:	1d19      	adds	r1, r3, #4
 8006a7a:	6029      	str	r1, [r5, #0]
 8006a7c:	0601      	lsls	r1, r0, #24
 8006a7e:	d501      	bpl.n	8006a84 <_printf_i+0xec>
 8006a80:	681e      	ldr	r6, [r3, #0]
 8006a82:	e002      	b.n	8006a8a <_printf_i+0xf2>
 8006a84:	0646      	lsls	r6, r0, #25
 8006a86:	d5fb      	bpl.n	8006a80 <_printf_i+0xe8>
 8006a88:	881e      	ldrh	r6, [r3, #0]
 8006a8a:	4854      	ldr	r0, [pc, #336]	; (8006bdc <_printf_i+0x244>)
 8006a8c:	2f6f      	cmp	r7, #111	; 0x6f
 8006a8e:	bf0c      	ite	eq
 8006a90:	2308      	moveq	r3, #8
 8006a92:	230a      	movne	r3, #10
 8006a94:	2100      	movs	r1, #0
 8006a96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006a9a:	6865      	ldr	r5, [r4, #4]
 8006a9c:	60a5      	str	r5, [r4, #8]
 8006a9e:	2d00      	cmp	r5, #0
 8006aa0:	bfa2      	ittt	ge
 8006aa2:	6821      	ldrge	r1, [r4, #0]
 8006aa4:	f021 0104 	bicge.w	r1, r1, #4
 8006aa8:	6021      	strge	r1, [r4, #0]
 8006aaa:	b90e      	cbnz	r6, 8006ab0 <_printf_i+0x118>
 8006aac:	2d00      	cmp	r5, #0
 8006aae:	d04d      	beq.n	8006b4c <_printf_i+0x1b4>
 8006ab0:	4615      	mov	r5, r2
 8006ab2:	fbb6 f1f3 	udiv	r1, r6, r3
 8006ab6:	fb03 6711 	mls	r7, r3, r1, r6
 8006aba:	5dc7      	ldrb	r7, [r0, r7]
 8006abc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006ac0:	4637      	mov	r7, r6
 8006ac2:	42bb      	cmp	r3, r7
 8006ac4:	460e      	mov	r6, r1
 8006ac6:	d9f4      	bls.n	8006ab2 <_printf_i+0x11a>
 8006ac8:	2b08      	cmp	r3, #8
 8006aca:	d10b      	bne.n	8006ae4 <_printf_i+0x14c>
 8006acc:	6823      	ldr	r3, [r4, #0]
 8006ace:	07de      	lsls	r6, r3, #31
 8006ad0:	d508      	bpl.n	8006ae4 <_printf_i+0x14c>
 8006ad2:	6923      	ldr	r3, [r4, #16]
 8006ad4:	6861      	ldr	r1, [r4, #4]
 8006ad6:	4299      	cmp	r1, r3
 8006ad8:	bfde      	ittt	le
 8006ada:	2330      	movle	r3, #48	; 0x30
 8006adc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006ae0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006ae4:	1b52      	subs	r2, r2, r5
 8006ae6:	6122      	str	r2, [r4, #16]
 8006ae8:	f8cd a000 	str.w	sl, [sp]
 8006aec:	464b      	mov	r3, r9
 8006aee:	aa03      	add	r2, sp, #12
 8006af0:	4621      	mov	r1, r4
 8006af2:	4640      	mov	r0, r8
 8006af4:	f7ff fee2 	bl	80068bc <_printf_common>
 8006af8:	3001      	adds	r0, #1
 8006afa:	d14c      	bne.n	8006b96 <_printf_i+0x1fe>
 8006afc:	f04f 30ff 	mov.w	r0, #4294967295
 8006b00:	b004      	add	sp, #16
 8006b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b06:	4835      	ldr	r0, [pc, #212]	; (8006bdc <_printf_i+0x244>)
 8006b08:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006b0c:	6829      	ldr	r1, [r5, #0]
 8006b0e:	6823      	ldr	r3, [r4, #0]
 8006b10:	f851 6b04 	ldr.w	r6, [r1], #4
 8006b14:	6029      	str	r1, [r5, #0]
 8006b16:	061d      	lsls	r5, r3, #24
 8006b18:	d514      	bpl.n	8006b44 <_printf_i+0x1ac>
 8006b1a:	07df      	lsls	r7, r3, #31
 8006b1c:	bf44      	itt	mi
 8006b1e:	f043 0320 	orrmi.w	r3, r3, #32
 8006b22:	6023      	strmi	r3, [r4, #0]
 8006b24:	b91e      	cbnz	r6, 8006b2e <_printf_i+0x196>
 8006b26:	6823      	ldr	r3, [r4, #0]
 8006b28:	f023 0320 	bic.w	r3, r3, #32
 8006b2c:	6023      	str	r3, [r4, #0]
 8006b2e:	2310      	movs	r3, #16
 8006b30:	e7b0      	b.n	8006a94 <_printf_i+0xfc>
 8006b32:	6823      	ldr	r3, [r4, #0]
 8006b34:	f043 0320 	orr.w	r3, r3, #32
 8006b38:	6023      	str	r3, [r4, #0]
 8006b3a:	2378      	movs	r3, #120	; 0x78
 8006b3c:	4828      	ldr	r0, [pc, #160]	; (8006be0 <_printf_i+0x248>)
 8006b3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006b42:	e7e3      	b.n	8006b0c <_printf_i+0x174>
 8006b44:	0659      	lsls	r1, r3, #25
 8006b46:	bf48      	it	mi
 8006b48:	b2b6      	uxthmi	r6, r6
 8006b4a:	e7e6      	b.n	8006b1a <_printf_i+0x182>
 8006b4c:	4615      	mov	r5, r2
 8006b4e:	e7bb      	b.n	8006ac8 <_printf_i+0x130>
 8006b50:	682b      	ldr	r3, [r5, #0]
 8006b52:	6826      	ldr	r6, [r4, #0]
 8006b54:	6961      	ldr	r1, [r4, #20]
 8006b56:	1d18      	adds	r0, r3, #4
 8006b58:	6028      	str	r0, [r5, #0]
 8006b5a:	0635      	lsls	r5, r6, #24
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	d501      	bpl.n	8006b64 <_printf_i+0x1cc>
 8006b60:	6019      	str	r1, [r3, #0]
 8006b62:	e002      	b.n	8006b6a <_printf_i+0x1d2>
 8006b64:	0670      	lsls	r0, r6, #25
 8006b66:	d5fb      	bpl.n	8006b60 <_printf_i+0x1c8>
 8006b68:	8019      	strh	r1, [r3, #0]
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	6123      	str	r3, [r4, #16]
 8006b6e:	4615      	mov	r5, r2
 8006b70:	e7ba      	b.n	8006ae8 <_printf_i+0x150>
 8006b72:	682b      	ldr	r3, [r5, #0]
 8006b74:	1d1a      	adds	r2, r3, #4
 8006b76:	602a      	str	r2, [r5, #0]
 8006b78:	681d      	ldr	r5, [r3, #0]
 8006b7a:	6862      	ldr	r2, [r4, #4]
 8006b7c:	2100      	movs	r1, #0
 8006b7e:	4628      	mov	r0, r5
 8006b80:	f7f9 fb4e 	bl	8000220 <memchr>
 8006b84:	b108      	cbz	r0, 8006b8a <_printf_i+0x1f2>
 8006b86:	1b40      	subs	r0, r0, r5
 8006b88:	6060      	str	r0, [r4, #4]
 8006b8a:	6863      	ldr	r3, [r4, #4]
 8006b8c:	6123      	str	r3, [r4, #16]
 8006b8e:	2300      	movs	r3, #0
 8006b90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b94:	e7a8      	b.n	8006ae8 <_printf_i+0x150>
 8006b96:	6923      	ldr	r3, [r4, #16]
 8006b98:	462a      	mov	r2, r5
 8006b9a:	4649      	mov	r1, r9
 8006b9c:	4640      	mov	r0, r8
 8006b9e:	47d0      	blx	sl
 8006ba0:	3001      	adds	r0, #1
 8006ba2:	d0ab      	beq.n	8006afc <_printf_i+0x164>
 8006ba4:	6823      	ldr	r3, [r4, #0]
 8006ba6:	079b      	lsls	r3, r3, #30
 8006ba8:	d413      	bmi.n	8006bd2 <_printf_i+0x23a>
 8006baa:	68e0      	ldr	r0, [r4, #12]
 8006bac:	9b03      	ldr	r3, [sp, #12]
 8006bae:	4298      	cmp	r0, r3
 8006bb0:	bfb8      	it	lt
 8006bb2:	4618      	movlt	r0, r3
 8006bb4:	e7a4      	b.n	8006b00 <_printf_i+0x168>
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	4632      	mov	r2, r6
 8006bba:	4649      	mov	r1, r9
 8006bbc:	4640      	mov	r0, r8
 8006bbe:	47d0      	blx	sl
 8006bc0:	3001      	adds	r0, #1
 8006bc2:	d09b      	beq.n	8006afc <_printf_i+0x164>
 8006bc4:	3501      	adds	r5, #1
 8006bc6:	68e3      	ldr	r3, [r4, #12]
 8006bc8:	9903      	ldr	r1, [sp, #12]
 8006bca:	1a5b      	subs	r3, r3, r1
 8006bcc:	42ab      	cmp	r3, r5
 8006bce:	dcf2      	bgt.n	8006bb6 <_printf_i+0x21e>
 8006bd0:	e7eb      	b.n	8006baa <_printf_i+0x212>
 8006bd2:	2500      	movs	r5, #0
 8006bd4:	f104 0619 	add.w	r6, r4, #25
 8006bd8:	e7f5      	b.n	8006bc6 <_printf_i+0x22e>
 8006bda:	bf00      	nop
 8006bdc:	08007cb9 	.word	0x08007cb9
 8006be0:	08007cca 	.word	0x08007cca

08006be4 <memcpy>:
 8006be4:	440a      	add	r2, r1
 8006be6:	4291      	cmp	r1, r2
 8006be8:	f100 33ff 	add.w	r3, r0, #4294967295
 8006bec:	d100      	bne.n	8006bf0 <memcpy+0xc>
 8006bee:	4770      	bx	lr
 8006bf0:	b510      	push	{r4, lr}
 8006bf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006bf6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006bfa:	4291      	cmp	r1, r2
 8006bfc:	d1f9      	bne.n	8006bf2 <memcpy+0xe>
 8006bfe:	bd10      	pop	{r4, pc}

08006c00 <memmove>:
 8006c00:	4288      	cmp	r0, r1
 8006c02:	b510      	push	{r4, lr}
 8006c04:	eb01 0402 	add.w	r4, r1, r2
 8006c08:	d902      	bls.n	8006c10 <memmove+0x10>
 8006c0a:	4284      	cmp	r4, r0
 8006c0c:	4623      	mov	r3, r4
 8006c0e:	d807      	bhi.n	8006c20 <memmove+0x20>
 8006c10:	1e43      	subs	r3, r0, #1
 8006c12:	42a1      	cmp	r1, r4
 8006c14:	d008      	beq.n	8006c28 <memmove+0x28>
 8006c16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006c1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006c1e:	e7f8      	b.n	8006c12 <memmove+0x12>
 8006c20:	4402      	add	r2, r0
 8006c22:	4601      	mov	r1, r0
 8006c24:	428a      	cmp	r2, r1
 8006c26:	d100      	bne.n	8006c2a <memmove+0x2a>
 8006c28:	bd10      	pop	{r4, pc}
 8006c2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006c2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006c32:	e7f7      	b.n	8006c24 <memmove+0x24>

08006c34 <_free_r>:
 8006c34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006c36:	2900      	cmp	r1, #0
 8006c38:	d044      	beq.n	8006cc4 <_free_r+0x90>
 8006c3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c3e:	9001      	str	r0, [sp, #4]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	f1a1 0404 	sub.w	r4, r1, #4
 8006c46:	bfb8      	it	lt
 8006c48:	18e4      	addlt	r4, r4, r3
 8006c4a:	f000 f913 	bl	8006e74 <__malloc_lock>
 8006c4e:	4a1e      	ldr	r2, [pc, #120]	; (8006cc8 <_free_r+0x94>)
 8006c50:	9801      	ldr	r0, [sp, #4]
 8006c52:	6813      	ldr	r3, [r2, #0]
 8006c54:	b933      	cbnz	r3, 8006c64 <_free_r+0x30>
 8006c56:	6063      	str	r3, [r4, #4]
 8006c58:	6014      	str	r4, [r2, #0]
 8006c5a:	b003      	add	sp, #12
 8006c5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006c60:	f000 b90e 	b.w	8006e80 <__malloc_unlock>
 8006c64:	42a3      	cmp	r3, r4
 8006c66:	d908      	bls.n	8006c7a <_free_r+0x46>
 8006c68:	6825      	ldr	r5, [r4, #0]
 8006c6a:	1961      	adds	r1, r4, r5
 8006c6c:	428b      	cmp	r3, r1
 8006c6e:	bf01      	itttt	eq
 8006c70:	6819      	ldreq	r1, [r3, #0]
 8006c72:	685b      	ldreq	r3, [r3, #4]
 8006c74:	1949      	addeq	r1, r1, r5
 8006c76:	6021      	streq	r1, [r4, #0]
 8006c78:	e7ed      	b.n	8006c56 <_free_r+0x22>
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	685b      	ldr	r3, [r3, #4]
 8006c7e:	b10b      	cbz	r3, 8006c84 <_free_r+0x50>
 8006c80:	42a3      	cmp	r3, r4
 8006c82:	d9fa      	bls.n	8006c7a <_free_r+0x46>
 8006c84:	6811      	ldr	r1, [r2, #0]
 8006c86:	1855      	adds	r5, r2, r1
 8006c88:	42a5      	cmp	r5, r4
 8006c8a:	d10b      	bne.n	8006ca4 <_free_r+0x70>
 8006c8c:	6824      	ldr	r4, [r4, #0]
 8006c8e:	4421      	add	r1, r4
 8006c90:	1854      	adds	r4, r2, r1
 8006c92:	42a3      	cmp	r3, r4
 8006c94:	6011      	str	r1, [r2, #0]
 8006c96:	d1e0      	bne.n	8006c5a <_free_r+0x26>
 8006c98:	681c      	ldr	r4, [r3, #0]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	6053      	str	r3, [r2, #4]
 8006c9e:	4421      	add	r1, r4
 8006ca0:	6011      	str	r1, [r2, #0]
 8006ca2:	e7da      	b.n	8006c5a <_free_r+0x26>
 8006ca4:	d902      	bls.n	8006cac <_free_r+0x78>
 8006ca6:	230c      	movs	r3, #12
 8006ca8:	6003      	str	r3, [r0, #0]
 8006caa:	e7d6      	b.n	8006c5a <_free_r+0x26>
 8006cac:	6825      	ldr	r5, [r4, #0]
 8006cae:	1961      	adds	r1, r4, r5
 8006cb0:	428b      	cmp	r3, r1
 8006cb2:	bf04      	itt	eq
 8006cb4:	6819      	ldreq	r1, [r3, #0]
 8006cb6:	685b      	ldreq	r3, [r3, #4]
 8006cb8:	6063      	str	r3, [r4, #4]
 8006cba:	bf04      	itt	eq
 8006cbc:	1949      	addeq	r1, r1, r5
 8006cbe:	6021      	streq	r1, [r4, #0]
 8006cc0:	6054      	str	r4, [r2, #4]
 8006cc2:	e7ca      	b.n	8006c5a <_free_r+0x26>
 8006cc4:	b003      	add	sp, #12
 8006cc6:	bd30      	pop	{r4, r5, pc}
 8006cc8:	20000958 	.word	0x20000958

08006ccc <sbrk_aligned>:
 8006ccc:	b570      	push	{r4, r5, r6, lr}
 8006cce:	4e0e      	ldr	r6, [pc, #56]	; (8006d08 <sbrk_aligned+0x3c>)
 8006cd0:	460c      	mov	r4, r1
 8006cd2:	6831      	ldr	r1, [r6, #0]
 8006cd4:	4605      	mov	r5, r0
 8006cd6:	b911      	cbnz	r1, 8006cde <sbrk_aligned+0x12>
 8006cd8:	f000 f8bc 	bl	8006e54 <_sbrk_r>
 8006cdc:	6030      	str	r0, [r6, #0]
 8006cde:	4621      	mov	r1, r4
 8006ce0:	4628      	mov	r0, r5
 8006ce2:	f000 f8b7 	bl	8006e54 <_sbrk_r>
 8006ce6:	1c43      	adds	r3, r0, #1
 8006ce8:	d00a      	beq.n	8006d00 <sbrk_aligned+0x34>
 8006cea:	1cc4      	adds	r4, r0, #3
 8006cec:	f024 0403 	bic.w	r4, r4, #3
 8006cf0:	42a0      	cmp	r0, r4
 8006cf2:	d007      	beq.n	8006d04 <sbrk_aligned+0x38>
 8006cf4:	1a21      	subs	r1, r4, r0
 8006cf6:	4628      	mov	r0, r5
 8006cf8:	f000 f8ac 	bl	8006e54 <_sbrk_r>
 8006cfc:	3001      	adds	r0, #1
 8006cfe:	d101      	bne.n	8006d04 <sbrk_aligned+0x38>
 8006d00:	f04f 34ff 	mov.w	r4, #4294967295
 8006d04:	4620      	mov	r0, r4
 8006d06:	bd70      	pop	{r4, r5, r6, pc}
 8006d08:	2000095c 	.word	0x2000095c

08006d0c <_malloc_r>:
 8006d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d10:	1ccd      	adds	r5, r1, #3
 8006d12:	f025 0503 	bic.w	r5, r5, #3
 8006d16:	3508      	adds	r5, #8
 8006d18:	2d0c      	cmp	r5, #12
 8006d1a:	bf38      	it	cc
 8006d1c:	250c      	movcc	r5, #12
 8006d1e:	2d00      	cmp	r5, #0
 8006d20:	4607      	mov	r7, r0
 8006d22:	db01      	blt.n	8006d28 <_malloc_r+0x1c>
 8006d24:	42a9      	cmp	r1, r5
 8006d26:	d905      	bls.n	8006d34 <_malloc_r+0x28>
 8006d28:	230c      	movs	r3, #12
 8006d2a:	603b      	str	r3, [r7, #0]
 8006d2c:	2600      	movs	r6, #0
 8006d2e:	4630      	mov	r0, r6
 8006d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d34:	4e2e      	ldr	r6, [pc, #184]	; (8006df0 <_malloc_r+0xe4>)
 8006d36:	f000 f89d 	bl	8006e74 <__malloc_lock>
 8006d3a:	6833      	ldr	r3, [r6, #0]
 8006d3c:	461c      	mov	r4, r3
 8006d3e:	bb34      	cbnz	r4, 8006d8e <_malloc_r+0x82>
 8006d40:	4629      	mov	r1, r5
 8006d42:	4638      	mov	r0, r7
 8006d44:	f7ff ffc2 	bl	8006ccc <sbrk_aligned>
 8006d48:	1c43      	adds	r3, r0, #1
 8006d4a:	4604      	mov	r4, r0
 8006d4c:	d14d      	bne.n	8006dea <_malloc_r+0xde>
 8006d4e:	6834      	ldr	r4, [r6, #0]
 8006d50:	4626      	mov	r6, r4
 8006d52:	2e00      	cmp	r6, #0
 8006d54:	d140      	bne.n	8006dd8 <_malloc_r+0xcc>
 8006d56:	6823      	ldr	r3, [r4, #0]
 8006d58:	4631      	mov	r1, r6
 8006d5a:	4638      	mov	r0, r7
 8006d5c:	eb04 0803 	add.w	r8, r4, r3
 8006d60:	f000 f878 	bl	8006e54 <_sbrk_r>
 8006d64:	4580      	cmp	r8, r0
 8006d66:	d13a      	bne.n	8006dde <_malloc_r+0xd2>
 8006d68:	6821      	ldr	r1, [r4, #0]
 8006d6a:	3503      	adds	r5, #3
 8006d6c:	1a6d      	subs	r5, r5, r1
 8006d6e:	f025 0503 	bic.w	r5, r5, #3
 8006d72:	3508      	adds	r5, #8
 8006d74:	2d0c      	cmp	r5, #12
 8006d76:	bf38      	it	cc
 8006d78:	250c      	movcc	r5, #12
 8006d7a:	4629      	mov	r1, r5
 8006d7c:	4638      	mov	r0, r7
 8006d7e:	f7ff ffa5 	bl	8006ccc <sbrk_aligned>
 8006d82:	3001      	adds	r0, #1
 8006d84:	d02b      	beq.n	8006dde <_malloc_r+0xd2>
 8006d86:	6823      	ldr	r3, [r4, #0]
 8006d88:	442b      	add	r3, r5
 8006d8a:	6023      	str	r3, [r4, #0]
 8006d8c:	e00e      	b.n	8006dac <_malloc_r+0xa0>
 8006d8e:	6822      	ldr	r2, [r4, #0]
 8006d90:	1b52      	subs	r2, r2, r5
 8006d92:	d41e      	bmi.n	8006dd2 <_malloc_r+0xc6>
 8006d94:	2a0b      	cmp	r2, #11
 8006d96:	d916      	bls.n	8006dc6 <_malloc_r+0xba>
 8006d98:	1961      	adds	r1, r4, r5
 8006d9a:	42a3      	cmp	r3, r4
 8006d9c:	6025      	str	r5, [r4, #0]
 8006d9e:	bf18      	it	ne
 8006da0:	6059      	strne	r1, [r3, #4]
 8006da2:	6863      	ldr	r3, [r4, #4]
 8006da4:	bf08      	it	eq
 8006da6:	6031      	streq	r1, [r6, #0]
 8006da8:	5162      	str	r2, [r4, r5]
 8006daa:	604b      	str	r3, [r1, #4]
 8006dac:	4638      	mov	r0, r7
 8006dae:	f104 060b 	add.w	r6, r4, #11
 8006db2:	f000 f865 	bl	8006e80 <__malloc_unlock>
 8006db6:	f026 0607 	bic.w	r6, r6, #7
 8006dba:	1d23      	adds	r3, r4, #4
 8006dbc:	1af2      	subs	r2, r6, r3
 8006dbe:	d0b6      	beq.n	8006d2e <_malloc_r+0x22>
 8006dc0:	1b9b      	subs	r3, r3, r6
 8006dc2:	50a3      	str	r3, [r4, r2]
 8006dc4:	e7b3      	b.n	8006d2e <_malloc_r+0x22>
 8006dc6:	6862      	ldr	r2, [r4, #4]
 8006dc8:	42a3      	cmp	r3, r4
 8006dca:	bf0c      	ite	eq
 8006dcc:	6032      	streq	r2, [r6, #0]
 8006dce:	605a      	strne	r2, [r3, #4]
 8006dd0:	e7ec      	b.n	8006dac <_malloc_r+0xa0>
 8006dd2:	4623      	mov	r3, r4
 8006dd4:	6864      	ldr	r4, [r4, #4]
 8006dd6:	e7b2      	b.n	8006d3e <_malloc_r+0x32>
 8006dd8:	4634      	mov	r4, r6
 8006dda:	6876      	ldr	r6, [r6, #4]
 8006ddc:	e7b9      	b.n	8006d52 <_malloc_r+0x46>
 8006dde:	230c      	movs	r3, #12
 8006de0:	603b      	str	r3, [r7, #0]
 8006de2:	4638      	mov	r0, r7
 8006de4:	f000 f84c 	bl	8006e80 <__malloc_unlock>
 8006de8:	e7a1      	b.n	8006d2e <_malloc_r+0x22>
 8006dea:	6025      	str	r5, [r4, #0]
 8006dec:	e7de      	b.n	8006dac <_malloc_r+0xa0>
 8006dee:	bf00      	nop
 8006df0:	20000958 	.word	0x20000958

08006df4 <_realloc_r>:
 8006df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006df8:	4680      	mov	r8, r0
 8006dfa:	4614      	mov	r4, r2
 8006dfc:	460e      	mov	r6, r1
 8006dfe:	b921      	cbnz	r1, 8006e0a <_realloc_r+0x16>
 8006e00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e04:	4611      	mov	r1, r2
 8006e06:	f7ff bf81 	b.w	8006d0c <_malloc_r>
 8006e0a:	b92a      	cbnz	r2, 8006e18 <_realloc_r+0x24>
 8006e0c:	f7ff ff12 	bl	8006c34 <_free_r>
 8006e10:	4625      	mov	r5, r4
 8006e12:	4628      	mov	r0, r5
 8006e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e18:	f000 f838 	bl	8006e8c <_malloc_usable_size_r>
 8006e1c:	4284      	cmp	r4, r0
 8006e1e:	4607      	mov	r7, r0
 8006e20:	d802      	bhi.n	8006e28 <_realloc_r+0x34>
 8006e22:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006e26:	d812      	bhi.n	8006e4e <_realloc_r+0x5a>
 8006e28:	4621      	mov	r1, r4
 8006e2a:	4640      	mov	r0, r8
 8006e2c:	f7ff ff6e 	bl	8006d0c <_malloc_r>
 8006e30:	4605      	mov	r5, r0
 8006e32:	2800      	cmp	r0, #0
 8006e34:	d0ed      	beq.n	8006e12 <_realloc_r+0x1e>
 8006e36:	42bc      	cmp	r4, r7
 8006e38:	4622      	mov	r2, r4
 8006e3a:	4631      	mov	r1, r6
 8006e3c:	bf28      	it	cs
 8006e3e:	463a      	movcs	r2, r7
 8006e40:	f7ff fed0 	bl	8006be4 <memcpy>
 8006e44:	4631      	mov	r1, r6
 8006e46:	4640      	mov	r0, r8
 8006e48:	f7ff fef4 	bl	8006c34 <_free_r>
 8006e4c:	e7e1      	b.n	8006e12 <_realloc_r+0x1e>
 8006e4e:	4635      	mov	r5, r6
 8006e50:	e7df      	b.n	8006e12 <_realloc_r+0x1e>
	...

08006e54 <_sbrk_r>:
 8006e54:	b538      	push	{r3, r4, r5, lr}
 8006e56:	4d06      	ldr	r5, [pc, #24]	; (8006e70 <_sbrk_r+0x1c>)
 8006e58:	2300      	movs	r3, #0
 8006e5a:	4604      	mov	r4, r0
 8006e5c:	4608      	mov	r0, r1
 8006e5e:	602b      	str	r3, [r5, #0]
 8006e60:	f7fa fcfa 	bl	8001858 <_sbrk>
 8006e64:	1c43      	adds	r3, r0, #1
 8006e66:	d102      	bne.n	8006e6e <_sbrk_r+0x1a>
 8006e68:	682b      	ldr	r3, [r5, #0]
 8006e6a:	b103      	cbz	r3, 8006e6e <_sbrk_r+0x1a>
 8006e6c:	6023      	str	r3, [r4, #0]
 8006e6e:	bd38      	pop	{r3, r4, r5, pc}
 8006e70:	20000960 	.word	0x20000960

08006e74 <__malloc_lock>:
 8006e74:	4801      	ldr	r0, [pc, #4]	; (8006e7c <__malloc_lock+0x8>)
 8006e76:	f000 b811 	b.w	8006e9c <__retarget_lock_acquire_recursive>
 8006e7a:	bf00      	nop
 8006e7c:	20000964 	.word	0x20000964

08006e80 <__malloc_unlock>:
 8006e80:	4801      	ldr	r0, [pc, #4]	; (8006e88 <__malloc_unlock+0x8>)
 8006e82:	f000 b80c 	b.w	8006e9e <__retarget_lock_release_recursive>
 8006e86:	bf00      	nop
 8006e88:	20000964 	.word	0x20000964

08006e8c <_malloc_usable_size_r>:
 8006e8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e90:	1f18      	subs	r0, r3, #4
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	bfbc      	itt	lt
 8006e96:	580b      	ldrlt	r3, [r1, r0]
 8006e98:	18c0      	addlt	r0, r0, r3
 8006e9a:	4770      	bx	lr

08006e9c <__retarget_lock_acquire_recursive>:
 8006e9c:	4770      	bx	lr

08006e9e <__retarget_lock_release_recursive>:
 8006e9e:	4770      	bx	lr

08006ea0 <sqrtf>:
 8006ea0:	b508      	push	{r3, lr}
 8006ea2:	ed2d 8b02 	vpush	{d8}
 8006ea6:	eeb0 8a40 	vmov.f32	s16, s0
 8006eaa:	f000 f817 	bl	8006edc <__ieee754_sqrtf>
 8006eae:	eeb4 8a48 	vcmp.f32	s16, s16
 8006eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006eb6:	d60c      	bvs.n	8006ed2 <sqrtf+0x32>
 8006eb8:	eddf 8a07 	vldr	s17, [pc, #28]	; 8006ed8 <sqrtf+0x38>
 8006ebc:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8006ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ec4:	d505      	bpl.n	8006ed2 <sqrtf+0x32>
 8006ec6:	f7ff fb4b 	bl	8006560 <__errno>
 8006eca:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8006ece:	2321      	movs	r3, #33	; 0x21
 8006ed0:	6003      	str	r3, [r0, #0]
 8006ed2:	ecbd 8b02 	vpop	{d8}
 8006ed6:	bd08      	pop	{r3, pc}
 8006ed8:	00000000 	.word	0x00000000

08006edc <__ieee754_sqrtf>:
 8006edc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8006ee0:	4770      	bx	lr
	...

08006ee4 <_init>:
 8006ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ee6:	bf00      	nop
 8006ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006eea:	bc08      	pop	{r3}
 8006eec:	469e      	mov	lr, r3
 8006eee:	4770      	bx	lr

08006ef0 <_fini>:
 8006ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ef2:	bf00      	nop
 8006ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ef6:	bc08      	pop	{r3}
 8006ef8:	469e      	mov	lr, r3
 8006efa:	4770      	bx	lr
