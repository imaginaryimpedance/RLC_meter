
RLC_nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002350  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002410  08002410  00012410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002440  08002440  0002020c  2**0
                  CONTENTS
  4 .ARM          00000000  08002440  08002440  0002020c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002440  08002440  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002440  08002440  00012440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002444  08002444  00012444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  08002448  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  2000020c  08002654  0002020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002cc  08002654  000202cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009a7a  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a9f  00000000  00000000  00029cae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa8  00000000  00000000  0002b750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009d0  00000000  00000000  0002c1f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018c5e  00000000  00000000  0002cbc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bc01  00000000  00000000  00045826  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000919f0  00000000  00000000  00051427  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e2e17  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025e8  00000000  00000000  000e2e68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000020c 	.word	0x2000020c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080023f8 	.word	0x080023f8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000210 	.word	0x20000210
 8000104:	080023f8 	.word	0x080023f8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 fab1 	bl	800078c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f83b 	bl	80002a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 f921 	bl	8000474 <MX_GPIO_Init>
  MX_DMA_Init();
 8000232:	f000 f901 	bl	8000438 <MX_DMA_Init>
  MX_DAC_Init();
 8000236:	f000 f87d 	bl	8000334 <MX_DAC_Init>
  MX_TIM2_Init();
 800023a:	f000 f8a9 	bl	8000390 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)Wave_LUT, 128, DAC_ALIGN_12B_R);
 800023e:	4a15      	ldr	r2, [pc, #84]	; (8000294 <main+0x74>)
 8000240:	4815      	ldr	r0, [pc, #84]	; (8000298 <main+0x78>)
 8000242:	2300      	movs	r3, #0
 8000244:	9300      	str	r3, [sp, #0]
 8000246:	2380      	movs	r3, #128	; 0x80
 8000248:	2100      	movs	r1, #0
 800024a:	f000 fc5d 	bl	8000b08 <HAL_DAC_Start_DMA>
     HAL_TIM_Base_Start(&htim2);
 800024e:	4b13      	ldr	r3, [pc, #76]	; (800029c <main+0x7c>)
 8000250:	0018      	movs	r0, r3
 8000252:	f001 fe0f 	bl	8001e74 <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET) {
 8000256:	2380      	movs	r3, #128	; 0x80
 8000258:	019b      	lsls	r3, r3, #6
 800025a:	4a11      	ldr	r2, [pc, #68]	; (80002a0 <main+0x80>)
 800025c:	0019      	movs	r1, r3
 800025e:	0010      	movs	r0, r2
 8000260:	f001 f8ac 	bl	80013bc <HAL_GPIO_ReadPin>
 8000264:	0003      	movs	r3, r0
 8000266:	2b01      	cmp	r3, #1
 8000268:	d109      	bne.n	800027e <main+0x5e>
		  __HAL_TIM_SET_AUTORELOAD(&htim2,312); //zmienia arr licznika
 800026a:	4b0c      	ldr	r3, [pc, #48]	; (800029c <main+0x7c>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	229c      	movs	r2, #156	; 0x9c
 8000270:	0052      	lsls	r2, r2, #1
 8000272:	62da      	str	r2, [r3, #44]	; 0x2c
 8000274:	4b09      	ldr	r3, [pc, #36]	; (800029c <main+0x7c>)
 8000276:	229c      	movs	r2, #156	; 0x9c
 8000278:	0052      	lsls	r2, r2, #1
 800027a:	60da      	str	r2, [r3, #12]
 800027c:	e7eb      	b.n	8000256 <main+0x36>
	  }
	  else{
		  __HAL_TIM_SET_AUTORELOAD(&htim2,624); //zmienia arr licznika
 800027e:	4b07      	ldr	r3, [pc, #28]	; (800029c <main+0x7c>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	229c      	movs	r2, #156	; 0x9c
 8000284:	0092      	lsls	r2, r2, #2
 8000286:	62da      	str	r2, [r3, #44]	; 0x2c
 8000288:	4b04      	ldr	r3, [pc, #16]	; (800029c <main+0x7c>)
 800028a:	229c      	movs	r2, #156	; 0x9c
 800028c:	0092      	lsls	r2, r2, #2
 800028e:	60da      	str	r2, [r3, #12]
	  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET) {
 8000290:	e7e1      	b.n	8000256 <main+0x36>
 8000292:	46c0      	nop			; (mov r8, r8)
 8000294:	20000000 	.word	0x20000000
 8000298:	20000228 	.word	0x20000228
 800029c:	20000280 	.word	0x20000280
 80002a0:	48000800 	.word	0x48000800

080002a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a4:	b590      	push	{r4, r7, lr}
 80002a6:	b093      	sub	sp, #76	; 0x4c
 80002a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002aa:	2414      	movs	r4, #20
 80002ac:	193b      	adds	r3, r7, r4
 80002ae:	0018      	movs	r0, r3
 80002b0:	2334      	movs	r3, #52	; 0x34
 80002b2:	001a      	movs	r2, r3
 80002b4:	2100      	movs	r1, #0
 80002b6:	f002 f897 	bl	80023e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ba:	1d3b      	adds	r3, r7, #4
 80002bc:	0018      	movs	r0, r3
 80002be:	2310      	movs	r3, #16
 80002c0:	001a      	movs	r2, r3
 80002c2:	2100      	movs	r1, #0
 80002c4:	f002 f890 	bl	80023e8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002c8:	0021      	movs	r1, r4
 80002ca:	187b      	adds	r3, r7, r1
 80002cc:	2201      	movs	r2, #1
 80002ce:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002d0:	187b      	adds	r3, r7, r1
 80002d2:	2201      	movs	r2, #1
 80002d4:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002d6:	187b      	adds	r3, r7, r1
 80002d8:	2202      	movs	r2, #2
 80002da:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002dc:	187b      	adds	r3, r7, r1
 80002de:	2280      	movs	r2, #128	; 0x80
 80002e0:	0252      	lsls	r2, r2, #9
 80002e2:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80002e4:	187b      	adds	r3, r7, r1
 80002e6:	22a0      	movs	r2, #160	; 0xa0
 80002e8:	0392      	lsls	r2, r2, #14
 80002ea:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 80002ec:	187b      	adds	r3, r7, r1
 80002ee:	2201      	movs	r2, #1
 80002f0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f2:	187b      	adds	r3, r7, r1
 80002f4:	0018      	movs	r0, r3
 80002f6:	f001 f89b 	bl	8001430 <HAL_RCC_OscConfig>
 80002fa:	1e03      	subs	r3, r0, #0
 80002fc:	d001      	beq.n	8000302 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80002fe:	f000 f939 	bl	8000574 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000302:	1d3b      	adds	r3, r7, #4
 8000304:	2207      	movs	r2, #7
 8000306:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000308:	1d3b      	adds	r3, r7, #4
 800030a:	2202      	movs	r2, #2
 800030c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800030e:	1d3b      	adds	r3, r7, #4
 8000310:	2200      	movs	r2, #0
 8000312:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000314:	1d3b      	adds	r3, r7, #4
 8000316:	2200      	movs	r2, #0
 8000318:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800031a:	1d3b      	adds	r3, r7, #4
 800031c:	2101      	movs	r1, #1
 800031e:	0018      	movs	r0, r3
 8000320:	f001 fc0c 	bl	8001b3c <HAL_RCC_ClockConfig>
 8000324:	1e03      	subs	r3, r0, #0
 8000326:	d001      	beq.n	800032c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000328:	f000 f924 	bl	8000574 <Error_Handler>
  }
}
 800032c:	46c0      	nop			; (mov r8, r8)
 800032e:	46bd      	mov	sp, r7
 8000330:	b013      	add	sp, #76	; 0x4c
 8000332:	bd90      	pop	{r4, r7, pc}

08000334 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b082      	sub	sp, #8
 8000338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800033a:	003b      	movs	r3, r7
 800033c:	0018      	movs	r0, r3
 800033e:	2308      	movs	r3, #8
 8000340:	001a      	movs	r2, r3
 8000342:	2100      	movs	r1, #0
 8000344:	f002 f850 	bl	80023e8 <memset>

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000348:	4b0f      	ldr	r3, [pc, #60]	; (8000388 <MX_DAC_Init+0x54>)
 800034a:	4a10      	ldr	r2, [pc, #64]	; (800038c <MX_DAC_Init+0x58>)
 800034c:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800034e:	4b0e      	ldr	r3, [pc, #56]	; (8000388 <MX_DAC_Init+0x54>)
 8000350:	0018      	movs	r0, r3
 8000352:	f000 fb5d 	bl	8000a10 <HAL_DAC_Init>
 8000356:	1e03      	subs	r3, r0, #0
 8000358:	d001      	beq.n	800035e <MX_DAC_Init+0x2a>
  {
    Error_Handler();
 800035a:	f000 f90b 	bl	8000574 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 800035e:	003b      	movs	r3, r7
 8000360:	2224      	movs	r2, #36	; 0x24
 8000362:	601a      	str	r2, [r3, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000364:	003b      	movs	r3, r7
 8000366:	2200      	movs	r2, #0
 8000368:	605a      	str	r2, [r3, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800036a:	0039      	movs	r1, r7
 800036c:	4b06      	ldr	r3, [pc, #24]	; (8000388 <MX_DAC_Init+0x54>)
 800036e:	2200      	movs	r2, #0
 8000370:	0018      	movs	r0, r3
 8000372:	f000 fb89 	bl	8000a88 <HAL_DAC_ConfigChannel>
 8000376:	1e03      	subs	r3, r0, #0
 8000378:	d001      	beq.n	800037e <MX_DAC_Init+0x4a>
  {
    Error_Handler();
 800037a:	f000 f8fb 	bl	8000574 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800037e:	46c0      	nop			; (mov r8, r8)
 8000380:	46bd      	mov	sp, r7
 8000382:	b002      	add	sp, #8
 8000384:	bd80      	pop	{r7, pc}
 8000386:	46c0      	nop			; (mov r8, r8)
 8000388:	20000228 	.word	0x20000228
 800038c:	40007400 	.word	0x40007400

08000390 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b086      	sub	sp, #24
 8000394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000396:	2308      	movs	r3, #8
 8000398:	18fb      	adds	r3, r7, r3
 800039a:	0018      	movs	r0, r3
 800039c:	2310      	movs	r3, #16
 800039e:	001a      	movs	r2, r3
 80003a0:	2100      	movs	r1, #0
 80003a2:	f002 f821 	bl	80023e8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003a6:	003b      	movs	r3, r7
 80003a8:	0018      	movs	r0, r3
 80003aa:	2308      	movs	r3, #8
 80003ac:	001a      	movs	r2, r3
 80003ae:	2100      	movs	r1, #0
 80003b0:	f002 f81a 	bl	80023e8 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80003b4:	4b1f      	ldr	r3, [pc, #124]	; (8000434 <MX_TIM2_Init+0xa4>)
 80003b6:	2280      	movs	r2, #128	; 0x80
 80003b8:	05d2      	lsls	r2, r2, #23
 80003ba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80003bc:	4b1d      	ldr	r3, [pc, #116]	; (8000434 <MX_TIM2_Init+0xa4>)
 80003be:	2200      	movs	r2, #0
 80003c0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003c2:	4b1c      	ldr	r3, [pc, #112]	; (8000434 <MX_TIM2_Init+0xa4>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 624;
 80003c8:	4b1a      	ldr	r3, [pc, #104]	; (8000434 <MX_TIM2_Init+0xa4>)
 80003ca:	229c      	movs	r2, #156	; 0x9c
 80003cc:	0092      	lsls	r2, r2, #2
 80003ce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003d0:	4b18      	ldr	r3, [pc, #96]	; (8000434 <MX_TIM2_Init+0xa4>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003d6:	4b17      	ldr	r3, [pc, #92]	; (8000434 <MX_TIM2_Init+0xa4>)
 80003d8:	2200      	movs	r2, #0
 80003da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80003dc:	4b15      	ldr	r3, [pc, #84]	; (8000434 <MX_TIM2_Init+0xa4>)
 80003de:	0018      	movs	r0, r3
 80003e0:	f001 fcf8 	bl	8001dd4 <HAL_TIM_Base_Init>
 80003e4:	1e03      	subs	r3, r0, #0
 80003e6:	d001      	beq.n	80003ec <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80003e8:	f000 f8c4 	bl	8000574 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003ec:	2108      	movs	r1, #8
 80003ee:	187b      	adds	r3, r7, r1
 80003f0:	2280      	movs	r2, #128	; 0x80
 80003f2:	0152      	lsls	r2, r2, #5
 80003f4:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80003f6:	187a      	adds	r2, r7, r1
 80003f8:	4b0e      	ldr	r3, [pc, #56]	; (8000434 <MX_TIM2_Init+0xa4>)
 80003fa:	0011      	movs	r1, r2
 80003fc:	0018      	movs	r0, r3
 80003fe:	f001 fd83 	bl	8001f08 <HAL_TIM_ConfigClockSource>
 8000402:	1e03      	subs	r3, r0, #0
 8000404:	d001      	beq.n	800040a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000406:	f000 f8b5 	bl	8000574 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800040a:	003b      	movs	r3, r7
 800040c:	2220      	movs	r2, #32
 800040e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000410:	003b      	movs	r3, r7
 8000412:	2200      	movs	r2, #0
 8000414:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000416:	003a      	movs	r2, r7
 8000418:	4b06      	ldr	r3, [pc, #24]	; (8000434 <MX_TIM2_Init+0xa4>)
 800041a:	0011      	movs	r1, r2
 800041c:	0018      	movs	r0, r3
 800041e:	f001 ff61 	bl	80022e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000422:	1e03      	subs	r3, r0, #0
 8000424:	d001      	beq.n	800042a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000426:	f000 f8a5 	bl	8000574 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800042a:	46c0      	nop			; (mov r8, r8)
 800042c:	46bd      	mov	sp, r7
 800042e:	b006      	add	sp, #24
 8000430:	bd80      	pop	{r7, pc}
 8000432:	46c0      	nop			; (mov r8, r8)
 8000434:	20000280 	.word	0x20000280

08000438 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b082      	sub	sp, #8
 800043c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800043e:	4b0c      	ldr	r3, [pc, #48]	; (8000470 <MX_DMA_Init+0x38>)
 8000440:	695a      	ldr	r2, [r3, #20]
 8000442:	4b0b      	ldr	r3, [pc, #44]	; (8000470 <MX_DMA_Init+0x38>)
 8000444:	2101      	movs	r1, #1
 8000446:	430a      	orrs	r2, r1
 8000448:	615a      	str	r2, [r3, #20]
 800044a:	4b09      	ldr	r3, [pc, #36]	; (8000470 <MX_DMA_Init+0x38>)
 800044c:	695b      	ldr	r3, [r3, #20]
 800044e:	2201      	movs	r2, #1
 8000450:	4013      	ands	r3, r2
 8000452:	607b      	str	r3, [r7, #4]
 8000454:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000456:	2200      	movs	r2, #0
 8000458:	2100      	movs	r1, #0
 800045a:	200a      	movs	r0, #10
 800045c:	f000 faa6 	bl	80009ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000460:	200a      	movs	r0, #10
 8000462:	f000 fab8 	bl	80009d6 <HAL_NVIC_EnableIRQ>

}
 8000466:	46c0      	nop			; (mov r8, r8)
 8000468:	46bd      	mov	sp, r7
 800046a:	b002      	add	sp, #8
 800046c:	bd80      	pop	{r7, pc}
 800046e:	46c0      	nop			; (mov r8, r8)
 8000470:	40021000 	.word	0x40021000

08000474 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000474:	b590      	push	{r4, r7, lr}
 8000476:	b089      	sub	sp, #36	; 0x24
 8000478:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800047a:	240c      	movs	r4, #12
 800047c:	193b      	adds	r3, r7, r4
 800047e:	0018      	movs	r0, r3
 8000480:	2314      	movs	r3, #20
 8000482:	001a      	movs	r2, r3
 8000484:	2100      	movs	r1, #0
 8000486:	f001 ffaf 	bl	80023e8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800048a:	4b38      	ldr	r3, [pc, #224]	; (800056c <MX_GPIO_Init+0xf8>)
 800048c:	695a      	ldr	r2, [r3, #20]
 800048e:	4b37      	ldr	r3, [pc, #220]	; (800056c <MX_GPIO_Init+0xf8>)
 8000490:	2180      	movs	r1, #128	; 0x80
 8000492:	0309      	lsls	r1, r1, #12
 8000494:	430a      	orrs	r2, r1
 8000496:	615a      	str	r2, [r3, #20]
 8000498:	4b34      	ldr	r3, [pc, #208]	; (800056c <MX_GPIO_Init+0xf8>)
 800049a:	695a      	ldr	r2, [r3, #20]
 800049c:	2380      	movs	r3, #128	; 0x80
 800049e:	031b      	lsls	r3, r3, #12
 80004a0:	4013      	ands	r3, r2
 80004a2:	60bb      	str	r3, [r7, #8]
 80004a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004a6:	4b31      	ldr	r3, [pc, #196]	; (800056c <MX_GPIO_Init+0xf8>)
 80004a8:	695a      	ldr	r2, [r3, #20]
 80004aa:	4b30      	ldr	r3, [pc, #192]	; (800056c <MX_GPIO_Init+0xf8>)
 80004ac:	2180      	movs	r1, #128	; 0x80
 80004ae:	03c9      	lsls	r1, r1, #15
 80004b0:	430a      	orrs	r2, r1
 80004b2:	615a      	str	r2, [r3, #20]
 80004b4:	4b2d      	ldr	r3, [pc, #180]	; (800056c <MX_GPIO_Init+0xf8>)
 80004b6:	695a      	ldr	r2, [r3, #20]
 80004b8:	2380      	movs	r3, #128	; 0x80
 80004ba:	03db      	lsls	r3, r3, #15
 80004bc:	4013      	ands	r3, r2
 80004be:	607b      	str	r3, [r7, #4]
 80004c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c2:	4b2a      	ldr	r3, [pc, #168]	; (800056c <MX_GPIO_Init+0xf8>)
 80004c4:	695a      	ldr	r2, [r3, #20]
 80004c6:	4b29      	ldr	r3, [pc, #164]	; (800056c <MX_GPIO_Init+0xf8>)
 80004c8:	2180      	movs	r1, #128	; 0x80
 80004ca:	0289      	lsls	r1, r1, #10
 80004cc:	430a      	orrs	r2, r1
 80004ce:	615a      	str	r2, [r3, #20]
 80004d0:	4b26      	ldr	r3, [pc, #152]	; (800056c <MX_GPIO_Init+0xf8>)
 80004d2:	695a      	ldr	r2, [r3, #20]
 80004d4:	2380      	movs	r3, #128	; 0x80
 80004d6:	029b      	lsls	r3, r3, #10
 80004d8:	4013      	ands	r3, r2
 80004da:	603b      	str	r3, [r7, #0]
 80004dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80004de:	2390      	movs	r3, #144	; 0x90
 80004e0:	05db      	lsls	r3, r3, #23
 80004e2:	2200      	movs	r2, #0
 80004e4:	2120      	movs	r1, #32
 80004e6:	0018      	movs	r0, r3
 80004e8:	f000 ff85 	bl	80013f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004ec:	193b      	adds	r3, r7, r4
 80004ee:	2280      	movs	r2, #128	; 0x80
 80004f0:	0192      	lsls	r2, r2, #6
 80004f2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004f4:	193b      	adds	r3, r7, r4
 80004f6:	2284      	movs	r2, #132	; 0x84
 80004f8:	0392      	lsls	r2, r2, #14
 80004fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fc:	193b      	adds	r3, r7, r4
 80004fe:	2200      	movs	r2, #0
 8000500:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000502:	193b      	adds	r3, r7, r4
 8000504:	4a1a      	ldr	r2, [pc, #104]	; (8000570 <MX_GPIO_Init+0xfc>)
 8000506:	0019      	movs	r1, r3
 8000508:	0010      	movs	r0, r2
 800050a:	f000 fddf 	bl	80010cc <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800050e:	193b      	adds	r3, r7, r4
 8000510:	220c      	movs	r2, #12
 8000512:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000514:	193b      	adds	r3, r7, r4
 8000516:	2202      	movs	r2, #2
 8000518:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051a:	193b      	adds	r3, r7, r4
 800051c:	2200      	movs	r2, #0
 800051e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000520:	193b      	adds	r3, r7, r4
 8000522:	2200      	movs	r2, #0
 8000524:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000526:	193b      	adds	r3, r7, r4
 8000528:	2201      	movs	r2, #1
 800052a:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800052c:	193a      	adds	r2, r7, r4
 800052e:	2390      	movs	r3, #144	; 0x90
 8000530:	05db      	lsls	r3, r3, #23
 8000532:	0011      	movs	r1, r2
 8000534:	0018      	movs	r0, r3
 8000536:	f000 fdc9 	bl	80010cc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800053a:	0021      	movs	r1, r4
 800053c:	187b      	adds	r3, r7, r1
 800053e:	2220      	movs	r2, #32
 8000540:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000542:	187b      	adds	r3, r7, r1
 8000544:	2201      	movs	r2, #1
 8000546:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000548:	187b      	adds	r3, r7, r1
 800054a:	2200      	movs	r2, #0
 800054c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800054e:	187b      	adds	r3, r7, r1
 8000550:	2200      	movs	r2, #0
 8000552:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000554:	187a      	adds	r2, r7, r1
 8000556:	2390      	movs	r3, #144	; 0x90
 8000558:	05db      	lsls	r3, r3, #23
 800055a:	0011      	movs	r1, r2
 800055c:	0018      	movs	r0, r3
 800055e:	f000 fdb5 	bl	80010cc <HAL_GPIO_Init>

}
 8000562:	46c0      	nop			; (mov r8, r8)
 8000564:	46bd      	mov	sp, r7
 8000566:	b009      	add	sp, #36	; 0x24
 8000568:	bd90      	pop	{r4, r7, pc}
 800056a:	46c0      	nop			; (mov r8, r8)
 800056c:	40021000 	.word	0x40021000
 8000570:	48000800 	.word	0x48000800

08000574 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000578:	b672      	cpsid	i
}
 800057a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800057c:	e7fe      	b.n	800057c <Error_Handler+0x8>
	...

08000580 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000586:	4b0f      	ldr	r3, [pc, #60]	; (80005c4 <HAL_MspInit+0x44>)
 8000588:	699a      	ldr	r2, [r3, #24]
 800058a:	4b0e      	ldr	r3, [pc, #56]	; (80005c4 <HAL_MspInit+0x44>)
 800058c:	2101      	movs	r1, #1
 800058e:	430a      	orrs	r2, r1
 8000590:	619a      	str	r2, [r3, #24]
 8000592:	4b0c      	ldr	r3, [pc, #48]	; (80005c4 <HAL_MspInit+0x44>)
 8000594:	699b      	ldr	r3, [r3, #24]
 8000596:	2201      	movs	r2, #1
 8000598:	4013      	ands	r3, r2
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800059e:	4b09      	ldr	r3, [pc, #36]	; (80005c4 <HAL_MspInit+0x44>)
 80005a0:	69da      	ldr	r2, [r3, #28]
 80005a2:	4b08      	ldr	r3, [pc, #32]	; (80005c4 <HAL_MspInit+0x44>)
 80005a4:	2180      	movs	r1, #128	; 0x80
 80005a6:	0549      	lsls	r1, r1, #21
 80005a8:	430a      	orrs	r2, r1
 80005aa:	61da      	str	r2, [r3, #28]
 80005ac:	4b05      	ldr	r3, [pc, #20]	; (80005c4 <HAL_MspInit+0x44>)
 80005ae:	69da      	ldr	r2, [r3, #28]
 80005b0:	2380      	movs	r3, #128	; 0x80
 80005b2:	055b      	lsls	r3, r3, #21
 80005b4:	4013      	ands	r3, r2
 80005b6:	603b      	str	r3, [r7, #0]
 80005b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005ba:	46c0      	nop			; (mov r8, r8)
 80005bc:	46bd      	mov	sp, r7
 80005be:	b002      	add	sp, #8
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	46c0      	nop			; (mov r8, r8)
 80005c4:	40021000 	.word	0x40021000

080005c8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80005c8:	b590      	push	{r4, r7, lr}
 80005ca:	b08b      	sub	sp, #44	; 0x2c
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d0:	2414      	movs	r4, #20
 80005d2:	193b      	adds	r3, r7, r4
 80005d4:	0018      	movs	r0, r3
 80005d6:	2314      	movs	r3, #20
 80005d8:	001a      	movs	r2, r3
 80005da:	2100      	movs	r1, #0
 80005dc:	f001 ff04 	bl	80023e8 <memset>
  if(hdac->Instance==DAC)
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a2d      	ldr	r2, [pc, #180]	; (800069c <HAL_DAC_MspInit+0xd4>)
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d154      	bne.n	8000694 <HAL_DAC_MspInit+0xcc>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80005ea:	4b2d      	ldr	r3, [pc, #180]	; (80006a0 <HAL_DAC_MspInit+0xd8>)
 80005ec:	69da      	ldr	r2, [r3, #28]
 80005ee:	4b2c      	ldr	r3, [pc, #176]	; (80006a0 <HAL_DAC_MspInit+0xd8>)
 80005f0:	2180      	movs	r1, #128	; 0x80
 80005f2:	0589      	lsls	r1, r1, #22
 80005f4:	430a      	orrs	r2, r1
 80005f6:	61da      	str	r2, [r3, #28]
 80005f8:	4b29      	ldr	r3, [pc, #164]	; (80006a0 <HAL_DAC_MspInit+0xd8>)
 80005fa:	69da      	ldr	r2, [r3, #28]
 80005fc:	2380      	movs	r3, #128	; 0x80
 80005fe:	059b      	lsls	r3, r3, #22
 8000600:	4013      	ands	r3, r2
 8000602:	613b      	str	r3, [r7, #16]
 8000604:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000606:	4b26      	ldr	r3, [pc, #152]	; (80006a0 <HAL_DAC_MspInit+0xd8>)
 8000608:	695a      	ldr	r2, [r3, #20]
 800060a:	4b25      	ldr	r3, [pc, #148]	; (80006a0 <HAL_DAC_MspInit+0xd8>)
 800060c:	2180      	movs	r1, #128	; 0x80
 800060e:	0289      	lsls	r1, r1, #10
 8000610:	430a      	orrs	r2, r1
 8000612:	615a      	str	r2, [r3, #20]
 8000614:	4b22      	ldr	r3, [pc, #136]	; (80006a0 <HAL_DAC_MspInit+0xd8>)
 8000616:	695a      	ldr	r2, [r3, #20]
 8000618:	2380      	movs	r3, #128	; 0x80
 800061a:	029b      	lsls	r3, r3, #10
 800061c:	4013      	ands	r3, r2
 800061e:	60fb      	str	r3, [r7, #12]
 8000620:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000622:	193b      	adds	r3, r7, r4
 8000624:	2210      	movs	r2, #16
 8000626:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000628:	193b      	adds	r3, r7, r4
 800062a:	2203      	movs	r2, #3
 800062c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062e:	193b      	adds	r3, r7, r4
 8000630:	2200      	movs	r2, #0
 8000632:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000634:	193a      	adds	r2, r7, r4
 8000636:	2390      	movs	r3, #144	; 0x90
 8000638:	05db      	lsls	r3, r3, #23
 800063a:	0011      	movs	r1, r2
 800063c:	0018      	movs	r0, r3
 800063e:	f000 fd45 	bl	80010cc <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8000642:	4b18      	ldr	r3, [pc, #96]	; (80006a4 <HAL_DAC_MspInit+0xdc>)
 8000644:	4a18      	ldr	r2, [pc, #96]	; (80006a8 <HAL_DAC_MspInit+0xe0>)
 8000646:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000648:	4b16      	ldr	r3, [pc, #88]	; (80006a4 <HAL_DAC_MspInit+0xdc>)
 800064a:	2210      	movs	r2, #16
 800064c:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800064e:	4b15      	ldr	r3, [pc, #84]	; (80006a4 <HAL_DAC_MspInit+0xdc>)
 8000650:	2200      	movs	r2, #0
 8000652:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000654:	4b13      	ldr	r3, [pc, #76]	; (80006a4 <HAL_DAC_MspInit+0xdc>)
 8000656:	2280      	movs	r2, #128	; 0x80
 8000658:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800065a:	4b12      	ldr	r3, [pc, #72]	; (80006a4 <HAL_DAC_MspInit+0xdc>)
 800065c:	2280      	movs	r2, #128	; 0x80
 800065e:	0092      	lsls	r2, r2, #2
 8000660:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000662:	4b10      	ldr	r3, [pc, #64]	; (80006a4 <HAL_DAC_MspInit+0xdc>)
 8000664:	2280      	movs	r2, #128	; 0x80
 8000666:	0112      	lsls	r2, r2, #4
 8000668:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 800066a:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <HAL_DAC_MspInit+0xdc>)
 800066c:	2220      	movs	r2, #32
 800066e:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8000670:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <HAL_DAC_MspInit+0xdc>)
 8000672:	2280      	movs	r2, #128	; 0x80
 8000674:	0192      	lsls	r2, r2, #6
 8000676:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8000678:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <HAL_DAC_MspInit+0xdc>)
 800067a:	0018      	movs	r0, r3
 800067c:	f000 fb8e 	bl	8000d9c <HAL_DMA_Init>
 8000680:	1e03      	subs	r3, r0, #0
 8000682:	d001      	beq.n	8000688 <HAL_DAC_MspInit+0xc0>
    {
      Error_Handler();
 8000684:	f7ff ff76 	bl	8000574 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	4a06      	ldr	r2, [pc, #24]	; (80006a4 <HAL_DAC_MspInit+0xdc>)
 800068c:	609a      	str	r2, [r3, #8]
 800068e:	4b05      	ldr	r3, [pc, #20]	; (80006a4 <HAL_DAC_MspInit+0xdc>)
 8000690:	687a      	ldr	r2, [r7, #4]
 8000692:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000694:	46c0      	nop			; (mov r8, r8)
 8000696:	46bd      	mov	sp, r7
 8000698:	b00b      	add	sp, #44	; 0x2c
 800069a:	bd90      	pop	{r4, r7, pc}
 800069c:	40007400 	.word	0x40007400
 80006a0:	40021000 	.word	0x40021000
 80006a4:	2000023c 	.word	0x2000023c
 80006a8:	40020030 	.word	0x40020030

080006ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681a      	ldr	r2, [r3, #0]
 80006b8:	2380      	movs	r3, #128	; 0x80
 80006ba:	05db      	lsls	r3, r3, #23
 80006bc:	429a      	cmp	r2, r3
 80006be:	d10b      	bne.n	80006d8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80006c0:	4b07      	ldr	r3, [pc, #28]	; (80006e0 <HAL_TIM_Base_MspInit+0x34>)
 80006c2:	69da      	ldr	r2, [r3, #28]
 80006c4:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <HAL_TIM_Base_MspInit+0x34>)
 80006c6:	2101      	movs	r1, #1
 80006c8:	430a      	orrs	r2, r1
 80006ca:	61da      	str	r2, [r3, #28]
 80006cc:	4b04      	ldr	r3, [pc, #16]	; (80006e0 <HAL_TIM_Base_MspInit+0x34>)
 80006ce:	69db      	ldr	r3, [r3, #28]
 80006d0:	2201      	movs	r2, #1
 80006d2:	4013      	ands	r3, r2
 80006d4:	60fb      	str	r3, [r7, #12]
 80006d6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80006d8:	46c0      	nop			; (mov r8, r8)
 80006da:	46bd      	mov	sp, r7
 80006dc:	b004      	add	sp, #16
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	40021000 	.word	0x40021000

080006e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006e8:	e7fe      	b.n	80006e8 <NMI_Handler+0x4>

080006ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006ea:	b580      	push	{r7, lr}
 80006ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ee:	e7fe      	b.n	80006ee <HardFault_Handler+0x4>

080006f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80006f4:	46c0      	nop			; (mov r8, r8)
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}

080006fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006fa:	b580      	push	{r7, lr}
 80006fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006fe:	46c0      	nop			; (mov r8, r8)
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}

08000704 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000708:	f000 f888 	bl	800081c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800070c:	46c0      	nop			; (mov r8, r8)
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
	...

08000714 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8000718:	4b03      	ldr	r3, [pc, #12]	; (8000728 <DMA1_Channel2_3_IRQHandler+0x14>)
 800071a:	0018      	movs	r0, r3
 800071c:	f000 fbec 	bl	8000ef8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000720:	46c0      	nop			; (mov r8, r8)
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	46c0      	nop			; (mov r8, r8)
 8000728:	2000023c 	.word	0x2000023c

0800072c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000730:	46c0      	nop			; (mov r8, r8)
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
	...

08000738 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000738:	480d      	ldr	r0, [pc, #52]	; (8000770 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800073a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800073c:	f7ff fff6 	bl	800072c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000740:	480c      	ldr	r0, [pc, #48]	; (8000774 <LoopForever+0x6>)
  ldr r1, =_edata
 8000742:	490d      	ldr	r1, [pc, #52]	; (8000778 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000744:	4a0d      	ldr	r2, [pc, #52]	; (800077c <LoopForever+0xe>)
  movs r3, #0
 8000746:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000748:	e002      	b.n	8000750 <LoopCopyDataInit>

0800074a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800074a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800074c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800074e:	3304      	adds	r3, #4

08000750 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000750:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000752:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000754:	d3f9      	bcc.n	800074a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000756:	4a0a      	ldr	r2, [pc, #40]	; (8000780 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000758:	4c0a      	ldr	r4, [pc, #40]	; (8000784 <LoopForever+0x16>)
  movs r3, #0
 800075a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800075c:	e001      	b.n	8000762 <LoopFillZerobss>

0800075e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800075e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000760:	3204      	adds	r2, #4

08000762 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000762:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000764:	d3fb      	bcc.n	800075e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000766:	f001 fe1b 	bl	80023a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800076a:	f7ff fd59 	bl	8000220 <main>

0800076e <LoopForever>:

LoopForever:
    b LoopForever
 800076e:	e7fe      	b.n	800076e <LoopForever>
  ldr   r0, =_estack
 8000770:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000774:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000778:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 800077c:	08002448 	.word	0x08002448
  ldr r2, =_sbss
 8000780:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 8000784:	200002cc 	.word	0x200002cc

08000788 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000788:	e7fe      	b.n	8000788 <ADC1_COMP_IRQHandler>
	...

0800078c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000790:	4b07      	ldr	r3, [pc, #28]	; (80007b0 <HAL_Init+0x24>)
 8000792:	681a      	ldr	r2, [r3, #0]
 8000794:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <HAL_Init+0x24>)
 8000796:	2110      	movs	r1, #16
 8000798:	430a      	orrs	r2, r1
 800079a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800079c:	2000      	movs	r0, #0
 800079e:	f000 f809 	bl	80007b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007a2:	f7ff feed 	bl	8000580 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007a6:	2300      	movs	r3, #0
}
 80007a8:	0018      	movs	r0, r3
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	46c0      	nop			; (mov r8, r8)
 80007b0:	40022000 	.word	0x40022000

080007b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007b4:	b590      	push	{r4, r7, lr}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007bc:	4b14      	ldr	r3, [pc, #80]	; (8000810 <HAL_InitTick+0x5c>)
 80007be:	681c      	ldr	r4, [r3, #0]
 80007c0:	4b14      	ldr	r3, [pc, #80]	; (8000814 <HAL_InitTick+0x60>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	0019      	movs	r1, r3
 80007c6:	23fa      	movs	r3, #250	; 0xfa
 80007c8:	0098      	lsls	r0, r3, #2
 80007ca:	f7ff fc9d 	bl	8000108 <__udivsi3>
 80007ce:	0003      	movs	r3, r0
 80007d0:	0019      	movs	r1, r3
 80007d2:	0020      	movs	r0, r4
 80007d4:	f7ff fc98 	bl	8000108 <__udivsi3>
 80007d8:	0003      	movs	r3, r0
 80007da:	0018      	movs	r0, r3
 80007dc:	f000 f90b 	bl	80009f6 <HAL_SYSTICK_Config>
 80007e0:	1e03      	subs	r3, r0, #0
 80007e2:	d001      	beq.n	80007e8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80007e4:	2301      	movs	r3, #1
 80007e6:	e00f      	b.n	8000808 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	2b03      	cmp	r3, #3
 80007ec:	d80b      	bhi.n	8000806 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007ee:	6879      	ldr	r1, [r7, #4]
 80007f0:	2301      	movs	r3, #1
 80007f2:	425b      	negs	r3, r3
 80007f4:	2200      	movs	r2, #0
 80007f6:	0018      	movs	r0, r3
 80007f8:	f000 f8d8 	bl	80009ac <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007fc:	4b06      	ldr	r3, [pc, #24]	; (8000818 <HAL_InitTick+0x64>)
 80007fe:	687a      	ldr	r2, [r7, #4]
 8000800:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000802:	2300      	movs	r3, #0
 8000804:	e000      	b.n	8000808 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000806:	2301      	movs	r3, #1
}
 8000808:	0018      	movs	r0, r3
 800080a:	46bd      	mov	sp, r7
 800080c:	b003      	add	sp, #12
 800080e:	bd90      	pop	{r4, r7, pc}
 8000810:	20000200 	.word	0x20000200
 8000814:	20000208 	.word	0x20000208
 8000818:	20000204 	.word	0x20000204

0800081c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000820:	4b05      	ldr	r3, [pc, #20]	; (8000838 <HAL_IncTick+0x1c>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	001a      	movs	r2, r3
 8000826:	4b05      	ldr	r3, [pc, #20]	; (800083c <HAL_IncTick+0x20>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	18d2      	adds	r2, r2, r3
 800082c:	4b03      	ldr	r3, [pc, #12]	; (800083c <HAL_IncTick+0x20>)
 800082e:	601a      	str	r2, [r3, #0]
}
 8000830:	46c0      	nop			; (mov r8, r8)
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	46c0      	nop			; (mov r8, r8)
 8000838:	20000208 	.word	0x20000208
 800083c:	200002c8 	.word	0x200002c8

08000840 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  return uwTick;
 8000844:	4b02      	ldr	r3, [pc, #8]	; (8000850 <HAL_GetTick+0x10>)
 8000846:	681b      	ldr	r3, [r3, #0]
}
 8000848:	0018      	movs	r0, r3
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	46c0      	nop			; (mov r8, r8)
 8000850:	200002c8 	.word	0x200002c8

08000854 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	0002      	movs	r2, r0
 800085c:	1dfb      	adds	r3, r7, #7
 800085e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000860:	1dfb      	adds	r3, r7, #7
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	2b7f      	cmp	r3, #127	; 0x7f
 8000866:	d809      	bhi.n	800087c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000868:	1dfb      	adds	r3, r7, #7
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	001a      	movs	r2, r3
 800086e:	231f      	movs	r3, #31
 8000870:	401a      	ands	r2, r3
 8000872:	4b04      	ldr	r3, [pc, #16]	; (8000884 <__NVIC_EnableIRQ+0x30>)
 8000874:	2101      	movs	r1, #1
 8000876:	4091      	lsls	r1, r2
 8000878:	000a      	movs	r2, r1
 800087a:	601a      	str	r2, [r3, #0]
  }
}
 800087c:	46c0      	nop			; (mov r8, r8)
 800087e:	46bd      	mov	sp, r7
 8000880:	b002      	add	sp, #8
 8000882:	bd80      	pop	{r7, pc}
 8000884:	e000e100 	.word	0xe000e100

08000888 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000888:	b590      	push	{r4, r7, lr}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	0002      	movs	r2, r0
 8000890:	6039      	str	r1, [r7, #0]
 8000892:	1dfb      	adds	r3, r7, #7
 8000894:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000896:	1dfb      	adds	r3, r7, #7
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	2b7f      	cmp	r3, #127	; 0x7f
 800089c:	d828      	bhi.n	80008f0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800089e:	4a2f      	ldr	r2, [pc, #188]	; (800095c <__NVIC_SetPriority+0xd4>)
 80008a0:	1dfb      	adds	r3, r7, #7
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	b25b      	sxtb	r3, r3
 80008a6:	089b      	lsrs	r3, r3, #2
 80008a8:	33c0      	adds	r3, #192	; 0xc0
 80008aa:	009b      	lsls	r3, r3, #2
 80008ac:	589b      	ldr	r3, [r3, r2]
 80008ae:	1dfa      	adds	r2, r7, #7
 80008b0:	7812      	ldrb	r2, [r2, #0]
 80008b2:	0011      	movs	r1, r2
 80008b4:	2203      	movs	r2, #3
 80008b6:	400a      	ands	r2, r1
 80008b8:	00d2      	lsls	r2, r2, #3
 80008ba:	21ff      	movs	r1, #255	; 0xff
 80008bc:	4091      	lsls	r1, r2
 80008be:	000a      	movs	r2, r1
 80008c0:	43d2      	mvns	r2, r2
 80008c2:	401a      	ands	r2, r3
 80008c4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	019b      	lsls	r3, r3, #6
 80008ca:	22ff      	movs	r2, #255	; 0xff
 80008cc:	401a      	ands	r2, r3
 80008ce:	1dfb      	adds	r3, r7, #7
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	0018      	movs	r0, r3
 80008d4:	2303      	movs	r3, #3
 80008d6:	4003      	ands	r3, r0
 80008d8:	00db      	lsls	r3, r3, #3
 80008da:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008dc:	481f      	ldr	r0, [pc, #124]	; (800095c <__NVIC_SetPriority+0xd4>)
 80008de:	1dfb      	adds	r3, r7, #7
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	b25b      	sxtb	r3, r3
 80008e4:	089b      	lsrs	r3, r3, #2
 80008e6:	430a      	orrs	r2, r1
 80008e8:	33c0      	adds	r3, #192	; 0xc0
 80008ea:	009b      	lsls	r3, r3, #2
 80008ec:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80008ee:	e031      	b.n	8000954 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008f0:	4a1b      	ldr	r2, [pc, #108]	; (8000960 <__NVIC_SetPriority+0xd8>)
 80008f2:	1dfb      	adds	r3, r7, #7
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	0019      	movs	r1, r3
 80008f8:	230f      	movs	r3, #15
 80008fa:	400b      	ands	r3, r1
 80008fc:	3b08      	subs	r3, #8
 80008fe:	089b      	lsrs	r3, r3, #2
 8000900:	3306      	adds	r3, #6
 8000902:	009b      	lsls	r3, r3, #2
 8000904:	18d3      	adds	r3, r2, r3
 8000906:	3304      	adds	r3, #4
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	1dfa      	adds	r2, r7, #7
 800090c:	7812      	ldrb	r2, [r2, #0]
 800090e:	0011      	movs	r1, r2
 8000910:	2203      	movs	r2, #3
 8000912:	400a      	ands	r2, r1
 8000914:	00d2      	lsls	r2, r2, #3
 8000916:	21ff      	movs	r1, #255	; 0xff
 8000918:	4091      	lsls	r1, r2
 800091a:	000a      	movs	r2, r1
 800091c:	43d2      	mvns	r2, r2
 800091e:	401a      	ands	r2, r3
 8000920:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	019b      	lsls	r3, r3, #6
 8000926:	22ff      	movs	r2, #255	; 0xff
 8000928:	401a      	ands	r2, r3
 800092a:	1dfb      	adds	r3, r7, #7
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	0018      	movs	r0, r3
 8000930:	2303      	movs	r3, #3
 8000932:	4003      	ands	r3, r0
 8000934:	00db      	lsls	r3, r3, #3
 8000936:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000938:	4809      	ldr	r0, [pc, #36]	; (8000960 <__NVIC_SetPriority+0xd8>)
 800093a:	1dfb      	adds	r3, r7, #7
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	001c      	movs	r4, r3
 8000940:	230f      	movs	r3, #15
 8000942:	4023      	ands	r3, r4
 8000944:	3b08      	subs	r3, #8
 8000946:	089b      	lsrs	r3, r3, #2
 8000948:	430a      	orrs	r2, r1
 800094a:	3306      	adds	r3, #6
 800094c:	009b      	lsls	r3, r3, #2
 800094e:	18c3      	adds	r3, r0, r3
 8000950:	3304      	adds	r3, #4
 8000952:	601a      	str	r2, [r3, #0]
}
 8000954:	46c0      	nop			; (mov r8, r8)
 8000956:	46bd      	mov	sp, r7
 8000958:	b003      	add	sp, #12
 800095a:	bd90      	pop	{r4, r7, pc}
 800095c:	e000e100 	.word	0xe000e100
 8000960:	e000ed00 	.word	0xe000ed00

08000964 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	1e5a      	subs	r2, r3, #1
 8000970:	2380      	movs	r3, #128	; 0x80
 8000972:	045b      	lsls	r3, r3, #17
 8000974:	429a      	cmp	r2, r3
 8000976:	d301      	bcc.n	800097c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000978:	2301      	movs	r3, #1
 800097a:	e010      	b.n	800099e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800097c:	4b0a      	ldr	r3, [pc, #40]	; (80009a8 <SysTick_Config+0x44>)
 800097e:	687a      	ldr	r2, [r7, #4]
 8000980:	3a01      	subs	r2, #1
 8000982:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000984:	2301      	movs	r3, #1
 8000986:	425b      	negs	r3, r3
 8000988:	2103      	movs	r1, #3
 800098a:	0018      	movs	r0, r3
 800098c:	f7ff ff7c 	bl	8000888 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000990:	4b05      	ldr	r3, [pc, #20]	; (80009a8 <SysTick_Config+0x44>)
 8000992:	2200      	movs	r2, #0
 8000994:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000996:	4b04      	ldr	r3, [pc, #16]	; (80009a8 <SysTick_Config+0x44>)
 8000998:	2207      	movs	r2, #7
 800099a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800099c:	2300      	movs	r3, #0
}
 800099e:	0018      	movs	r0, r3
 80009a0:	46bd      	mov	sp, r7
 80009a2:	b002      	add	sp, #8
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	46c0      	nop			; (mov r8, r8)
 80009a8:	e000e010 	.word	0xe000e010

080009ac <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	60b9      	str	r1, [r7, #8]
 80009b4:	607a      	str	r2, [r7, #4]
 80009b6:	210f      	movs	r1, #15
 80009b8:	187b      	adds	r3, r7, r1
 80009ba:	1c02      	adds	r2, r0, #0
 80009bc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80009be:	68ba      	ldr	r2, [r7, #8]
 80009c0:	187b      	adds	r3, r7, r1
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	b25b      	sxtb	r3, r3
 80009c6:	0011      	movs	r1, r2
 80009c8:	0018      	movs	r0, r3
 80009ca:	f7ff ff5d 	bl	8000888 <__NVIC_SetPriority>
}
 80009ce:	46c0      	nop			; (mov r8, r8)
 80009d0:	46bd      	mov	sp, r7
 80009d2:	b004      	add	sp, #16
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009d6:	b580      	push	{r7, lr}
 80009d8:	b082      	sub	sp, #8
 80009da:	af00      	add	r7, sp, #0
 80009dc:	0002      	movs	r2, r0
 80009de:	1dfb      	adds	r3, r7, #7
 80009e0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009e2:	1dfb      	adds	r3, r7, #7
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	b25b      	sxtb	r3, r3
 80009e8:	0018      	movs	r0, r3
 80009ea:	f7ff ff33 	bl	8000854 <__NVIC_EnableIRQ>
}
 80009ee:	46c0      	nop			; (mov r8, r8)
 80009f0:	46bd      	mov	sp, r7
 80009f2:	b002      	add	sp, #8
 80009f4:	bd80      	pop	{r7, pc}

080009f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009f6:	b580      	push	{r7, lr}
 80009f8:	b082      	sub	sp, #8
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	0018      	movs	r0, r3
 8000a02:	f7ff ffaf 	bl	8000964 <SysTick_Config>
 8000a06:	0003      	movs	r3, r0
}
 8000a08:	0018      	movs	r0, r3
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	b002      	add	sp, #8
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d101      	bne.n	8000a22 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	e015      	b.n	8000a4e <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if (hdac->State == HAL_DAC_STATE_RESET)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	791b      	ldrb	r3, [r3, #4]
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d106      	bne.n	8000a3a <HAL_DAC_Init+0x2a>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	2200      	movs	r2, #0
 8000a30:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	0018      	movs	r0, r3
 8000a36:	f7ff fdc7 	bl	80005c8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	2202      	movs	r2, #2
 8000a3e:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	2200      	movs	r2, #0
 8000a44:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	2201      	movs	r2, #1
 8000a4a:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8000a4c:	2300      	movs	r3, #0
}
 8000a4e:	0018      	movs	r0, r3
 8000a50:	46bd      	mov	sp, r7
 8000a52:	b002      	add	sp, #8
 8000a54:	bd80      	pop	{r7, pc}

08000a56 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b082      	sub	sp, #8
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8000a5e:	46c0      	nop			; (mov r8, r8)
 8000a60:	46bd      	mov	sp, r7
 8000a62:	b002      	add	sp, #8
 8000a64:	bd80      	pop	{r7, pc}

08000a66 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8000a66:	b580      	push	{r7, lr}
 8000a68:	b082      	sub	sp, #8
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8000a6e:	46c0      	nop			; (mov r8, r8)
 8000a70:	46bd      	mov	sp, r7
 8000a72:	b002      	add	sp, #8
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000a76:	b580      	push	{r7, lr}
 8000a78:	b082      	sub	sp, #8
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8000a7e:	46c0      	nop			; (mov r8, r8)
 8000a80:	46bd      	mov	sp, r7
 8000a82:	b002      	add	sp, #8
 8000a84:	bd80      	pop	{r7, pc}
	...

08000a88 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b086      	sub	sp, #24
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	60f8      	str	r0, [r7, #12]
 8000a90:	60b9      	str	r1, [r7, #8]
 8000a92:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8000a94:	2300      	movs	r3, #0
 8000a96:	617b      	str	r3, [r7, #20]
 8000a98:	2300      	movs	r3, #0
 8000a9a:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	795b      	ldrb	r3, [r3, #5]
 8000aa0:	2b01      	cmp	r3, #1
 8000aa2:	d101      	bne.n	8000aa8 <HAL_DAC_ConfigChannel+0x20>
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	e029      	b.n	8000afc <HAL_DAC_ConfigChannel+0x74>
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	2201      	movs	r2, #1
 8000aac:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	2202      	movs	r2, #2
 8000ab2:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel); 
 8000abc:	4a11      	ldr	r2, [pc, #68]	; (8000b04 <HAL_DAC_ConfigChannel+0x7c>)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	409a      	lsls	r2, r3
 8000ac2:	0013      	movs	r3, r2
 8000ac4:	43da      	mvns	r2, r3
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	4013      	ands	r3, r2
 8000aca:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	4313      	orrs	r3, r2
 8000ad6:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8000ad8:	693a      	ldr	r2, [r7, #16]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	409a      	lsls	r2, r3
 8000ade:	0013      	movs	r3, r2
 8000ae0:	697a      	ldr	r2, [r7, #20]
 8000ae2:	4313      	orrs	r3, r2
 8000ae4:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	697a      	ldr	r2, [r7, #20]
 8000aec:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	2201      	movs	r2, #1
 8000af2:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	2200      	movs	r2, #0
 8000af8:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8000afa:	2300      	movs	r3, #0
}
 8000afc:	0018      	movs	r0, r3
 8000afe:	46bd      	mov	sp, r7
 8000b00:	b006      	add	sp, #24
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	00000ffe 	.word	0x00000ffe

08000b08 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b086      	sub	sp, #24
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	60f8      	str	r0, [r7, #12]
 8000b10:	60b9      	str	r1, [r7, #8]
 8000b12:	607a      	str	r2, [r7, #4]
 8000b14:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 8000b16:	2300      	movs	r3, #0
 8000b18:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	795b      	ldrb	r3, [r3, #5]
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d101      	bne.n	8000b26 <HAL_DAC_Start_DMA+0x1e>
 8000b22:	2302      	movs	r3, #2
 8000b24:	e09f      	b.n	8000c66 <HAL_DAC_Start_DMA+0x15e>
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	2201      	movs	r2, #1
 8000b2a:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	2202      	movs	r2, #2
 8000b30:	711a      	strb	r2, [r3, #4]
  
  if(Channel == DAC_CHANNEL_1)
 8000b32:	68bb      	ldr	r3, [r7, #8]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d130      	bne.n	8000b9a <HAL_DAC_Start_DMA+0x92>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	689b      	ldr	r3, [r3, #8]
 8000b3c:	4a4c      	ldr	r2, [pc, #304]	; (8000c70 <HAL_DAC_Start_DMA+0x168>)
 8000b3e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	689b      	ldr	r3, [r3, #8]
 8000b44:	4a4b      	ldr	r2, [pc, #300]	; (8000c74 <HAL_DAC_Start_DMA+0x16c>)
 8000b46:	62da      	str	r2, [r3, #44]	; 0x2c
       
    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	689b      	ldr	r3, [r3, #8]
 8000b4c:	4a4a      	ldr	r2, [pc, #296]	; (8000c78 <HAL_DAC_Start_DMA+0x170>)
 8000b4e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	2180      	movs	r1, #128	; 0x80
 8000b5c:	0149      	lsls	r1, r1, #5
 8000b5e:	430a      	orrs	r2, r1
 8000b60:	601a      	str	r2, [r3, #0]
    
    /* Case of use of channel 1 */
    switch(Alignment)
 8000b62:	6a3b      	ldr	r3, [r7, #32]
 8000b64:	2b08      	cmp	r3, #8
 8000b66:	d013      	beq.n	8000b90 <HAL_DAC_Start_DMA+0x88>
 8000b68:	6a3b      	ldr	r3, [r7, #32]
 8000b6a:	2b08      	cmp	r3, #8
 8000b6c:	d846      	bhi.n	8000bfc <HAL_DAC_Start_DMA+0xf4>
 8000b6e:	6a3b      	ldr	r3, [r7, #32]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d003      	beq.n	8000b7c <HAL_DAC_Start_DMA+0x74>
 8000b74:	6a3b      	ldr	r3, [r7, #32]
 8000b76:	2b04      	cmp	r3, #4
 8000b78:	d005      	beq.n	8000b86 <HAL_DAC_Start_DMA+0x7e>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8000b7a:	e03f      	b.n	8000bfc <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	3308      	adds	r3, #8
 8000b82:	617b      	str	r3, [r7, #20]
        break;
 8000b84:	e03d      	b.n	8000c02 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	330c      	adds	r3, #12
 8000b8c:	617b      	str	r3, [r7, #20]
        break;
 8000b8e:	e038      	b.n	8000c02 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	3310      	adds	r3, #16
 8000b96:	617b      	str	r3, [r7, #20]
        break;
 8000b98:	e033      	b.n	8000c02 <HAL_DAC_Start_DMA+0xfa>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	68db      	ldr	r3, [r3, #12]
 8000b9e:	4a37      	ldr	r2, [pc, #220]	; (8000c7c <HAL_DAC_Start_DMA+0x174>)
 8000ba0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	68db      	ldr	r3, [r3, #12]
 8000ba6:	4a36      	ldr	r2, [pc, #216]	; (8000c80 <HAL_DAC_Start_DMA+0x178>)
 8000ba8:	62da      	str	r2, [r3, #44]	; 0x2c
       
    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	68db      	ldr	r3, [r3, #12]
 8000bae:	4a35      	ldr	r2, [pc, #212]	; (8000c84 <HAL_DAC_Start_DMA+0x17c>)
 8000bb0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	2180      	movs	r1, #128	; 0x80
 8000bbe:	0549      	lsls	r1, r1, #21
 8000bc0:	430a      	orrs	r2, r1
 8000bc2:	601a      	str	r2, [r3, #0]
    
    /* Case of use of channel 2 */
    switch(Alignment)
 8000bc4:	6a3b      	ldr	r3, [r7, #32]
 8000bc6:	2b08      	cmp	r3, #8
 8000bc8:	d013      	beq.n	8000bf2 <HAL_DAC_Start_DMA+0xea>
 8000bca:	6a3b      	ldr	r3, [r7, #32]
 8000bcc:	2b08      	cmp	r3, #8
 8000bce:	d817      	bhi.n	8000c00 <HAL_DAC_Start_DMA+0xf8>
 8000bd0:	6a3b      	ldr	r3, [r7, #32]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d003      	beq.n	8000bde <HAL_DAC_Start_DMA+0xd6>
 8000bd6:	6a3b      	ldr	r3, [r7, #32]
 8000bd8:	2b04      	cmp	r3, #4
 8000bda:	d005      	beq.n	8000be8 <HAL_DAC_Start_DMA+0xe0>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8000bdc:	e010      	b.n	8000c00 <HAL_DAC_Start_DMA+0xf8>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	3314      	adds	r3, #20
 8000be4:	617b      	str	r3, [r7, #20]
        break;
 8000be6:	e00c      	b.n	8000c02 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	3318      	adds	r3, #24
 8000bee:	617b      	str	r3, [r7, #20]
        break;
 8000bf0:	e007      	b.n	8000c02 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	331c      	adds	r3, #28
 8000bf8:	617b      	str	r3, [r7, #20]
        break;
 8000bfa:	e002      	b.n	8000c02 <HAL_DAC_Start_DMA+0xfa>
        break;
 8000bfc:	46c0      	nop			; (mov r8, r8)
 8000bfe:	e000      	b.n	8000c02 <HAL_DAC_Start_DMA+0xfa>
        break;
 8000c00:	46c0      	nop			; (mov r8, r8)
    }
  }
  
  /* Enable the DMA channel */
  if(Channel == DAC_CHANNEL_1)
 8000c02:	68bb      	ldr	r3, [r7, #8]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d110      	bne.n	8000c2a <HAL_DAC_Start_DMA+0x122>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	2180      	movs	r1, #128	; 0x80
 8000c14:	0189      	lsls	r1, r1, #6
 8000c16:	430a      	orrs	r2, r1
 8000c18:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA channel */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	6898      	ldr	r0, [r3, #8]
 8000c1e:	6879      	ldr	r1, [r7, #4]
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	697a      	ldr	r2, [r7, #20]
 8000c24:	f000 f902 	bl	8000e2c <HAL_DMA_Start_IT>
 8000c28:	e00f      	b.n	8000c4a <HAL_DAC_Start_DMA+0x142>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	2180      	movs	r1, #128	; 0x80
 8000c36:	0589      	lsls	r1, r1, #22
 8000c38:	430a      	orrs	r2, r1
 8000c3a:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA channel */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	68d8      	ldr	r0, [r3, #12]
 8000c40:	6879      	ldr	r1, [r7, #4]
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	697a      	ldr	r2, [r7, #20]
 8000c46:	f000 f8f1 	bl	8000e2c <HAL_DMA_Start_IT>
  }
  
  /* Enable the Peripharal */
  __HAL_DAC_ENABLE(hdac, Channel);
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	6819      	ldr	r1, [r3, #0]
 8000c50:	2201      	movs	r2, #1
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	409a      	lsls	r2, r3
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	430a      	orrs	r2, r1
 8000c5c:	601a      	str	r2, [r3, #0]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	2200      	movs	r2, #0
 8000c62:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8000c64:	2300      	movs	r3, #0
}
 8000c66:	0018      	movs	r0, r3
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	b006      	add	sp, #24
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	46c0      	nop			; (mov r8, r8)
 8000c70:	08000c89 	.word	0x08000c89
 8000c74:	08000cad 	.word	0x08000cad
 8000c78:	08000ccb 	.word	0x08000ccb
 8000c7c:	08000cfb 	.word	0x08000cfb
 8000c80:	08000d1f 	.word	0x08000d1f
 8000c84:	08000d3d 	.word	0x08000d3d

08000c88 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c94:	60fb      	str	r3, [r7, #12]
  
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	0018      	movs	r0, r3
 8000c9a:	f7ff fedc 	bl	8000a56 <HAL_DAC_ConvCpltCallbackCh1>
  
  hdac->State= HAL_DAC_STATE_READY;
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	711a      	strb	r2, [r3, #4]
}
 8000ca4:	46c0      	nop			; (mov r8, r8)
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	b004      	add	sp, #16
 8000caa:	bd80      	pop	{r7, pc}

08000cac <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cb8:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	0018      	movs	r0, r3
 8000cbe:	f7ff fed2 	bl	8000a66 <HAL_DAC_ConvHalfCpltCallbackCh1>
}
 8000cc2:	46c0      	nop			; (mov r8, r8)
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	b004      	add	sp, #16
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b084      	sub	sp, #16
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cd6:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	691b      	ldr	r3, [r3, #16]
 8000cdc:	2204      	movs	r2, #4
 8000cde:	431a      	orrs	r2, r3
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	611a      	str	r2, [r3, #16]
    
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	0018      	movs	r0, r3
 8000ce8:	f7ff fec5 	bl	8000a76 <HAL_DAC_ErrorCallbackCh1>
    
  hdac->State= HAL_DAC_STATE_READY;
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	2201      	movs	r2, #1
 8000cf0:	711a      	strb	r2, [r3, #4]
}
 8000cf2:	46c0      	nop			; (mov r8, r8)
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	b004      	add	sp, #16
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	b084      	sub	sp, #16
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d06:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	f000 f82e 	bl	8000d6c <HAL_DACEx_ConvCpltCallbackCh2>
#endif
  
  hdac->State= HAL_DAC_STATE_READY;
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	2201      	movs	r2, #1
 8000d14:	711a      	strb	r2, [r3, #4]
}
 8000d16:	46c0      	nop			; (mov r8, r8)
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	b004      	add	sp, #16
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b084      	sub	sp, #16
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d2a:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	0018      	movs	r0, r3
 8000d30:	f000 f824 	bl	8000d7c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif
}
 8000d34:	46c0      	nop			; (mov r8, r8)
 8000d36:	46bd      	mov	sp, r7
 8000d38:	b004      	add	sp, #16
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d48:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	691b      	ldr	r3, [r3, #16]
 8000d4e:	2204      	movs	r2, #4
 8000d50:	431a      	orrs	r2, r3
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else 
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	0018      	movs	r0, r3
 8000d5a:	f000 f817 	bl	8000d8c <HAL_DACEx_ErrorCallbackCh2>
#endif 
  hdac->State= HAL_DAC_STATE_READY;
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	2201      	movs	r2, #1
 8000d62:	711a      	strb	r2, [r3, #4]
}
 8000d64:	46c0      	nop			; (mov r8, r8)
 8000d66:	46bd      	mov	sp, r7
 8000d68:	b004      	add	sp, #16
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 8000d74:	46c0      	nop			; (mov r8, r8)
 8000d76:	46bd      	mov	sp, r7
 8000d78:	b002      	add	sp, #8
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8000d84:	46c0      	nop			; (mov r8, r8)
 8000d86:	46bd      	mov	sp, r7
 8000d88:	b002      	add	sp, #8
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 8000d94:	46c0      	nop			; (mov r8, r8)
 8000d96:	46bd      	mov	sp, r7
 8000d98:	b002      	add	sp, #8
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000da4:	2300      	movs	r3, #0
 8000da6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d101      	bne.n	8000db2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
 8000db0:	e036      	b.n	8000e20 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2221      	movs	r2, #33	; 0x21
 8000db6:	2102      	movs	r1, #2
 8000db8:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	4a18      	ldr	r2, [pc, #96]	; (8000e28 <HAL_DMA_Init+0x8c>)
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000dd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dde:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	695b      	ldr	r3, [r3, #20]
 8000de4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	69db      	ldr	r3, [r3, #28]
 8000df0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000df2:	68fa      	ldr	r2, [r7, #12]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	68fa      	ldr	r2, [r7, #12]
 8000dfe:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	0018      	movs	r0, r3
 8000e04:	f000 f946 	bl	8001094 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2221      	movs	r2, #33	; 0x21
 8000e12:	2101      	movs	r1, #1
 8000e14:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2220      	movs	r2, #32
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000e1e:	2300      	movs	r3, #0
}
 8000e20:	0018      	movs	r0, r3
 8000e22:	46bd      	mov	sp, r7
 8000e24:	b004      	add	sp, #16
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	ffffc00f 	.word	0xffffc00f

08000e2c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b086      	sub	sp, #24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	60f8      	str	r0, [r7, #12]
 8000e34:	60b9      	str	r1, [r7, #8]
 8000e36:	607a      	str	r2, [r7, #4]
 8000e38:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000e3a:	2317      	movs	r3, #23
 8000e3c:	18fb      	adds	r3, r7, r3
 8000e3e:	2200      	movs	r2, #0
 8000e40:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	2220      	movs	r2, #32
 8000e46:	5c9b      	ldrb	r3, [r3, r2]
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d101      	bne.n	8000e50 <HAL_DMA_Start_IT+0x24>
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	e04f      	b.n	8000ef0 <HAL_DMA_Start_IT+0xc4>
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	2220      	movs	r2, #32
 8000e54:	2101      	movs	r1, #1
 8000e56:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	2221      	movs	r2, #33	; 0x21
 8000e5c:	5c9b      	ldrb	r3, [r3, r2]
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	d13a      	bne.n	8000eda <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	2221      	movs	r2, #33	; 0x21
 8000e68:	2102      	movs	r1, #2
 8000e6a:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	2200      	movs	r2, #0
 8000e70:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	2101      	movs	r1, #1
 8000e7e:	438a      	bics	r2, r1
 8000e80:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	687a      	ldr	r2, [r7, #4]
 8000e86:	68b9      	ldr	r1, [r7, #8]
 8000e88:	68f8      	ldr	r0, [r7, #12]
 8000e8a:	f000 f8d7 	bl	800103c <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d008      	beq.n	8000ea8 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	210e      	movs	r1, #14
 8000ea2:	430a      	orrs	r2, r1
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	e00f      	b.n	8000ec8 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	210a      	movs	r1, #10
 8000eb4:	430a      	orrs	r2, r1
 8000eb6:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	2104      	movs	r1, #4
 8000ec4:	438a      	bics	r2, r1
 8000ec6:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	2101      	movs	r1, #1
 8000ed4:	430a      	orrs	r2, r1
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	e007      	b.n	8000eea <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	2220      	movs	r2, #32
 8000ede:	2100      	movs	r1, #0
 8000ee0:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000ee2:	2317      	movs	r3, #23
 8000ee4:	18fb      	adds	r3, r7, r3
 8000ee6:	2202      	movs	r2, #2
 8000ee8:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8000eea:	2317      	movs	r3, #23
 8000eec:	18fb      	adds	r3, r7, r3
 8000eee:	781b      	ldrb	r3, [r3, #0]
}
 8000ef0:	0018      	movs	r0, r3
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	b006      	add	sp, #24
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f14:	2204      	movs	r2, #4
 8000f16:	409a      	lsls	r2, r3
 8000f18:	0013      	movs	r3, r2
 8000f1a:	68fa      	ldr	r2, [r7, #12]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	d024      	beq.n	8000f6a <HAL_DMA_IRQHandler+0x72>
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	2204      	movs	r2, #4
 8000f24:	4013      	ands	r3, r2
 8000f26:	d020      	beq.n	8000f6a <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	2220      	movs	r2, #32
 8000f30:	4013      	ands	r3, r2
 8000f32:	d107      	bne.n	8000f44 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	2104      	movs	r1, #4
 8000f40:	438a      	bics	r2, r1
 8000f42:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f4c:	2104      	movs	r1, #4
 8000f4e:	4091      	lsls	r1, r2
 8000f50:	000a      	movs	r2, r1
 8000f52:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d100      	bne.n	8000f5e <HAL_DMA_IRQHandler+0x66>
 8000f5c:	e06a      	b.n	8001034 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f62:	687a      	ldr	r2, [r7, #4]
 8000f64:	0010      	movs	r0, r2
 8000f66:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8000f68:	e064      	b.n	8001034 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6e:	2202      	movs	r2, #2
 8000f70:	409a      	lsls	r2, r3
 8000f72:	0013      	movs	r3, r2
 8000f74:	68fa      	ldr	r2, [r7, #12]
 8000f76:	4013      	ands	r3, r2
 8000f78:	d02b      	beq.n	8000fd2 <HAL_DMA_IRQHandler+0xda>
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	2202      	movs	r2, #2
 8000f7e:	4013      	ands	r3, r2
 8000f80:	d027      	beq.n	8000fd2 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2220      	movs	r2, #32
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	d10b      	bne.n	8000fa6 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	210a      	movs	r1, #10
 8000f9a:	438a      	bics	r2, r1
 8000f9c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2221      	movs	r2, #33	; 0x21
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fae:	2102      	movs	r1, #2
 8000fb0:	4091      	lsls	r1, r2
 8000fb2:	000a      	movs	r2, r1
 8000fb4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2220      	movs	r2, #32
 8000fba:	2100      	movs	r1, #0
 8000fbc:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d036      	beq.n	8001034 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	0010      	movs	r0, r2
 8000fce:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8000fd0:	e030      	b.n	8001034 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd6:	2208      	movs	r2, #8
 8000fd8:	409a      	lsls	r2, r3
 8000fda:	0013      	movs	r3, r2
 8000fdc:	68fa      	ldr	r2, [r7, #12]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	d028      	beq.n	8001034 <HAL_DMA_IRQHandler+0x13c>
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	2208      	movs	r2, #8
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	d024      	beq.n	8001034 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	210e      	movs	r1, #14
 8000ff6:	438a      	bics	r2, r1
 8000ff8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001002:	2101      	movs	r1, #1
 8001004:	4091      	lsls	r1, r2
 8001006:	000a      	movs	r2, r1
 8001008:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2201      	movs	r2, #1
 800100e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2221      	movs	r2, #33	; 0x21
 8001014:	2101      	movs	r1, #1
 8001016:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2220      	movs	r2, #32
 800101c:	2100      	movs	r1, #0
 800101e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001024:	2b00      	cmp	r3, #0
 8001026:	d005      	beq.n	8001034 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102c:	687a      	ldr	r2, [r7, #4]
 800102e:	0010      	movs	r0, r2
 8001030:	4798      	blx	r3
    }
  }
}
 8001032:	e7ff      	b.n	8001034 <HAL_DMA_IRQHandler+0x13c>
 8001034:	46c0      	nop			; (mov r8, r8)
 8001036:	46bd      	mov	sp, r7
 8001038:	b004      	add	sp, #16
 800103a:	bd80      	pop	{r7, pc}

0800103c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	607a      	str	r2, [r7, #4]
 8001048:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001052:	2101      	movs	r1, #1
 8001054:	4091      	lsls	r1, r2
 8001056:	000a      	movs	r2, r1
 8001058:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	683a      	ldr	r2, [r7, #0]
 8001060:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	2b10      	cmp	r3, #16
 8001068:	d108      	bne.n	800107c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	68ba      	ldr	r2, [r7, #8]
 8001078:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800107a:	e007      	b.n	800108c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	68ba      	ldr	r2, [r7, #8]
 8001082:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	60da      	str	r2, [r3, #12]
}
 800108c:	46c0      	nop			; (mov r8, r8)
 800108e:	46bd      	mov	sp, r7
 8001090:	b004      	add	sp, #16
 8001092:	bd80      	pop	{r7, pc}

08001094 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a08      	ldr	r2, [pc, #32]	; (80010c4 <DMA_CalcBaseAndBitshift+0x30>)
 80010a2:	4694      	mov	ip, r2
 80010a4:	4463      	add	r3, ip
 80010a6:	2114      	movs	r1, #20
 80010a8:	0018      	movs	r0, r3
 80010aa:	f7ff f82d 	bl	8000108 <__udivsi3>
 80010ae:	0003      	movs	r3, r0
 80010b0:	009a      	lsls	r2, r3, #2
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a03      	ldr	r2, [pc, #12]	; (80010c8 <DMA_CalcBaseAndBitshift+0x34>)
 80010ba:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80010bc:	46c0      	nop			; (mov r8, r8)
 80010be:	46bd      	mov	sp, r7
 80010c0:	b002      	add	sp, #8
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	bffdfff8 	.word	0xbffdfff8
 80010c8:	40020000 	.word	0x40020000

080010cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010d6:	2300      	movs	r3, #0
 80010d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010da:	e155      	b.n	8001388 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2101      	movs	r1, #1
 80010e2:	697a      	ldr	r2, [r7, #20]
 80010e4:	4091      	lsls	r1, r2
 80010e6:	000a      	movs	r2, r1
 80010e8:	4013      	ands	r3, r2
 80010ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d100      	bne.n	80010f4 <HAL_GPIO_Init+0x28>
 80010f2:	e146      	b.n	8001382 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	2203      	movs	r2, #3
 80010fa:	4013      	ands	r3, r2
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d005      	beq.n	800110c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	2203      	movs	r2, #3
 8001106:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001108:	2b02      	cmp	r3, #2
 800110a:	d130      	bne.n	800116e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	2203      	movs	r2, #3
 8001118:	409a      	lsls	r2, r3
 800111a:	0013      	movs	r3, r2
 800111c:	43da      	mvns	r2, r3
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	4013      	ands	r3, r2
 8001122:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	68da      	ldr	r2, [r3, #12]
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	409a      	lsls	r2, r3
 800112e:	0013      	movs	r3, r2
 8001130:	693a      	ldr	r2, [r7, #16]
 8001132:	4313      	orrs	r3, r2
 8001134:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	693a      	ldr	r2, [r7, #16]
 800113a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001142:	2201      	movs	r2, #1
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	409a      	lsls	r2, r3
 8001148:	0013      	movs	r3, r2
 800114a:	43da      	mvns	r2, r3
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	4013      	ands	r3, r2
 8001150:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	091b      	lsrs	r3, r3, #4
 8001158:	2201      	movs	r2, #1
 800115a:	401a      	ands	r2, r3
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	409a      	lsls	r2, r3
 8001160:	0013      	movs	r3, r2
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	4313      	orrs	r3, r2
 8001166:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	2203      	movs	r2, #3
 8001174:	4013      	ands	r3, r2
 8001176:	2b03      	cmp	r3, #3
 8001178:	d017      	beq.n	80011aa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	68db      	ldr	r3, [r3, #12]
 800117e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	2203      	movs	r2, #3
 8001186:	409a      	lsls	r2, r3
 8001188:	0013      	movs	r3, r2
 800118a:	43da      	mvns	r2, r3
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	4013      	ands	r3, r2
 8001190:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	689a      	ldr	r2, [r3, #8]
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	409a      	lsls	r2, r3
 800119c:	0013      	movs	r3, r2
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	2203      	movs	r2, #3
 80011b0:	4013      	ands	r3, r2
 80011b2:	2b02      	cmp	r3, #2
 80011b4:	d123      	bne.n	80011fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	08da      	lsrs	r2, r3, #3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	3208      	adds	r2, #8
 80011be:	0092      	lsls	r2, r2, #2
 80011c0:	58d3      	ldr	r3, [r2, r3]
 80011c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	2207      	movs	r2, #7
 80011c8:	4013      	ands	r3, r2
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	220f      	movs	r2, #15
 80011ce:	409a      	lsls	r2, r3
 80011d0:	0013      	movs	r3, r2
 80011d2:	43da      	mvns	r2, r3
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	4013      	ands	r3, r2
 80011d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	691a      	ldr	r2, [r3, #16]
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	2107      	movs	r1, #7
 80011e2:	400b      	ands	r3, r1
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	409a      	lsls	r2, r3
 80011e8:	0013      	movs	r3, r2
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	08da      	lsrs	r2, r3, #3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3208      	adds	r2, #8
 80011f8:	0092      	lsls	r2, r2, #2
 80011fa:	6939      	ldr	r1, [r7, #16]
 80011fc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	2203      	movs	r2, #3
 800120a:	409a      	lsls	r2, r3
 800120c:	0013      	movs	r3, r2
 800120e:	43da      	mvns	r2, r3
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	4013      	ands	r3, r2
 8001214:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	2203      	movs	r2, #3
 800121c:	401a      	ands	r2, r3
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	409a      	lsls	r2, r3
 8001224:	0013      	movs	r3, r2
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	4313      	orrs	r3, r2
 800122a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685a      	ldr	r2, [r3, #4]
 8001236:	23c0      	movs	r3, #192	; 0xc0
 8001238:	029b      	lsls	r3, r3, #10
 800123a:	4013      	ands	r3, r2
 800123c:	d100      	bne.n	8001240 <HAL_GPIO_Init+0x174>
 800123e:	e0a0      	b.n	8001382 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001240:	4b57      	ldr	r3, [pc, #348]	; (80013a0 <HAL_GPIO_Init+0x2d4>)
 8001242:	699a      	ldr	r2, [r3, #24]
 8001244:	4b56      	ldr	r3, [pc, #344]	; (80013a0 <HAL_GPIO_Init+0x2d4>)
 8001246:	2101      	movs	r1, #1
 8001248:	430a      	orrs	r2, r1
 800124a:	619a      	str	r2, [r3, #24]
 800124c:	4b54      	ldr	r3, [pc, #336]	; (80013a0 <HAL_GPIO_Init+0x2d4>)
 800124e:	699b      	ldr	r3, [r3, #24]
 8001250:	2201      	movs	r2, #1
 8001252:	4013      	ands	r3, r2
 8001254:	60bb      	str	r3, [r7, #8]
 8001256:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001258:	4a52      	ldr	r2, [pc, #328]	; (80013a4 <HAL_GPIO_Init+0x2d8>)
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	089b      	lsrs	r3, r3, #2
 800125e:	3302      	adds	r3, #2
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	589b      	ldr	r3, [r3, r2]
 8001264:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	2203      	movs	r2, #3
 800126a:	4013      	ands	r3, r2
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	220f      	movs	r2, #15
 8001270:	409a      	lsls	r2, r3
 8001272:	0013      	movs	r3, r2
 8001274:	43da      	mvns	r2, r3
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	4013      	ands	r3, r2
 800127a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800127c:	687a      	ldr	r2, [r7, #4]
 800127e:	2390      	movs	r3, #144	; 0x90
 8001280:	05db      	lsls	r3, r3, #23
 8001282:	429a      	cmp	r2, r3
 8001284:	d019      	beq.n	80012ba <HAL_GPIO_Init+0x1ee>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a47      	ldr	r2, [pc, #284]	; (80013a8 <HAL_GPIO_Init+0x2dc>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d013      	beq.n	80012b6 <HAL_GPIO_Init+0x1ea>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a46      	ldr	r2, [pc, #280]	; (80013ac <HAL_GPIO_Init+0x2e0>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d00d      	beq.n	80012b2 <HAL_GPIO_Init+0x1e6>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a45      	ldr	r2, [pc, #276]	; (80013b0 <HAL_GPIO_Init+0x2e4>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d007      	beq.n	80012ae <HAL_GPIO_Init+0x1e2>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a44      	ldr	r2, [pc, #272]	; (80013b4 <HAL_GPIO_Init+0x2e8>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d101      	bne.n	80012aa <HAL_GPIO_Init+0x1de>
 80012a6:	2304      	movs	r3, #4
 80012a8:	e008      	b.n	80012bc <HAL_GPIO_Init+0x1f0>
 80012aa:	2305      	movs	r3, #5
 80012ac:	e006      	b.n	80012bc <HAL_GPIO_Init+0x1f0>
 80012ae:	2303      	movs	r3, #3
 80012b0:	e004      	b.n	80012bc <HAL_GPIO_Init+0x1f0>
 80012b2:	2302      	movs	r3, #2
 80012b4:	e002      	b.n	80012bc <HAL_GPIO_Init+0x1f0>
 80012b6:	2301      	movs	r3, #1
 80012b8:	e000      	b.n	80012bc <HAL_GPIO_Init+0x1f0>
 80012ba:	2300      	movs	r3, #0
 80012bc:	697a      	ldr	r2, [r7, #20]
 80012be:	2103      	movs	r1, #3
 80012c0:	400a      	ands	r2, r1
 80012c2:	0092      	lsls	r2, r2, #2
 80012c4:	4093      	lsls	r3, r2
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012cc:	4935      	ldr	r1, [pc, #212]	; (80013a4 <HAL_GPIO_Init+0x2d8>)
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	089b      	lsrs	r3, r3, #2
 80012d2:	3302      	adds	r3, #2
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012da:	4b37      	ldr	r3, [pc, #220]	; (80013b8 <HAL_GPIO_Init+0x2ec>)
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	43da      	mvns	r2, r3
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	4013      	ands	r3, r2
 80012e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685a      	ldr	r2, [r3, #4]
 80012ee:	2380      	movs	r3, #128	; 0x80
 80012f0:	035b      	lsls	r3, r3, #13
 80012f2:	4013      	ands	r3, r2
 80012f4:	d003      	beq.n	80012fe <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80012fe:	4b2e      	ldr	r3, [pc, #184]	; (80013b8 <HAL_GPIO_Init+0x2ec>)
 8001300:	693a      	ldr	r2, [r7, #16]
 8001302:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001304:	4b2c      	ldr	r3, [pc, #176]	; (80013b8 <HAL_GPIO_Init+0x2ec>)
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	43da      	mvns	r2, r3
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	4013      	ands	r3, r2
 8001312:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685a      	ldr	r2, [r3, #4]
 8001318:	2380      	movs	r3, #128	; 0x80
 800131a:	039b      	lsls	r3, r3, #14
 800131c:	4013      	ands	r3, r2
 800131e:	d003      	beq.n	8001328 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001320:	693a      	ldr	r2, [r7, #16]
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	4313      	orrs	r3, r2
 8001326:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001328:	4b23      	ldr	r3, [pc, #140]	; (80013b8 <HAL_GPIO_Init+0x2ec>)
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800132e:	4b22      	ldr	r3, [pc, #136]	; (80013b8 <HAL_GPIO_Init+0x2ec>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	43da      	mvns	r2, r3
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	4013      	ands	r3, r2
 800133c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685a      	ldr	r2, [r3, #4]
 8001342:	2380      	movs	r3, #128	; 0x80
 8001344:	029b      	lsls	r3, r3, #10
 8001346:	4013      	ands	r3, r2
 8001348:	d003      	beq.n	8001352 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	4313      	orrs	r3, r2
 8001350:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001352:	4b19      	ldr	r3, [pc, #100]	; (80013b8 <HAL_GPIO_Init+0x2ec>)
 8001354:	693a      	ldr	r2, [r7, #16]
 8001356:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001358:	4b17      	ldr	r3, [pc, #92]	; (80013b8 <HAL_GPIO_Init+0x2ec>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	43da      	mvns	r2, r3
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	4013      	ands	r3, r2
 8001366:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685a      	ldr	r2, [r3, #4]
 800136c:	2380      	movs	r3, #128	; 0x80
 800136e:	025b      	lsls	r3, r3, #9
 8001370:	4013      	ands	r3, r2
 8001372:	d003      	beq.n	800137c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	4313      	orrs	r3, r2
 800137a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800137c:	4b0e      	ldr	r3, [pc, #56]	; (80013b8 <HAL_GPIO_Init+0x2ec>)
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	3301      	adds	r3, #1
 8001386:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	40da      	lsrs	r2, r3
 8001390:	1e13      	subs	r3, r2, #0
 8001392:	d000      	beq.n	8001396 <HAL_GPIO_Init+0x2ca>
 8001394:	e6a2      	b.n	80010dc <HAL_GPIO_Init+0x10>
  } 
}
 8001396:	46c0      	nop			; (mov r8, r8)
 8001398:	46c0      	nop			; (mov r8, r8)
 800139a:	46bd      	mov	sp, r7
 800139c:	b006      	add	sp, #24
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	40021000 	.word	0x40021000
 80013a4:	40010000 	.word	0x40010000
 80013a8:	48000400 	.word	0x48000400
 80013ac:	48000800 	.word	0x48000800
 80013b0:	48000c00 	.word	0x48000c00
 80013b4:	48001000 	.word	0x48001000
 80013b8:	40010400 	.word	0x40010400

080013bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	000a      	movs	r2, r1
 80013c6:	1cbb      	adds	r3, r7, #2
 80013c8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	691b      	ldr	r3, [r3, #16]
 80013ce:	1cba      	adds	r2, r7, #2
 80013d0:	8812      	ldrh	r2, [r2, #0]
 80013d2:	4013      	ands	r3, r2
 80013d4:	d004      	beq.n	80013e0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80013d6:	230f      	movs	r3, #15
 80013d8:	18fb      	adds	r3, r7, r3
 80013da:	2201      	movs	r2, #1
 80013dc:	701a      	strb	r2, [r3, #0]
 80013de:	e003      	b.n	80013e8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013e0:	230f      	movs	r3, #15
 80013e2:	18fb      	adds	r3, r7, r3
 80013e4:	2200      	movs	r2, #0
 80013e6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80013e8:	230f      	movs	r3, #15
 80013ea:	18fb      	adds	r3, r7, r3
 80013ec:	781b      	ldrb	r3, [r3, #0]
  }
 80013ee:	0018      	movs	r0, r3
 80013f0:	46bd      	mov	sp, r7
 80013f2:	b004      	add	sp, #16
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b082      	sub	sp, #8
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
 80013fe:	0008      	movs	r0, r1
 8001400:	0011      	movs	r1, r2
 8001402:	1cbb      	adds	r3, r7, #2
 8001404:	1c02      	adds	r2, r0, #0
 8001406:	801a      	strh	r2, [r3, #0]
 8001408:	1c7b      	adds	r3, r7, #1
 800140a:	1c0a      	adds	r2, r1, #0
 800140c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800140e:	1c7b      	adds	r3, r7, #1
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d004      	beq.n	8001420 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001416:	1cbb      	adds	r3, r7, #2
 8001418:	881a      	ldrh	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800141e:	e003      	b.n	8001428 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001420:	1cbb      	adds	r3, r7, #2
 8001422:	881a      	ldrh	r2, [r3, #0]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001428:	46c0      	nop			; (mov r8, r8)
 800142a:	46bd      	mov	sp, r7
 800142c:	b002      	add	sp, #8
 800142e:	bd80      	pop	{r7, pc}

08001430 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b088      	sub	sp, #32
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d102      	bne.n	8001444 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	f000 fb76 	bl	8001b30 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2201      	movs	r2, #1
 800144a:	4013      	ands	r3, r2
 800144c:	d100      	bne.n	8001450 <HAL_RCC_OscConfig+0x20>
 800144e:	e08e      	b.n	800156e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001450:	4bc5      	ldr	r3, [pc, #788]	; (8001768 <HAL_RCC_OscConfig+0x338>)
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	220c      	movs	r2, #12
 8001456:	4013      	ands	r3, r2
 8001458:	2b04      	cmp	r3, #4
 800145a:	d00e      	beq.n	800147a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800145c:	4bc2      	ldr	r3, [pc, #776]	; (8001768 <HAL_RCC_OscConfig+0x338>)
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	220c      	movs	r2, #12
 8001462:	4013      	ands	r3, r2
 8001464:	2b08      	cmp	r3, #8
 8001466:	d117      	bne.n	8001498 <HAL_RCC_OscConfig+0x68>
 8001468:	4bbf      	ldr	r3, [pc, #764]	; (8001768 <HAL_RCC_OscConfig+0x338>)
 800146a:	685a      	ldr	r2, [r3, #4]
 800146c:	23c0      	movs	r3, #192	; 0xc0
 800146e:	025b      	lsls	r3, r3, #9
 8001470:	401a      	ands	r2, r3
 8001472:	2380      	movs	r3, #128	; 0x80
 8001474:	025b      	lsls	r3, r3, #9
 8001476:	429a      	cmp	r2, r3
 8001478:	d10e      	bne.n	8001498 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800147a:	4bbb      	ldr	r3, [pc, #748]	; (8001768 <HAL_RCC_OscConfig+0x338>)
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	2380      	movs	r3, #128	; 0x80
 8001480:	029b      	lsls	r3, r3, #10
 8001482:	4013      	ands	r3, r2
 8001484:	d100      	bne.n	8001488 <HAL_RCC_OscConfig+0x58>
 8001486:	e071      	b.n	800156c <HAL_RCC_OscConfig+0x13c>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d000      	beq.n	8001492 <HAL_RCC_OscConfig+0x62>
 8001490:	e06c      	b.n	800156c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	f000 fb4c 	bl	8001b30 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	2b01      	cmp	r3, #1
 800149e:	d107      	bne.n	80014b0 <HAL_RCC_OscConfig+0x80>
 80014a0:	4bb1      	ldr	r3, [pc, #708]	; (8001768 <HAL_RCC_OscConfig+0x338>)
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	4bb0      	ldr	r3, [pc, #704]	; (8001768 <HAL_RCC_OscConfig+0x338>)
 80014a6:	2180      	movs	r1, #128	; 0x80
 80014a8:	0249      	lsls	r1, r1, #9
 80014aa:	430a      	orrs	r2, r1
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	e02f      	b.n	8001510 <HAL_RCC_OscConfig+0xe0>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d10c      	bne.n	80014d2 <HAL_RCC_OscConfig+0xa2>
 80014b8:	4bab      	ldr	r3, [pc, #684]	; (8001768 <HAL_RCC_OscConfig+0x338>)
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	4baa      	ldr	r3, [pc, #680]	; (8001768 <HAL_RCC_OscConfig+0x338>)
 80014be:	49ab      	ldr	r1, [pc, #684]	; (800176c <HAL_RCC_OscConfig+0x33c>)
 80014c0:	400a      	ands	r2, r1
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	4ba8      	ldr	r3, [pc, #672]	; (8001768 <HAL_RCC_OscConfig+0x338>)
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	4ba7      	ldr	r3, [pc, #668]	; (8001768 <HAL_RCC_OscConfig+0x338>)
 80014ca:	49a9      	ldr	r1, [pc, #676]	; (8001770 <HAL_RCC_OscConfig+0x340>)
 80014cc:	400a      	ands	r2, r1
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	e01e      	b.n	8001510 <HAL_RCC_OscConfig+0xe0>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	2b05      	cmp	r3, #5
 80014d8:	d10e      	bne.n	80014f8 <HAL_RCC_OscConfig+0xc8>
 80014da:	4ba3      	ldr	r3, [pc, #652]	; (8001768 <HAL_RCC_OscConfig+0x338>)
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	4ba2      	ldr	r3, [pc, #648]	; (8001768 <HAL_RCC_OscConfig+0x338>)
 80014e0:	2180      	movs	r1, #128	; 0x80
 80014e2:	02c9      	lsls	r1, r1, #11
 80014e4:	430a      	orrs	r2, r1
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	4b9f      	ldr	r3, [pc, #636]	; (8001768 <HAL_RCC_OscConfig+0x338>)
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	4b9e      	ldr	r3, [pc, #632]	; (8001768 <HAL_RCC_OscConfig+0x338>)
 80014ee:	2180      	movs	r1, #128	; 0x80
 80014f0:	0249      	lsls	r1, r1, #9
 80014f2:	430a      	orrs	r2, r1
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	e00b      	b.n	8001510 <HAL_RCC_OscConfig+0xe0>
 80014f8:	4b9b      	ldr	r3, [pc, #620]	; (8001768 <HAL_RCC_OscConfig+0x338>)
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	4b9a      	ldr	r3, [pc, #616]	; (8001768 <HAL_RCC_OscConfig+0x338>)
 80014fe:	499b      	ldr	r1, [pc, #620]	; (800176c <HAL_RCC_OscConfig+0x33c>)
 8001500:	400a      	ands	r2, r1
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	4b98      	ldr	r3, [pc, #608]	; (8001768 <HAL_RCC_OscConfig+0x338>)
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	4b97      	ldr	r3, [pc, #604]	; (8001768 <HAL_RCC_OscConfig+0x338>)
 800150a:	4999      	ldr	r1, [pc, #612]	; (8001770 <HAL_RCC_OscConfig+0x340>)
 800150c:	400a      	ands	r2, r1
 800150e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d014      	beq.n	8001542 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001518:	f7ff f992 	bl	8000840 <HAL_GetTick>
 800151c:	0003      	movs	r3, r0
 800151e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001520:	e008      	b.n	8001534 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001522:	f7ff f98d 	bl	8000840 <HAL_GetTick>
 8001526:	0002      	movs	r2, r0
 8001528:	69bb      	ldr	r3, [r7, #24]
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	2b64      	cmp	r3, #100	; 0x64
 800152e:	d901      	bls.n	8001534 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001530:	2303      	movs	r3, #3
 8001532:	e2fd      	b.n	8001b30 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001534:	4b8c      	ldr	r3, [pc, #560]	; (8001768 <HAL_RCC_OscConfig+0x338>)
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	2380      	movs	r3, #128	; 0x80
 800153a:	029b      	lsls	r3, r3, #10
 800153c:	4013      	ands	r3, r2
 800153e:	d0f0      	beq.n	8001522 <HAL_RCC_OscConfig+0xf2>
 8001540:	e015      	b.n	800156e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001542:	f7ff f97d 	bl	8000840 <HAL_GetTick>
 8001546:	0003      	movs	r3, r0
 8001548:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800154a:	e008      	b.n	800155e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800154c:	f7ff f978 	bl	8000840 <HAL_GetTick>
 8001550:	0002      	movs	r2, r0
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b64      	cmp	r3, #100	; 0x64
 8001558:	d901      	bls.n	800155e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e2e8      	b.n	8001b30 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800155e:	4b82      	ldr	r3, [pc, #520]	; (8001768 <HAL_RCC_OscConfig+0x338>)
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	2380      	movs	r3, #128	; 0x80
 8001564:	029b      	lsls	r3, r3, #10
 8001566:	4013      	ands	r3, r2
 8001568:	d1f0      	bne.n	800154c <HAL_RCC_OscConfig+0x11c>
 800156a:	e000      	b.n	800156e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800156c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2202      	movs	r2, #2
 8001574:	4013      	ands	r3, r2
 8001576:	d100      	bne.n	800157a <HAL_RCC_OscConfig+0x14a>
 8001578:	e06c      	b.n	8001654 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800157a:	4b7b      	ldr	r3, [pc, #492]	; (8001768 <HAL_RCC_OscConfig+0x338>)
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	220c      	movs	r2, #12
 8001580:	4013      	ands	r3, r2
 8001582:	d00e      	beq.n	80015a2 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001584:	4b78      	ldr	r3, [pc, #480]	; (8001768 <HAL_RCC_OscConfig+0x338>)
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	220c      	movs	r2, #12
 800158a:	4013      	ands	r3, r2
 800158c:	2b08      	cmp	r3, #8
 800158e:	d11f      	bne.n	80015d0 <HAL_RCC_OscConfig+0x1a0>
 8001590:	4b75      	ldr	r3, [pc, #468]	; (8001768 <HAL_RCC_OscConfig+0x338>)
 8001592:	685a      	ldr	r2, [r3, #4]
 8001594:	23c0      	movs	r3, #192	; 0xc0
 8001596:	025b      	lsls	r3, r3, #9
 8001598:	401a      	ands	r2, r3
 800159a:	2380      	movs	r3, #128	; 0x80
 800159c:	021b      	lsls	r3, r3, #8
 800159e:	429a      	cmp	r2, r3
 80015a0:	d116      	bne.n	80015d0 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015a2:	4b71      	ldr	r3, [pc, #452]	; (8001768 <HAL_RCC_OscConfig+0x338>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2202      	movs	r2, #2
 80015a8:	4013      	ands	r3, r2
 80015aa:	d005      	beq.n	80015b8 <HAL_RCC_OscConfig+0x188>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d001      	beq.n	80015b8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e2bb      	b.n	8001b30 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015b8:	4b6b      	ldr	r3, [pc, #428]	; (8001768 <HAL_RCC_OscConfig+0x338>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	22f8      	movs	r2, #248	; 0xf8
 80015be:	4393      	bics	r3, r2
 80015c0:	0019      	movs	r1, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	691b      	ldr	r3, [r3, #16]
 80015c6:	00da      	lsls	r2, r3, #3
 80015c8:	4b67      	ldr	r3, [pc, #412]	; (8001768 <HAL_RCC_OscConfig+0x338>)
 80015ca:	430a      	orrs	r2, r1
 80015cc:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ce:	e041      	b.n	8001654 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d024      	beq.n	8001622 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015d8:	4b63      	ldr	r3, [pc, #396]	; (8001768 <HAL_RCC_OscConfig+0x338>)
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	4b62      	ldr	r3, [pc, #392]	; (8001768 <HAL_RCC_OscConfig+0x338>)
 80015de:	2101      	movs	r1, #1
 80015e0:	430a      	orrs	r2, r1
 80015e2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e4:	f7ff f92c 	bl	8000840 <HAL_GetTick>
 80015e8:	0003      	movs	r3, r0
 80015ea:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ec:	e008      	b.n	8001600 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015ee:	f7ff f927 	bl	8000840 <HAL_GetTick>
 80015f2:	0002      	movs	r2, r0
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d901      	bls.n	8001600 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e297      	b.n	8001b30 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001600:	4b59      	ldr	r3, [pc, #356]	; (8001768 <HAL_RCC_OscConfig+0x338>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2202      	movs	r2, #2
 8001606:	4013      	ands	r3, r2
 8001608:	d0f1      	beq.n	80015ee <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800160a:	4b57      	ldr	r3, [pc, #348]	; (8001768 <HAL_RCC_OscConfig+0x338>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	22f8      	movs	r2, #248	; 0xf8
 8001610:	4393      	bics	r3, r2
 8001612:	0019      	movs	r1, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	691b      	ldr	r3, [r3, #16]
 8001618:	00da      	lsls	r2, r3, #3
 800161a:	4b53      	ldr	r3, [pc, #332]	; (8001768 <HAL_RCC_OscConfig+0x338>)
 800161c:	430a      	orrs	r2, r1
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	e018      	b.n	8001654 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001622:	4b51      	ldr	r3, [pc, #324]	; (8001768 <HAL_RCC_OscConfig+0x338>)
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	4b50      	ldr	r3, [pc, #320]	; (8001768 <HAL_RCC_OscConfig+0x338>)
 8001628:	2101      	movs	r1, #1
 800162a:	438a      	bics	r2, r1
 800162c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800162e:	f7ff f907 	bl	8000840 <HAL_GetTick>
 8001632:	0003      	movs	r3, r0
 8001634:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001636:	e008      	b.n	800164a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001638:	f7ff f902 	bl	8000840 <HAL_GetTick>
 800163c:	0002      	movs	r2, r0
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	2b02      	cmp	r3, #2
 8001644:	d901      	bls.n	800164a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e272      	b.n	8001b30 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800164a:	4b47      	ldr	r3, [pc, #284]	; (8001768 <HAL_RCC_OscConfig+0x338>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	2202      	movs	r2, #2
 8001650:	4013      	ands	r3, r2
 8001652:	d1f1      	bne.n	8001638 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2208      	movs	r2, #8
 800165a:	4013      	ands	r3, r2
 800165c:	d036      	beq.n	80016cc <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	69db      	ldr	r3, [r3, #28]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d019      	beq.n	800169a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001666:	4b40      	ldr	r3, [pc, #256]	; (8001768 <HAL_RCC_OscConfig+0x338>)
 8001668:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800166a:	4b3f      	ldr	r3, [pc, #252]	; (8001768 <HAL_RCC_OscConfig+0x338>)
 800166c:	2101      	movs	r1, #1
 800166e:	430a      	orrs	r2, r1
 8001670:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001672:	f7ff f8e5 	bl	8000840 <HAL_GetTick>
 8001676:	0003      	movs	r3, r0
 8001678:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800167c:	f7ff f8e0 	bl	8000840 <HAL_GetTick>
 8001680:	0002      	movs	r2, r0
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e250      	b.n	8001b30 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800168e:	4b36      	ldr	r3, [pc, #216]	; (8001768 <HAL_RCC_OscConfig+0x338>)
 8001690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001692:	2202      	movs	r2, #2
 8001694:	4013      	ands	r3, r2
 8001696:	d0f1      	beq.n	800167c <HAL_RCC_OscConfig+0x24c>
 8001698:	e018      	b.n	80016cc <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800169a:	4b33      	ldr	r3, [pc, #204]	; (8001768 <HAL_RCC_OscConfig+0x338>)
 800169c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800169e:	4b32      	ldr	r3, [pc, #200]	; (8001768 <HAL_RCC_OscConfig+0x338>)
 80016a0:	2101      	movs	r1, #1
 80016a2:	438a      	bics	r2, r1
 80016a4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016a6:	f7ff f8cb 	bl	8000840 <HAL_GetTick>
 80016aa:	0003      	movs	r3, r0
 80016ac:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016ae:	e008      	b.n	80016c2 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016b0:	f7ff f8c6 	bl	8000840 <HAL_GetTick>
 80016b4:	0002      	movs	r2, r0
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e236      	b.n	8001b30 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016c2:	4b29      	ldr	r3, [pc, #164]	; (8001768 <HAL_RCC_OscConfig+0x338>)
 80016c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c6:	2202      	movs	r2, #2
 80016c8:	4013      	ands	r3, r2
 80016ca:	d1f1      	bne.n	80016b0 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2204      	movs	r2, #4
 80016d2:	4013      	ands	r3, r2
 80016d4:	d100      	bne.n	80016d8 <HAL_RCC_OscConfig+0x2a8>
 80016d6:	e0b5      	b.n	8001844 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016d8:	201f      	movs	r0, #31
 80016da:	183b      	adds	r3, r7, r0
 80016dc:	2200      	movs	r2, #0
 80016de:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016e0:	4b21      	ldr	r3, [pc, #132]	; (8001768 <HAL_RCC_OscConfig+0x338>)
 80016e2:	69da      	ldr	r2, [r3, #28]
 80016e4:	2380      	movs	r3, #128	; 0x80
 80016e6:	055b      	lsls	r3, r3, #21
 80016e8:	4013      	ands	r3, r2
 80016ea:	d110      	bne.n	800170e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016ec:	4b1e      	ldr	r3, [pc, #120]	; (8001768 <HAL_RCC_OscConfig+0x338>)
 80016ee:	69da      	ldr	r2, [r3, #28]
 80016f0:	4b1d      	ldr	r3, [pc, #116]	; (8001768 <HAL_RCC_OscConfig+0x338>)
 80016f2:	2180      	movs	r1, #128	; 0x80
 80016f4:	0549      	lsls	r1, r1, #21
 80016f6:	430a      	orrs	r2, r1
 80016f8:	61da      	str	r2, [r3, #28]
 80016fa:	4b1b      	ldr	r3, [pc, #108]	; (8001768 <HAL_RCC_OscConfig+0x338>)
 80016fc:	69da      	ldr	r2, [r3, #28]
 80016fe:	2380      	movs	r3, #128	; 0x80
 8001700:	055b      	lsls	r3, r3, #21
 8001702:	4013      	ands	r3, r2
 8001704:	60fb      	str	r3, [r7, #12]
 8001706:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001708:	183b      	adds	r3, r7, r0
 800170a:	2201      	movs	r2, #1
 800170c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800170e:	4b19      	ldr	r3, [pc, #100]	; (8001774 <HAL_RCC_OscConfig+0x344>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	2380      	movs	r3, #128	; 0x80
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	4013      	ands	r3, r2
 8001718:	d11a      	bne.n	8001750 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800171a:	4b16      	ldr	r3, [pc, #88]	; (8001774 <HAL_RCC_OscConfig+0x344>)
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	4b15      	ldr	r3, [pc, #84]	; (8001774 <HAL_RCC_OscConfig+0x344>)
 8001720:	2180      	movs	r1, #128	; 0x80
 8001722:	0049      	lsls	r1, r1, #1
 8001724:	430a      	orrs	r2, r1
 8001726:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001728:	f7ff f88a 	bl	8000840 <HAL_GetTick>
 800172c:	0003      	movs	r3, r0
 800172e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001730:	e008      	b.n	8001744 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001732:	f7ff f885 	bl	8000840 <HAL_GetTick>
 8001736:	0002      	movs	r2, r0
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	2b64      	cmp	r3, #100	; 0x64
 800173e:	d901      	bls.n	8001744 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	e1f5      	b.n	8001b30 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001744:	4b0b      	ldr	r3, [pc, #44]	; (8001774 <HAL_RCC_OscConfig+0x344>)
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	2380      	movs	r3, #128	; 0x80
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	4013      	ands	r3, r2
 800174e:	d0f0      	beq.n	8001732 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d10f      	bne.n	8001778 <HAL_RCC_OscConfig+0x348>
 8001758:	4b03      	ldr	r3, [pc, #12]	; (8001768 <HAL_RCC_OscConfig+0x338>)
 800175a:	6a1a      	ldr	r2, [r3, #32]
 800175c:	4b02      	ldr	r3, [pc, #8]	; (8001768 <HAL_RCC_OscConfig+0x338>)
 800175e:	2101      	movs	r1, #1
 8001760:	430a      	orrs	r2, r1
 8001762:	621a      	str	r2, [r3, #32]
 8001764:	e036      	b.n	80017d4 <HAL_RCC_OscConfig+0x3a4>
 8001766:	46c0      	nop			; (mov r8, r8)
 8001768:	40021000 	.word	0x40021000
 800176c:	fffeffff 	.word	0xfffeffff
 8001770:	fffbffff 	.word	0xfffbffff
 8001774:	40007000 	.word	0x40007000
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d10c      	bne.n	800179a <HAL_RCC_OscConfig+0x36a>
 8001780:	4bca      	ldr	r3, [pc, #808]	; (8001aac <HAL_RCC_OscConfig+0x67c>)
 8001782:	6a1a      	ldr	r2, [r3, #32]
 8001784:	4bc9      	ldr	r3, [pc, #804]	; (8001aac <HAL_RCC_OscConfig+0x67c>)
 8001786:	2101      	movs	r1, #1
 8001788:	438a      	bics	r2, r1
 800178a:	621a      	str	r2, [r3, #32]
 800178c:	4bc7      	ldr	r3, [pc, #796]	; (8001aac <HAL_RCC_OscConfig+0x67c>)
 800178e:	6a1a      	ldr	r2, [r3, #32]
 8001790:	4bc6      	ldr	r3, [pc, #792]	; (8001aac <HAL_RCC_OscConfig+0x67c>)
 8001792:	2104      	movs	r1, #4
 8001794:	438a      	bics	r2, r1
 8001796:	621a      	str	r2, [r3, #32]
 8001798:	e01c      	b.n	80017d4 <HAL_RCC_OscConfig+0x3a4>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	2b05      	cmp	r3, #5
 80017a0:	d10c      	bne.n	80017bc <HAL_RCC_OscConfig+0x38c>
 80017a2:	4bc2      	ldr	r3, [pc, #776]	; (8001aac <HAL_RCC_OscConfig+0x67c>)
 80017a4:	6a1a      	ldr	r2, [r3, #32]
 80017a6:	4bc1      	ldr	r3, [pc, #772]	; (8001aac <HAL_RCC_OscConfig+0x67c>)
 80017a8:	2104      	movs	r1, #4
 80017aa:	430a      	orrs	r2, r1
 80017ac:	621a      	str	r2, [r3, #32]
 80017ae:	4bbf      	ldr	r3, [pc, #764]	; (8001aac <HAL_RCC_OscConfig+0x67c>)
 80017b0:	6a1a      	ldr	r2, [r3, #32]
 80017b2:	4bbe      	ldr	r3, [pc, #760]	; (8001aac <HAL_RCC_OscConfig+0x67c>)
 80017b4:	2101      	movs	r1, #1
 80017b6:	430a      	orrs	r2, r1
 80017b8:	621a      	str	r2, [r3, #32]
 80017ba:	e00b      	b.n	80017d4 <HAL_RCC_OscConfig+0x3a4>
 80017bc:	4bbb      	ldr	r3, [pc, #748]	; (8001aac <HAL_RCC_OscConfig+0x67c>)
 80017be:	6a1a      	ldr	r2, [r3, #32]
 80017c0:	4bba      	ldr	r3, [pc, #744]	; (8001aac <HAL_RCC_OscConfig+0x67c>)
 80017c2:	2101      	movs	r1, #1
 80017c4:	438a      	bics	r2, r1
 80017c6:	621a      	str	r2, [r3, #32]
 80017c8:	4bb8      	ldr	r3, [pc, #736]	; (8001aac <HAL_RCC_OscConfig+0x67c>)
 80017ca:	6a1a      	ldr	r2, [r3, #32]
 80017cc:	4bb7      	ldr	r3, [pc, #732]	; (8001aac <HAL_RCC_OscConfig+0x67c>)
 80017ce:	2104      	movs	r1, #4
 80017d0:	438a      	bics	r2, r1
 80017d2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d014      	beq.n	8001806 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017dc:	f7ff f830 	bl	8000840 <HAL_GetTick>
 80017e0:	0003      	movs	r3, r0
 80017e2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017e4:	e009      	b.n	80017fa <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017e6:	f7ff f82b 	bl	8000840 <HAL_GetTick>
 80017ea:	0002      	movs	r2, r0
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	4aaf      	ldr	r2, [pc, #700]	; (8001ab0 <HAL_RCC_OscConfig+0x680>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e19a      	b.n	8001b30 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017fa:	4bac      	ldr	r3, [pc, #688]	; (8001aac <HAL_RCC_OscConfig+0x67c>)
 80017fc:	6a1b      	ldr	r3, [r3, #32]
 80017fe:	2202      	movs	r2, #2
 8001800:	4013      	ands	r3, r2
 8001802:	d0f0      	beq.n	80017e6 <HAL_RCC_OscConfig+0x3b6>
 8001804:	e013      	b.n	800182e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001806:	f7ff f81b 	bl	8000840 <HAL_GetTick>
 800180a:	0003      	movs	r3, r0
 800180c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800180e:	e009      	b.n	8001824 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001810:	f7ff f816 	bl	8000840 <HAL_GetTick>
 8001814:	0002      	movs	r2, r0
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	4aa5      	ldr	r2, [pc, #660]	; (8001ab0 <HAL_RCC_OscConfig+0x680>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d901      	bls.n	8001824 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001820:	2303      	movs	r3, #3
 8001822:	e185      	b.n	8001b30 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001824:	4ba1      	ldr	r3, [pc, #644]	; (8001aac <HAL_RCC_OscConfig+0x67c>)
 8001826:	6a1b      	ldr	r3, [r3, #32]
 8001828:	2202      	movs	r2, #2
 800182a:	4013      	ands	r3, r2
 800182c:	d1f0      	bne.n	8001810 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800182e:	231f      	movs	r3, #31
 8001830:	18fb      	adds	r3, r7, r3
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	2b01      	cmp	r3, #1
 8001836:	d105      	bne.n	8001844 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001838:	4b9c      	ldr	r3, [pc, #624]	; (8001aac <HAL_RCC_OscConfig+0x67c>)
 800183a:	69da      	ldr	r2, [r3, #28]
 800183c:	4b9b      	ldr	r3, [pc, #620]	; (8001aac <HAL_RCC_OscConfig+0x67c>)
 800183e:	499d      	ldr	r1, [pc, #628]	; (8001ab4 <HAL_RCC_OscConfig+0x684>)
 8001840:	400a      	ands	r2, r1
 8001842:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2210      	movs	r2, #16
 800184a:	4013      	ands	r3, r2
 800184c:	d063      	beq.n	8001916 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	695b      	ldr	r3, [r3, #20]
 8001852:	2b01      	cmp	r3, #1
 8001854:	d12a      	bne.n	80018ac <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001856:	4b95      	ldr	r3, [pc, #596]	; (8001aac <HAL_RCC_OscConfig+0x67c>)
 8001858:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800185a:	4b94      	ldr	r3, [pc, #592]	; (8001aac <HAL_RCC_OscConfig+0x67c>)
 800185c:	2104      	movs	r1, #4
 800185e:	430a      	orrs	r2, r1
 8001860:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001862:	4b92      	ldr	r3, [pc, #584]	; (8001aac <HAL_RCC_OscConfig+0x67c>)
 8001864:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001866:	4b91      	ldr	r3, [pc, #580]	; (8001aac <HAL_RCC_OscConfig+0x67c>)
 8001868:	2101      	movs	r1, #1
 800186a:	430a      	orrs	r2, r1
 800186c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800186e:	f7fe ffe7 	bl	8000840 <HAL_GetTick>
 8001872:	0003      	movs	r3, r0
 8001874:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001878:	f7fe ffe2 	bl	8000840 <HAL_GetTick>
 800187c:	0002      	movs	r2, r0
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b02      	cmp	r3, #2
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e152      	b.n	8001b30 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800188a:	4b88      	ldr	r3, [pc, #544]	; (8001aac <HAL_RCC_OscConfig+0x67c>)
 800188c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800188e:	2202      	movs	r2, #2
 8001890:	4013      	ands	r3, r2
 8001892:	d0f1      	beq.n	8001878 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001894:	4b85      	ldr	r3, [pc, #532]	; (8001aac <HAL_RCC_OscConfig+0x67c>)
 8001896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001898:	22f8      	movs	r2, #248	; 0xf8
 800189a:	4393      	bics	r3, r2
 800189c:	0019      	movs	r1, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	699b      	ldr	r3, [r3, #24]
 80018a2:	00da      	lsls	r2, r3, #3
 80018a4:	4b81      	ldr	r3, [pc, #516]	; (8001aac <HAL_RCC_OscConfig+0x67c>)
 80018a6:	430a      	orrs	r2, r1
 80018a8:	635a      	str	r2, [r3, #52]	; 0x34
 80018aa:	e034      	b.n	8001916 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	695b      	ldr	r3, [r3, #20]
 80018b0:	3305      	adds	r3, #5
 80018b2:	d111      	bne.n	80018d8 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80018b4:	4b7d      	ldr	r3, [pc, #500]	; (8001aac <HAL_RCC_OscConfig+0x67c>)
 80018b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018b8:	4b7c      	ldr	r3, [pc, #496]	; (8001aac <HAL_RCC_OscConfig+0x67c>)
 80018ba:	2104      	movs	r1, #4
 80018bc:	438a      	bics	r2, r1
 80018be:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80018c0:	4b7a      	ldr	r3, [pc, #488]	; (8001aac <HAL_RCC_OscConfig+0x67c>)
 80018c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018c4:	22f8      	movs	r2, #248	; 0xf8
 80018c6:	4393      	bics	r3, r2
 80018c8:	0019      	movs	r1, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	699b      	ldr	r3, [r3, #24]
 80018ce:	00da      	lsls	r2, r3, #3
 80018d0:	4b76      	ldr	r3, [pc, #472]	; (8001aac <HAL_RCC_OscConfig+0x67c>)
 80018d2:	430a      	orrs	r2, r1
 80018d4:	635a      	str	r2, [r3, #52]	; 0x34
 80018d6:	e01e      	b.n	8001916 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80018d8:	4b74      	ldr	r3, [pc, #464]	; (8001aac <HAL_RCC_OscConfig+0x67c>)
 80018da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018dc:	4b73      	ldr	r3, [pc, #460]	; (8001aac <HAL_RCC_OscConfig+0x67c>)
 80018de:	2104      	movs	r1, #4
 80018e0:	430a      	orrs	r2, r1
 80018e2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80018e4:	4b71      	ldr	r3, [pc, #452]	; (8001aac <HAL_RCC_OscConfig+0x67c>)
 80018e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018e8:	4b70      	ldr	r3, [pc, #448]	; (8001aac <HAL_RCC_OscConfig+0x67c>)
 80018ea:	2101      	movs	r1, #1
 80018ec:	438a      	bics	r2, r1
 80018ee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018f0:	f7fe ffa6 	bl	8000840 <HAL_GetTick>
 80018f4:	0003      	movs	r3, r0
 80018f6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80018f8:	e008      	b.n	800190c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80018fa:	f7fe ffa1 	bl	8000840 <HAL_GetTick>
 80018fe:	0002      	movs	r2, r0
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2b02      	cmp	r3, #2
 8001906:	d901      	bls.n	800190c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e111      	b.n	8001b30 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800190c:	4b67      	ldr	r3, [pc, #412]	; (8001aac <HAL_RCC_OscConfig+0x67c>)
 800190e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001910:	2202      	movs	r2, #2
 8001912:	4013      	ands	r3, r2
 8001914:	d1f1      	bne.n	80018fa <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2220      	movs	r2, #32
 800191c:	4013      	ands	r3, r2
 800191e:	d05c      	beq.n	80019da <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001920:	4b62      	ldr	r3, [pc, #392]	; (8001aac <HAL_RCC_OscConfig+0x67c>)
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	220c      	movs	r2, #12
 8001926:	4013      	ands	r3, r2
 8001928:	2b0c      	cmp	r3, #12
 800192a:	d00e      	beq.n	800194a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800192c:	4b5f      	ldr	r3, [pc, #380]	; (8001aac <HAL_RCC_OscConfig+0x67c>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	220c      	movs	r2, #12
 8001932:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001934:	2b08      	cmp	r3, #8
 8001936:	d114      	bne.n	8001962 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001938:	4b5c      	ldr	r3, [pc, #368]	; (8001aac <HAL_RCC_OscConfig+0x67c>)
 800193a:	685a      	ldr	r2, [r3, #4]
 800193c:	23c0      	movs	r3, #192	; 0xc0
 800193e:	025b      	lsls	r3, r3, #9
 8001940:	401a      	ands	r2, r3
 8001942:	23c0      	movs	r3, #192	; 0xc0
 8001944:	025b      	lsls	r3, r3, #9
 8001946:	429a      	cmp	r2, r3
 8001948:	d10b      	bne.n	8001962 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800194a:	4b58      	ldr	r3, [pc, #352]	; (8001aac <HAL_RCC_OscConfig+0x67c>)
 800194c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800194e:	2380      	movs	r3, #128	; 0x80
 8001950:	029b      	lsls	r3, r3, #10
 8001952:	4013      	ands	r3, r2
 8001954:	d040      	beq.n	80019d8 <HAL_RCC_OscConfig+0x5a8>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6a1b      	ldr	r3, [r3, #32]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d03c      	beq.n	80019d8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e0e6      	b.n	8001b30 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6a1b      	ldr	r3, [r3, #32]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d01b      	beq.n	80019a2 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800196a:	4b50      	ldr	r3, [pc, #320]	; (8001aac <HAL_RCC_OscConfig+0x67c>)
 800196c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800196e:	4b4f      	ldr	r3, [pc, #316]	; (8001aac <HAL_RCC_OscConfig+0x67c>)
 8001970:	2180      	movs	r1, #128	; 0x80
 8001972:	0249      	lsls	r1, r1, #9
 8001974:	430a      	orrs	r2, r1
 8001976:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001978:	f7fe ff62 	bl	8000840 <HAL_GetTick>
 800197c:	0003      	movs	r3, r0
 800197e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001980:	e008      	b.n	8001994 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001982:	f7fe ff5d 	bl	8000840 <HAL_GetTick>
 8001986:	0002      	movs	r2, r0
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	2b02      	cmp	r3, #2
 800198e:	d901      	bls.n	8001994 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001990:	2303      	movs	r3, #3
 8001992:	e0cd      	b.n	8001b30 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001994:	4b45      	ldr	r3, [pc, #276]	; (8001aac <HAL_RCC_OscConfig+0x67c>)
 8001996:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001998:	2380      	movs	r3, #128	; 0x80
 800199a:	029b      	lsls	r3, r3, #10
 800199c:	4013      	ands	r3, r2
 800199e:	d0f0      	beq.n	8001982 <HAL_RCC_OscConfig+0x552>
 80019a0:	e01b      	b.n	80019da <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80019a2:	4b42      	ldr	r3, [pc, #264]	; (8001aac <HAL_RCC_OscConfig+0x67c>)
 80019a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019a6:	4b41      	ldr	r3, [pc, #260]	; (8001aac <HAL_RCC_OscConfig+0x67c>)
 80019a8:	4943      	ldr	r1, [pc, #268]	; (8001ab8 <HAL_RCC_OscConfig+0x688>)
 80019aa:	400a      	ands	r2, r1
 80019ac:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ae:	f7fe ff47 	bl	8000840 <HAL_GetTick>
 80019b2:	0003      	movs	r3, r0
 80019b4:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80019b6:	e008      	b.n	80019ca <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019b8:	f7fe ff42 	bl	8000840 <HAL_GetTick>
 80019bc:	0002      	movs	r2, r0
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e0b2      	b.n	8001b30 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80019ca:	4b38      	ldr	r3, [pc, #224]	; (8001aac <HAL_RCC_OscConfig+0x67c>)
 80019cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019ce:	2380      	movs	r3, #128	; 0x80
 80019d0:	029b      	lsls	r3, r3, #10
 80019d2:	4013      	ands	r3, r2
 80019d4:	d1f0      	bne.n	80019b8 <HAL_RCC_OscConfig+0x588>
 80019d6:	e000      	b.n	80019da <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80019d8:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d100      	bne.n	80019e4 <HAL_RCC_OscConfig+0x5b4>
 80019e2:	e0a4      	b.n	8001b2e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019e4:	4b31      	ldr	r3, [pc, #196]	; (8001aac <HAL_RCC_OscConfig+0x67c>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	220c      	movs	r2, #12
 80019ea:	4013      	ands	r3, r2
 80019ec:	2b08      	cmp	r3, #8
 80019ee:	d100      	bne.n	80019f2 <HAL_RCC_OscConfig+0x5c2>
 80019f0:	e078      	b.n	8001ae4 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d14c      	bne.n	8001a94 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019fa:	4b2c      	ldr	r3, [pc, #176]	; (8001aac <HAL_RCC_OscConfig+0x67c>)
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	4b2b      	ldr	r3, [pc, #172]	; (8001aac <HAL_RCC_OscConfig+0x67c>)
 8001a00:	492e      	ldr	r1, [pc, #184]	; (8001abc <HAL_RCC_OscConfig+0x68c>)
 8001a02:	400a      	ands	r2, r1
 8001a04:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a06:	f7fe ff1b 	bl	8000840 <HAL_GetTick>
 8001a0a:	0003      	movs	r3, r0
 8001a0c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a0e:	e008      	b.n	8001a22 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a10:	f7fe ff16 	bl	8000840 <HAL_GetTick>
 8001a14:	0002      	movs	r2, r0
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e086      	b.n	8001b30 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a22:	4b22      	ldr	r3, [pc, #136]	; (8001aac <HAL_RCC_OscConfig+0x67c>)
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	2380      	movs	r3, #128	; 0x80
 8001a28:	049b      	lsls	r3, r3, #18
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	d1f0      	bne.n	8001a10 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a2e:	4b1f      	ldr	r3, [pc, #124]	; (8001aac <HAL_RCC_OscConfig+0x67c>)
 8001a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a32:	220f      	movs	r2, #15
 8001a34:	4393      	bics	r3, r2
 8001a36:	0019      	movs	r1, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a3c:	4b1b      	ldr	r3, [pc, #108]	; (8001aac <HAL_RCC_OscConfig+0x67c>)
 8001a3e:	430a      	orrs	r2, r1
 8001a40:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a42:	4b1a      	ldr	r3, [pc, #104]	; (8001aac <HAL_RCC_OscConfig+0x67c>)
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	4a1e      	ldr	r2, [pc, #120]	; (8001ac0 <HAL_RCC_OscConfig+0x690>)
 8001a48:	4013      	ands	r3, r2
 8001a4a:	0019      	movs	r1, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a54:	431a      	orrs	r2, r3
 8001a56:	4b15      	ldr	r3, [pc, #84]	; (8001aac <HAL_RCC_OscConfig+0x67c>)
 8001a58:	430a      	orrs	r2, r1
 8001a5a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a5c:	4b13      	ldr	r3, [pc, #76]	; (8001aac <HAL_RCC_OscConfig+0x67c>)
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	4b12      	ldr	r3, [pc, #72]	; (8001aac <HAL_RCC_OscConfig+0x67c>)
 8001a62:	2180      	movs	r1, #128	; 0x80
 8001a64:	0449      	lsls	r1, r1, #17
 8001a66:	430a      	orrs	r2, r1
 8001a68:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a6a:	f7fe fee9 	bl	8000840 <HAL_GetTick>
 8001a6e:	0003      	movs	r3, r0
 8001a70:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a72:	e008      	b.n	8001a86 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a74:	f7fe fee4 	bl	8000840 <HAL_GetTick>
 8001a78:	0002      	movs	r2, r0
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e054      	b.n	8001b30 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a86:	4b09      	ldr	r3, [pc, #36]	; (8001aac <HAL_RCC_OscConfig+0x67c>)
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	2380      	movs	r3, #128	; 0x80
 8001a8c:	049b      	lsls	r3, r3, #18
 8001a8e:	4013      	ands	r3, r2
 8001a90:	d0f0      	beq.n	8001a74 <HAL_RCC_OscConfig+0x644>
 8001a92:	e04c      	b.n	8001b2e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a94:	4b05      	ldr	r3, [pc, #20]	; (8001aac <HAL_RCC_OscConfig+0x67c>)
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	4b04      	ldr	r3, [pc, #16]	; (8001aac <HAL_RCC_OscConfig+0x67c>)
 8001a9a:	4908      	ldr	r1, [pc, #32]	; (8001abc <HAL_RCC_OscConfig+0x68c>)
 8001a9c:	400a      	ands	r2, r1
 8001a9e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa0:	f7fe fece 	bl	8000840 <HAL_GetTick>
 8001aa4:	0003      	movs	r3, r0
 8001aa6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aa8:	e015      	b.n	8001ad6 <HAL_RCC_OscConfig+0x6a6>
 8001aaa:	46c0      	nop			; (mov r8, r8)
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	00001388 	.word	0x00001388
 8001ab4:	efffffff 	.word	0xefffffff
 8001ab8:	fffeffff 	.word	0xfffeffff
 8001abc:	feffffff 	.word	0xfeffffff
 8001ac0:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ac4:	f7fe febc 	bl	8000840 <HAL_GetTick>
 8001ac8:	0002      	movs	r2, r0
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e02c      	b.n	8001b30 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ad6:	4b18      	ldr	r3, [pc, #96]	; (8001b38 <HAL_RCC_OscConfig+0x708>)
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	2380      	movs	r3, #128	; 0x80
 8001adc:	049b      	lsls	r3, r3, #18
 8001ade:	4013      	ands	r3, r2
 8001ae0:	d1f0      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x694>
 8001ae2:	e024      	b.n	8001b2e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d101      	bne.n	8001af0 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e01f      	b.n	8001b30 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001af0:	4b11      	ldr	r3, [pc, #68]	; (8001b38 <HAL_RCC_OscConfig+0x708>)
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001af6:	4b10      	ldr	r3, [pc, #64]	; (8001b38 <HAL_RCC_OscConfig+0x708>)
 8001af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001afa:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001afc:	697a      	ldr	r2, [r7, #20]
 8001afe:	23c0      	movs	r3, #192	; 0xc0
 8001b00:	025b      	lsls	r3, r3, #9
 8001b02:	401a      	ands	r2, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d10e      	bne.n	8001b2a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	220f      	movs	r2, #15
 8001b10:	401a      	ands	r2, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d107      	bne.n	8001b2a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001b1a:	697a      	ldr	r2, [r7, #20]
 8001b1c:	23f0      	movs	r3, #240	; 0xf0
 8001b1e:	039b      	lsls	r3, r3, #14
 8001b20:	401a      	ands	r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d001      	beq.n	8001b2e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e000      	b.n	8001b30 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001b2e:	2300      	movs	r3, #0
}
 8001b30:	0018      	movs	r0, r3
 8001b32:	46bd      	mov	sp, r7
 8001b34:	b008      	add	sp, #32
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	40021000 	.word	0x40021000

08001b3c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d101      	bne.n	8001b50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e0bf      	b.n	8001cd0 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b50:	4b61      	ldr	r3, [pc, #388]	; (8001cd8 <HAL_RCC_ClockConfig+0x19c>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2201      	movs	r2, #1
 8001b56:	4013      	ands	r3, r2
 8001b58:	683a      	ldr	r2, [r7, #0]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d911      	bls.n	8001b82 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b5e:	4b5e      	ldr	r3, [pc, #376]	; (8001cd8 <HAL_RCC_ClockConfig+0x19c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	2201      	movs	r2, #1
 8001b64:	4393      	bics	r3, r2
 8001b66:	0019      	movs	r1, r3
 8001b68:	4b5b      	ldr	r3, [pc, #364]	; (8001cd8 <HAL_RCC_ClockConfig+0x19c>)
 8001b6a:	683a      	ldr	r2, [r7, #0]
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b70:	4b59      	ldr	r3, [pc, #356]	; (8001cd8 <HAL_RCC_ClockConfig+0x19c>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2201      	movs	r2, #1
 8001b76:	4013      	ands	r3, r2
 8001b78:	683a      	ldr	r2, [r7, #0]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d001      	beq.n	8001b82 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e0a6      	b.n	8001cd0 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	2202      	movs	r2, #2
 8001b88:	4013      	ands	r3, r2
 8001b8a:	d015      	beq.n	8001bb8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2204      	movs	r2, #4
 8001b92:	4013      	ands	r3, r2
 8001b94:	d006      	beq.n	8001ba4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001b96:	4b51      	ldr	r3, [pc, #324]	; (8001cdc <HAL_RCC_ClockConfig+0x1a0>)
 8001b98:	685a      	ldr	r2, [r3, #4]
 8001b9a:	4b50      	ldr	r3, [pc, #320]	; (8001cdc <HAL_RCC_ClockConfig+0x1a0>)
 8001b9c:	21e0      	movs	r1, #224	; 0xe0
 8001b9e:	00c9      	lsls	r1, r1, #3
 8001ba0:	430a      	orrs	r2, r1
 8001ba2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ba4:	4b4d      	ldr	r3, [pc, #308]	; (8001cdc <HAL_RCC_ClockConfig+0x1a0>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	22f0      	movs	r2, #240	; 0xf0
 8001baa:	4393      	bics	r3, r2
 8001bac:	0019      	movs	r1, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	689a      	ldr	r2, [r3, #8]
 8001bb2:	4b4a      	ldr	r3, [pc, #296]	; (8001cdc <HAL_RCC_ClockConfig+0x1a0>)
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	d04c      	beq.n	8001c5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d107      	bne.n	8001bda <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bca:	4b44      	ldr	r3, [pc, #272]	; (8001cdc <HAL_RCC_ClockConfig+0x1a0>)
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	2380      	movs	r3, #128	; 0x80
 8001bd0:	029b      	lsls	r3, r3, #10
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	d120      	bne.n	8001c18 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e07a      	b.n	8001cd0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d107      	bne.n	8001bf2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001be2:	4b3e      	ldr	r3, [pc, #248]	; (8001cdc <HAL_RCC_ClockConfig+0x1a0>)
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	2380      	movs	r3, #128	; 0x80
 8001be8:	049b      	lsls	r3, r3, #18
 8001bea:	4013      	ands	r3, r2
 8001bec:	d114      	bne.n	8001c18 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e06e      	b.n	8001cd0 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	2b03      	cmp	r3, #3
 8001bf8:	d107      	bne.n	8001c0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001bfa:	4b38      	ldr	r3, [pc, #224]	; (8001cdc <HAL_RCC_ClockConfig+0x1a0>)
 8001bfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bfe:	2380      	movs	r3, #128	; 0x80
 8001c00:	029b      	lsls	r3, r3, #10
 8001c02:	4013      	ands	r3, r2
 8001c04:	d108      	bne.n	8001c18 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e062      	b.n	8001cd0 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c0a:	4b34      	ldr	r3, [pc, #208]	; (8001cdc <HAL_RCC_ClockConfig+0x1a0>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	2202      	movs	r2, #2
 8001c10:	4013      	ands	r3, r2
 8001c12:	d101      	bne.n	8001c18 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e05b      	b.n	8001cd0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c18:	4b30      	ldr	r3, [pc, #192]	; (8001cdc <HAL_RCC_ClockConfig+0x1a0>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	2203      	movs	r2, #3
 8001c1e:	4393      	bics	r3, r2
 8001c20:	0019      	movs	r1, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685a      	ldr	r2, [r3, #4]
 8001c26:	4b2d      	ldr	r3, [pc, #180]	; (8001cdc <HAL_RCC_ClockConfig+0x1a0>)
 8001c28:	430a      	orrs	r2, r1
 8001c2a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c2c:	f7fe fe08 	bl	8000840 <HAL_GetTick>
 8001c30:	0003      	movs	r3, r0
 8001c32:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c34:	e009      	b.n	8001c4a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c36:	f7fe fe03 	bl	8000840 <HAL_GetTick>
 8001c3a:	0002      	movs	r2, r0
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	4a27      	ldr	r2, [pc, #156]	; (8001ce0 <HAL_RCC_ClockConfig+0x1a4>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e042      	b.n	8001cd0 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c4a:	4b24      	ldr	r3, [pc, #144]	; (8001cdc <HAL_RCC_ClockConfig+0x1a0>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	220c      	movs	r2, #12
 8001c50:	401a      	ands	r2, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d1ec      	bne.n	8001c36 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c5c:	4b1e      	ldr	r3, [pc, #120]	; (8001cd8 <HAL_RCC_ClockConfig+0x19c>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2201      	movs	r2, #1
 8001c62:	4013      	ands	r3, r2
 8001c64:	683a      	ldr	r2, [r7, #0]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d211      	bcs.n	8001c8e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c6a:	4b1b      	ldr	r3, [pc, #108]	; (8001cd8 <HAL_RCC_ClockConfig+0x19c>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	4393      	bics	r3, r2
 8001c72:	0019      	movs	r1, r3
 8001c74:	4b18      	ldr	r3, [pc, #96]	; (8001cd8 <HAL_RCC_ClockConfig+0x19c>)
 8001c76:	683a      	ldr	r2, [r7, #0]
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c7c:	4b16      	ldr	r3, [pc, #88]	; (8001cd8 <HAL_RCC_ClockConfig+0x19c>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2201      	movs	r2, #1
 8001c82:	4013      	ands	r3, r2
 8001c84:	683a      	ldr	r2, [r7, #0]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d001      	beq.n	8001c8e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e020      	b.n	8001cd0 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2204      	movs	r2, #4
 8001c94:	4013      	ands	r3, r2
 8001c96:	d009      	beq.n	8001cac <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001c98:	4b10      	ldr	r3, [pc, #64]	; (8001cdc <HAL_RCC_ClockConfig+0x1a0>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	4a11      	ldr	r2, [pc, #68]	; (8001ce4 <HAL_RCC_ClockConfig+0x1a8>)
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	0019      	movs	r1, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	68da      	ldr	r2, [r3, #12]
 8001ca6:	4b0d      	ldr	r3, [pc, #52]	; (8001cdc <HAL_RCC_ClockConfig+0x1a0>)
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001cac:	f000 f820 	bl	8001cf0 <HAL_RCC_GetSysClockFreq>
 8001cb0:	0001      	movs	r1, r0
 8001cb2:	4b0a      	ldr	r3, [pc, #40]	; (8001cdc <HAL_RCC_ClockConfig+0x1a0>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	091b      	lsrs	r3, r3, #4
 8001cb8:	220f      	movs	r2, #15
 8001cba:	4013      	ands	r3, r2
 8001cbc:	4a0a      	ldr	r2, [pc, #40]	; (8001ce8 <HAL_RCC_ClockConfig+0x1ac>)
 8001cbe:	5cd3      	ldrb	r3, [r2, r3]
 8001cc0:	000a      	movs	r2, r1
 8001cc2:	40da      	lsrs	r2, r3
 8001cc4:	4b09      	ldr	r3, [pc, #36]	; (8001cec <HAL_RCC_ClockConfig+0x1b0>)
 8001cc6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001cc8:	2000      	movs	r0, #0
 8001cca:	f7fe fd73 	bl	80007b4 <HAL_InitTick>
  
  return HAL_OK;
 8001cce:	2300      	movs	r3, #0
}
 8001cd0:	0018      	movs	r0, r3
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	b004      	add	sp, #16
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	40022000 	.word	0x40022000
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	00001388 	.word	0x00001388
 8001ce4:	fffff8ff 	.word	0xfffff8ff
 8001ce8:	08002410 	.word	0x08002410
 8001cec:	20000200 	.word	0x20000200

08001cf0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b086      	sub	sp, #24
 8001cf4:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	60fb      	str	r3, [r7, #12]
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60bb      	str	r3, [r7, #8]
 8001cfe:	2300      	movs	r3, #0
 8001d00:	617b      	str	r3, [r7, #20]
 8001d02:	2300      	movs	r3, #0
 8001d04:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001d06:	2300      	movs	r3, #0
 8001d08:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001d0a:	4b2d      	ldr	r3, [pc, #180]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	220c      	movs	r2, #12
 8001d14:	4013      	ands	r3, r2
 8001d16:	2b0c      	cmp	r3, #12
 8001d18:	d046      	beq.n	8001da8 <HAL_RCC_GetSysClockFreq+0xb8>
 8001d1a:	d848      	bhi.n	8001dae <HAL_RCC_GetSysClockFreq+0xbe>
 8001d1c:	2b04      	cmp	r3, #4
 8001d1e:	d002      	beq.n	8001d26 <HAL_RCC_GetSysClockFreq+0x36>
 8001d20:	2b08      	cmp	r3, #8
 8001d22:	d003      	beq.n	8001d2c <HAL_RCC_GetSysClockFreq+0x3c>
 8001d24:	e043      	b.n	8001dae <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d26:	4b27      	ldr	r3, [pc, #156]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001d28:	613b      	str	r3, [r7, #16]
      break;
 8001d2a:	e043      	b.n	8001db4 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	0c9b      	lsrs	r3, r3, #18
 8001d30:	220f      	movs	r2, #15
 8001d32:	4013      	ands	r3, r2
 8001d34:	4a24      	ldr	r2, [pc, #144]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0xd8>)
 8001d36:	5cd3      	ldrb	r3, [r2, r3]
 8001d38:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001d3a:	4b21      	ldr	r3, [pc, #132]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d3e:	220f      	movs	r2, #15
 8001d40:	4013      	ands	r3, r2
 8001d42:	4a22      	ldr	r2, [pc, #136]	; (8001dcc <HAL_RCC_GetSysClockFreq+0xdc>)
 8001d44:	5cd3      	ldrb	r3, [r2, r3]
 8001d46:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001d48:	68fa      	ldr	r2, [r7, #12]
 8001d4a:	23c0      	movs	r3, #192	; 0xc0
 8001d4c:	025b      	lsls	r3, r3, #9
 8001d4e:	401a      	ands	r2, r3
 8001d50:	2380      	movs	r3, #128	; 0x80
 8001d52:	025b      	lsls	r3, r3, #9
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d109      	bne.n	8001d6c <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001d58:	68b9      	ldr	r1, [r7, #8]
 8001d5a:	481a      	ldr	r0, [pc, #104]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001d5c:	f7fe f9d4 	bl	8000108 <__udivsi3>
 8001d60:	0003      	movs	r3, r0
 8001d62:	001a      	movs	r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4353      	muls	r3, r2
 8001d68:	617b      	str	r3, [r7, #20]
 8001d6a:	e01a      	b.n	8001da2 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001d6c:	68fa      	ldr	r2, [r7, #12]
 8001d6e:	23c0      	movs	r3, #192	; 0xc0
 8001d70:	025b      	lsls	r3, r3, #9
 8001d72:	401a      	ands	r2, r3
 8001d74:	23c0      	movs	r3, #192	; 0xc0
 8001d76:	025b      	lsls	r3, r3, #9
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d109      	bne.n	8001d90 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001d7c:	68b9      	ldr	r1, [r7, #8]
 8001d7e:	4814      	ldr	r0, [pc, #80]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0xe0>)
 8001d80:	f7fe f9c2 	bl	8000108 <__udivsi3>
 8001d84:	0003      	movs	r3, r0
 8001d86:	001a      	movs	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	4353      	muls	r3, r2
 8001d8c:	617b      	str	r3, [r7, #20]
 8001d8e:	e008      	b.n	8001da2 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001d90:	68b9      	ldr	r1, [r7, #8]
 8001d92:	480c      	ldr	r0, [pc, #48]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001d94:	f7fe f9b8 	bl	8000108 <__udivsi3>
 8001d98:	0003      	movs	r3, r0
 8001d9a:	001a      	movs	r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	4353      	muls	r3, r2
 8001da0:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	613b      	str	r3, [r7, #16]
      break;
 8001da6:	e005      	b.n	8001db4 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001da8:	4b09      	ldr	r3, [pc, #36]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0xe0>)
 8001daa:	613b      	str	r3, [r7, #16]
      break;
 8001dac:	e002      	b.n	8001db4 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001dae:	4b05      	ldr	r3, [pc, #20]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001db0:	613b      	str	r3, [r7, #16]
      break;
 8001db2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001db4:	693b      	ldr	r3, [r7, #16]
}
 8001db6:	0018      	movs	r0, r3
 8001db8:	46bd      	mov	sp, r7
 8001dba:	b006      	add	sp, #24
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	46c0      	nop			; (mov r8, r8)
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	007a1200 	.word	0x007a1200
 8001dc8:	08002420 	.word	0x08002420
 8001dcc:	08002430 	.word	0x08002430
 8001dd0:	02dc6c00 	.word	0x02dc6c00

08001dd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d101      	bne.n	8001de6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e042      	b.n	8001e6c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	223d      	movs	r2, #61	; 0x3d
 8001dea:	5c9b      	ldrb	r3, [r3, r2]
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d107      	bne.n	8001e02 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	223c      	movs	r2, #60	; 0x3c
 8001df6:	2100      	movs	r1, #0
 8001df8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	0018      	movs	r0, r3
 8001dfe:	f7fe fc55 	bl	80006ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	223d      	movs	r2, #61	; 0x3d
 8001e06:	2102      	movs	r1, #2
 8001e08:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	3304      	adds	r3, #4
 8001e12:	0019      	movs	r1, r3
 8001e14:	0010      	movs	r0, r2
 8001e16:	f000 f94b 	bl	80020b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2246      	movs	r2, #70	; 0x46
 8001e1e:	2101      	movs	r1, #1
 8001e20:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	223e      	movs	r2, #62	; 0x3e
 8001e26:	2101      	movs	r1, #1
 8001e28:	5499      	strb	r1, [r3, r2]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	223f      	movs	r2, #63	; 0x3f
 8001e2e:	2101      	movs	r1, #1
 8001e30:	5499      	strb	r1, [r3, r2]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2240      	movs	r2, #64	; 0x40
 8001e36:	2101      	movs	r1, #1
 8001e38:	5499      	strb	r1, [r3, r2]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2241      	movs	r2, #65	; 0x41
 8001e3e:	2101      	movs	r1, #1
 8001e40:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2242      	movs	r2, #66	; 0x42
 8001e46:	2101      	movs	r1, #1
 8001e48:	5499      	strb	r1, [r3, r2]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2243      	movs	r2, #67	; 0x43
 8001e4e:	2101      	movs	r1, #1
 8001e50:	5499      	strb	r1, [r3, r2]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2244      	movs	r2, #68	; 0x44
 8001e56:	2101      	movs	r1, #1
 8001e58:	5499      	strb	r1, [r3, r2]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2245      	movs	r2, #69	; 0x45
 8001e5e:	2101      	movs	r1, #1
 8001e60:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	223d      	movs	r2, #61	; 0x3d
 8001e66:	2101      	movs	r1, #1
 8001e68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e6a:	2300      	movs	r3, #0
}
 8001e6c:	0018      	movs	r0, r3
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	b002      	add	sp, #8
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	223d      	movs	r2, #61	; 0x3d
 8001e80:	5c9b      	ldrb	r3, [r3, r2]
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d001      	beq.n	8001e8c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e033      	b.n	8001ef4 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	223d      	movs	r2, #61	; 0x3d
 8001e90:	2102      	movs	r1, #2
 8001e92:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a18      	ldr	r2, [pc, #96]	; (8001efc <HAL_TIM_Base_Start+0x88>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d00f      	beq.n	8001ebe <HAL_TIM_Base_Start+0x4a>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	2380      	movs	r3, #128	; 0x80
 8001ea4:	05db      	lsls	r3, r3, #23
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d009      	beq.n	8001ebe <HAL_TIM_Base_Start+0x4a>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a14      	ldr	r2, [pc, #80]	; (8001f00 <HAL_TIM_Base_Start+0x8c>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d004      	beq.n	8001ebe <HAL_TIM_Base_Start+0x4a>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a12      	ldr	r2, [pc, #72]	; (8001f04 <HAL_TIM_Base_Start+0x90>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d111      	bne.n	8001ee2 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	2207      	movs	r2, #7
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2b06      	cmp	r3, #6
 8001ece:	d010      	beq.n	8001ef2 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2101      	movs	r1, #1
 8001edc:	430a      	orrs	r2, r1
 8001ede:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ee0:	e007      	b.n	8001ef2 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2101      	movs	r1, #1
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ef2:	2300      	movs	r3, #0
}
 8001ef4:	0018      	movs	r0, r3
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	b004      	add	sp, #16
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	40012c00 	.word	0x40012c00
 8001f00:	40000400 	.word	0x40000400
 8001f04:	40014000 	.word	0x40014000

08001f08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f12:	230f      	movs	r3, #15
 8001f14:	18fb      	adds	r3, r7, r3
 8001f16:	2200      	movs	r2, #0
 8001f18:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	223c      	movs	r2, #60	; 0x3c
 8001f1e:	5c9b      	ldrb	r3, [r3, r2]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d101      	bne.n	8001f28 <HAL_TIM_ConfigClockSource+0x20>
 8001f24:	2302      	movs	r3, #2
 8001f26:	e0bc      	b.n	80020a2 <HAL_TIM_ConfigClockSource+0x19a>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	223c      	movs	r2, #60	; 0x3c
 8001f2c:	2101      	movs	r1, #1
 8001f2e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	223d      	movs	r2, #61	; 0x3d
 8001f34:	2102      	movs	r1, #2
 8001f36:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	2277      	movs	r2, #119	; 0x77
 8001f44:	4393      	bics	r3, r2
 8001f46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	4a58      	ldr	r2, [pc, #352]	; (80020ac <HAL_TIM_ConfigClockSource+0x1a4>)
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	68ba      	ldr	r2, [r7, #8]
 8001f56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2280      	movs	r2, #128	; 0x80
 8001f5e:	0192      	lsls	r2, r2, #6
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d040      	beq.n	8001fe6 <HAL_TIM_ConfigClockSource+0xde>
 8001f64:	2280      	movs	r2, #128	; 0x80
 8001f66:	0192      	lsls	r2, r2, #6
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d900      	bls.n	8001f6e <HAL_TIM_ConfigClockSource+0x66>
 8001f6c:	e088      	b.n	8002080 <HAL_TIM_ConfigClockSource+0x178>
 8001f6e:	2280      	movs	r2, #128	; 0x80
 8001f70:	0152      	lsls	r2, r2, #5
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d100      	bne.n	8001f78 <HAL_TIM_ConfigClockSource+0x70>
 8001f76:	e088      	b.n	800208a <HAL_TIM_ConfigClockSource+0x182>
 8001f78:	2280      	movs	r2, #128	; 0x80
 8001f7a:	0152      	lsls	r2, r2, #5
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d900      	bls.n	8001f82 <HAL_TIM_ConfigClockSource+0x7a>
 8001f80:	e07e      	b.n	8002080 <HAL_TIM_ConfigClockSource+0x178>
 8001f82:	2b70      	cmp	r3, #112	; 0x70
 8001f84:	d018      	beq.n	8001fb8 <HAL_TIM_ConfigClockSource+0xb0>
 8001f86:	d900      	bls.n	8001f8a <HAL_TIM_ConfigClockSource+0x82>
 8001f88:	e07a      	b.n	8002080 <HAL_TIM_ConfigClockSource+0x178>
 8001f8a:	2b60      	cmp	r3, #96	; 0x60
 8001f8c:	d04f      	beq.n	800202e <HAL_TIM_ConfigClockSource+0x126>
 8001f8e:	d900      	bls.n	8001f92 <HAL_TIM_ConfigClockSource+0x8a>
 8001f90:	e076      	b.n	8002080 <HAL_TIM_ConfigClockSource+0x178>
 8001f92:	2b50      	cmp	r3, #80	; 0x50
 8001f94:	d03b      	beq.n	800200e <HAL_TIM_ConfigClockSource+0x106>
 8001f96:	d900      	bls.n	8001f9a <HAL_TIM_ConfigClockSource+0x92>
 8001f98:	e072      	b.n	8002080 <HAL_TIM_ConfigClockSource+0x178>
 8001f9a:	2b40      	cmp	r3, #64	; 0x40
 8001f9c:	d057      	beq.n	800204e <HAL_TIM_ConfigClockSource+0x146>
 8001f9e:	d900      	bls.n	8001fa2 <HAL_TIM_ConfigClockSource+0x9a>
 8001fa0:	e06e      	b.n	8002080 <HAL_TIM_ConfigClockSource+0x178>
 8001fa2:	2b30      	cmp	r3, #48	; 0x30
 8001fa4:	d063      	beq.n	800206e <HAL_TIM_ConfigClockSource+0x166>
 8001fa6:	d86b      	bhi.n	8002080 <HAL_TIM_ConfigClockSource+0x178>
 8001fa8:	2b20      	cmp	r3, #32
 8001faa:	d060      	beq.n	800206e <HAL_TIM_ConfigClockSource+0x166>
 8001fac:	d868      	bhi.n	8002080 <HAL_TIM_ConfigClockSource+0x178>
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d05d      	beq.n	800206e <HAL_TIM_ConfigClockSource+0x166>
 8001fb2:	2b10      	cmp	r3, #16
 8001fb4:	d05b      	beq.n	800206e <HAL_TIM_ConfigClockSource+0x166>
 8001fb6:	e063      	b.n	8002080 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6818      	ldr	r0, [r3, #0]
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	6899      	ldr	r1, [r3, #8]
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685a      	ldr	r2, [r3, #4]
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	f000 f96c 	bl	80022a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	2277      	movs	r2, #119	; 0x77
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	68ba      	ldr	r2, [r7, #8]
 8001fe2:	609a      	str	r2, [r3, #8]
      break;
 8001fe4:	e052      	b.n	800208c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6818      	ldr	r0, [r3, #0]
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	6899      	ldr	r1, [r3, #8]
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685a      	ldr	r2, [r3, #4]
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	f000 f955 	bl	80022a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	689a      	ldr	r2, [r3, #8]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2180      	movs	r1, #128	; 0x80
 8002006:	01c9      	lsls	r1, r1, #7
 8002008:	430a      	orrs	r2, r1
 800200a:	609a      	str	r2, [r3, #8]
      break;
 800200c:	e03e      	b.n	800208c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6818      	ldr	r0, [r3, #0]
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	6859      	ldr	r1, [r3, #4]
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	001a      	movs	r2, r3
 800201c:	f000 f8c8 	bl	80021b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2150      	movs	r1, #80	; 0x50
 8002026:	0018      	movs	r0, r3
 8002028:	f000 f922 	bl	8002270 <TIM_ITRx_SetConfig>
      break;
 800202c:	e02e      	b.n	800208c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6818      	ldr	r0, [r3, #0]
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	6859      	ldr	r1, [r3, #4]
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	001a      	movs	r2, r3
 800203c:	f000 f8e6 	bl	800220c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2160      	movs	r1, #96	; 0x60
 8002046:	0018      	movs	r0, r3
 8002048:	f000 f912 	bl	8002270 <TIM_ITRx_SetConfig>
      break;
 800204c:	e01e      	b.n	800208c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6818      	ldr	r0, [r3, #0]
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	6859      	ldr	r1, [r3, #4]
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	001a      	movs	r2, r3
 800205c:	f000 f8a8 	bl	80021b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2140      	movs	r1, #64	; 0x40
 8002066:	0018      	movs	r0, r3
 8002068:	f000 f902 	bl	8002270 <TIM_ITRx_SetConfig>
      break;
 800206c:	e00e      	b.n	800208c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	0019      	movs	r1, r3
 8002078:	0010      	movs	r0, r2
 800207a:	f000 f8f9 	bl	8002270 <TIM_ITRx_SetConfig>
      break;
 800207e:	e005      	b.n	800208c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002080:	230f      	movs	r3, #15
 8002082:	18fb      	adds	r3, r7, r3
 8002084:	2201      	movs	r2, #1
 8002086:	701a      	strb	r2, [r3, #0]
      break;
 8002088:	e000      	b.n	800208c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800208a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	223d      	movs	r2, #61	; 0x3d
 8002090:	2101      	movs	r1, #1
 8002092:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	223c      	movs	r2, #60	; 0x3c
 8002098:	2100      	movs	r1, #0
 800209a:	5499      	strb	r1, [r3, r2]

  return status;
 800209c:	230f      	movs	r3, #15
 800209e:	18fb      	adds	r3, r7, r3
 80020a0:	781b      	ldrb	r3, [r3, #0]
}
 80020a2:	0018      	movs	r0, r3
 80020a4:	46bd      	mov	sp, r7
 80020a6:	b004      	add	sp, #16
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	46c0      	nop			; (mov r8, r8)
 80020ac:	ffff00ff 	.word	0xffff00ff

080020b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4a34      	ldr	r2, [pc, #208]	; (8002194 <TIM_Base_SetConfig+0xe4>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d008      	beq.n	80020da <TIM_Base_SetConfig+0x2a>
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	2380      	movs	r3, #128	; 0x80
 80020cc:	05db      	lsls	r3, r3, #23
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d003      	beq.n	80020da <TIM_Base_SetConfig+0x2a>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a30      	ldr	r2, [pc, #192]	; (8002198 <TIM_Base_SetConfig+0xe8>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d108      	bne.n	80020ec <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2270      	movs	r2, #112	; 0x70
 80020de:	4393      	bics	r3, r2
 80020e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	68fa      	ldr	r2, [r7, #12]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4a29      	ldr	r2, [pc, #164]	; (8002194 <TIM_Base_SetConfig+0xe4>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d018      	beq.n	8002126 <TIM_Base_SetConfig+0x76>
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	2380      	movs	r3, #128	; 0x80
 80020f8:	05db      	lsls	r3, r3, #23
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d013      	beq.n	8002126 <TIM_Base_SetConfig+0x76>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a25      	ldr	r2, [pc, #148]	; (8002198 <TIM_Base_SetConfig+0xe8>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d00f      	beq.n	8002126 <TIM_Base_SetConfig+0x76>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a24      	ldr	r2, [pc, #144]	; (800219c <TIM_Base_SetConfig+0xec>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d00b      	beq.n	8002126 <TIM_Base_SetConfig+0x76>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a23      	ldr	r2, [pc, #140]	; (80021a0 <TIM_Base_SetConfig+0xf0>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d007      	beq.n	8002126 <TIM_Base_SetConfig+0x76>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a22      	ldr	r2, [pc, #136]	; (80021a4 <TIM_Base_SetConfig+0xf4>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d003      	beq.n	8002126 <TIM_Base_SetConfig+0x76>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a21      	ldr	r2, [pc, #132]	; (80021a8 <TIM_Base_SetConfig+0xf8>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d108      	bne.n	8002138 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	4a20      	ldr	r2, [pc, #128]	; (80021ac <TIM_Base_SetConfig+0xfc>)
 800212a:	4013      	ands	r3, r2
 800212c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	68fa      	ldr	r2, [r7, #12]
 8002134:	4313      	orrs	r3, r2
 8002136:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2280      	movs	r2, #128	; 0x80
 800213c:	4393      	bics	r3, r2
 800213e:	001a      	movs	r2, r3
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	695b      	ldr	r3, [r3, #20]
 8002144:	4313      	orrs	r3, r2
 8002146:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	68fa      	ldr	r2, [r7, #12]
 800214c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	689a      	ldr	r2, [r3, #8]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a0c      	ldr	r2, [pc, #48]	; (8002194 <TIM_Base_SetConfig+0xe4>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d00b      	beq.n	800217e <TIM_Base_SetConfig+0xce>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a0d      	ldr	r2, [pc, #52]	; (80021a0 <TIM_Base_SetConfig+0xf0>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d007      	beq.n	800217e <TIM_Base_SetConfig+0xce>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a0c      	ldr	r2, [pc, #48]	; (80021a4 <TIM_Base_SetConfig+0xf4>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d003      	beq.n	800217e <TIM_Base_SetConfig+0xce>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a0b      	ldr	r2, [pc, #44]	; (80021a8 <TIM_Base_SetConfig+0xf8>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d103      	bne.n	8002186 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	691a      	ldr	r2, [r3, #16]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2201      	movs	r2, #1
 800218a:	615a      	str	r2, [r3, #20]
}
 800218c:	46c0      	nop			; (mov r8, r8)
 800218e:	46bd      	mov	sp, r7
 8002190:	b004      	add	sp, #16
 8002192:	bd80      	pop	{r7, pc}
 8002194:	40012c00 	.word	0x40012c00
 8002198:	40000400 	.word	0x40000400
 800219c:	40002000 	.word	0x40002000
 80021a0:	40014000 	.word	0x40014000
 80021a4:	40014400 	.word	0x40014400
 80021a8:	40014800 	.word	0x40014800
 80021ac:	fffffcff 	.word	0xfffffcff

080021b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6a1b      	ldr	r3, [r3, #32]
 80021c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6a1b      	ldr	r3, [r3, #32]
 80021c6:	2201      	movs	r2, #1
 80021c8:	4393      	bics	r3, r2
 80021ca:	001a      	movs	r2, r3
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	22f0      	movs	r2, #240	; 0xf0
 80021da:	4393      	bics	r3, r2
 80021dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	011b      	lsls	r3, r3, #4
 80021e2:	693a      	ldr	r2, [r7, #16]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	220a      	movs	r2, #10
 80021ec:	4393      	bics	r3, r2
 80021ee:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80021f0:	697a      	ldr	r2, [r7, #20]
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	693a      	ldr	r2, [r7, #16]
 80021fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	697a      	ldr	r2, [r7, #20]
 8002202:	621a      	str	r2, [r3, #32]
}
 8002204:	46c0      	nop			; (mov r8, r8)
 8002206:	46bd      	mov	sp, r7
 8002208:	b006      	add	sp, #24
 800220a:	bd80      	pop	{r7, pc}

0800220c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b086      	sub	sp, #24
 8002210:	af00      	add	r7, sp, #0
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6a1b      	ldr	r3, [r3, #32]
 800221c:	2210      	movs	r2, #16
 800221e:	4393      	bics	r3, r2
 8002220:	001a      	movs	r2, r3
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	699b      	ldr	r3, [r3, #24]
 800222a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	6a1b      	ldr	r3, [r3, #32]
 8002230:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	4a0d      	ldr	r2, [pc, #52]	; (800226c <TIM_TI2_ConfigInputStage+0x60>)
 8002236:	4013      	ands	r3, r2
 8002238:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	031b      	lsls	r3, r3, #12
 800223e:	697a      	ldr	r2, [r7, #20]
 8002240:	4313      	orrs	r3, r2
 8002242:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	22a0      	movs	r2, #160	; 0xa0
 8002248:	4393      	bics	r3, r2
 800224a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	011b      	lsls	r3, r3, #4
 8002250:	693a      	ldr	r2, [r7, #16]
 8002252:	4313      	orrs	r3, r2
 8002254:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	697a      	ldr	r2, [r7, #20]
 800225a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	693a      	ldr	r2, [r7, #16]
 8002260:	621a      	str	r2, [r3, #32]
}
 8002262:	46c0      	nop			; (mov r8, r8)
 8002264:	46bd      	mov	sp, r7
 8002266:	b006      	add	sp, #24
 8002268:	bd80      	pop	{r7, pc}
 800226a:	46c0      	nop			; (mov r8, r8)
 800226c:	ffff0fff 	.word	0xffff0fff

08002270 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2270      	movs	r2, #112	; 0x70
 8002284:	4393      	bics	r3, r2
 8002286:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002288:	683a      	ldr	r2, [r7, #0]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	4313      	orrs	r3, r2
 800228e:	2207      	movs	r2, #7
 8002290:	4313      	orrs	r3, r2
 8002292:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	68fa      	ldr	r2, [r7, #12]
 8002298:	609a      	str	r2, [r3, #8]
}
 800229a:	46c0      	nop			; (mov r8, r8)
 800229c:	46bd      	mov	sp, r7
 800229e:	b004      	add	sp, #16
 80022a0:	bd80      	pop	{r7, pc}
	...

080022a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
 80022b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	4a09      	ldr	r2, [pc, #36]	; (80022e0 <TIM_ETR_SetConfig+0x3c>)
 80022bc:	4013      	ands	r3, r2
 80022be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	021a      	lsls	r2, r3, #8
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	431a      	orrs	r2, r3
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	697a      	ldr	r2, [r7, #20]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	697a      	ldr	r2, [r7, #20]
 80022d6:	609a      	str	r2, [r3, #8]
}
 80022d8:	46c0      	nop			; (mov r8, r8)
 80022da:	46bd      	mov	sp, r7
 80022dc:	b006      	add	sp, #24
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	ffff00ff 	.word	0xffff00ff

080022e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	223c      	movs	r2, #60	; 0x3c
 80022f2:	5c9b      	ldrb	r3, [r3, r2]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d101      	bne.n	80022fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80022f8:	2302      	movs	r3, #2
 80022fa:	e047      	b.n	800238c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	223c      	movs	r2, #60	; 0x3c
 8002300:	2101      	movs	r1, #1
 8002302:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	223d      	movs	r2, #61	; 0x3d
 8002308:	2102      	movs	r1, #2
 800230a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2270      	movs	r2, #112	; 0x70
 8002320:	4393      	bics	r3, r2
 8002322:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	68fa      	ldr	r2, [r7, #12]
 800232a:	4313      	orrs	r3, r2
 800232c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	68fa      	ldr	r2, [r7, #12]
 8002334:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a16      	ldr	r2, [pc, #88]	; (8002394 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d00f      	beq.n	8002360 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	2380      	movs	r3, #128	; 0x80
 8002346:	05db      	lsls	r3, r3, #23
 8002348:	429a      	cmp	r2, r3
 800234a:	d009      	beq.n	8002360 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a11      	ldr	r2, [pc, #68]	; (8002398 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d004      	beq.n	8002360 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a10      	ldr	r2, [pc, #64]	; (800239c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d10c      	bne.n	800237a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	2280      	movs	r2, #128	; 0x80
 8002364:	4393      	bics	r3, r2
 8002366:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	68ba      	ldr	r2, [r7, #8]
 800236e:	4313      	orrs	r3, r2
 8002370:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	68ba      	ldr	r2, [r7, #8]
 8002378:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	223d      	movs	r2, #61	; 0x3d
 800237e:	2101      	movs	r1, #1
 8002380:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	223c      	movs	r2, #60	; 0x3c
 8002386:	2100      	movs	r1, #0
 8002388:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800238a:	2300      	movs	r3, #0
}
 800238c:	0018      	movs	r0, r3
 800238e:	46bd      	mov	sp, r7
 8002390:	b004      	add	sp, #16
 8002392:	bd80      	pop	{r7, pc}
 8002394:	40012c00 	.word	0x40012c00
 8002398:	40000400 	.word	0x40000400
 800239c:	40014000 	.word	0x40014000

080023a0 <__libc_init_array>:
 80023a0:	b570      	push	{r4, r5, r6, lr}
 80023a2:	2600      	movs	r6, #0
 80023a4:	4d0c      	ldr	r5, [pc, #48]	; (80023d8 <__libc_init_array+0x38>)
 80023a6:	4c0d      	ldr	r4, [pc, #52]	; (80023dc <__libc_init_array+0x3c>)
 80023a8:	1b64      	subs	r4, r4, r5
 80023aa:	10a4      	asrs	r4, r4, #2
 80023ac:	42a6      	cmp	r6, r4
 80023ae:	d109      	bne.n	80023c4 <__libc_init_array+0x24>
 80023b0:	2600      	movs	r6, #0
 80023b2:	f000 f821 	bl	80023f8 <_init>
 80023b6:	4d0a      	ldr	r5, [pc, #40]	; (80023e0 <__libc_init_array+0x40>)
 80023b8:	4c0a      	ldr	r4, [pc, #40]	; (80023e4 <__libc_init_array+0x44>)
 80023ba:	1b64      	subs	r4, r4, r5
 80023bc:	10a4      	asrs	r4, r4, #2
 80023be:	42a6      	cmp	r6, r4
 80023c0:	d105      	bne.n	80023ce <__libc_init_array+0x2e>
 80023c2:	bd70      	pop	{r4, r5, r6, pc}
 80023c4:	00b3      	lsls	r3, r6, #2
 80023c6:	58eb      	ldr	r3, [r5, r3]
 80023c8:	4798      	blx	r3
 80023ca:	3601      	adds	r6, #1
 80023cc:	e7ee      	b.n	80023ac <__libc_init_array+0xc>
 80023ce:	00b3      	lsls	r3, r6, #2
 80023d0:	58eb      	ldr	r3, [r5, r3]
 80023d2:	4798      	blx	r3
 80023d4:	3601      	adds	r6, #1
 80023d6:	e7f2      	b.n	80023be <__libc_init_array+0x1e>
 80023d8:	08002440 	.word	0x08002440
 80023dc:	08002440 	.word	0x08002440
 80023e0:	08002440 	.word	0x08002440
 80023e4:	08002444 	.word	0x08002444

080023e8 <memset>:
 80023e8:	0003      	movs	r3, r0
 80023ea:	1882      	adds	r2, r0, r2
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d100      	bne.n	80023f2 <memset+0xa>
 80023f0:	4770      	bx	lr
 80023f2:	7019      	strb	r1, [r3, #0]
 80023f4:	3301      	adds	r3, #1
 80023f6:	e7f9      	b.n	80023ec <memset+0x4>

080023f8 <_init>:
 80023f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023fa:	46c0      	nop			; (mov r8, r8)
 80023fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023fe:	bc08      	pop	{r3}
 8002400:	469e      	mov	lr, r3
 8002402:	4770      	bx	lr

08002404 <_fini>:
 8002404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002406:	46c0      	nop			; (mov r8, r8)
 8002408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800240a:	bc08      	pop	{r3}
 800240c:	469e      	mov	lr, r3
 800240e:	4770      	bx	lr
